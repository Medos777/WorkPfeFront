{"version":3,"file":"static/js/989.7f2a5577.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","../node_modules/@mui/material/DialogContentText/DialogContentText.js","Template/ListTemplate.jsx","service/TemplateService.js","../node_modules/@mui/icons-material/esm/Folder.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport { getDialogContentTextUtilityClass } from \"./dialogContentTextClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return {\n    ...classes,\n    // forward classes to the Typography\n    ...composedClasses\n  };\n};\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n  const {\n    children,\n    className,\n    ...ownerState\n  } = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, {\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ...props,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  IconButton,\n  Box,\n  Chip,\n  Tooltip,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from '@mui/material';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddIcon from '@mui/icons-material/Add';\nimport { useNavigate } from 'react-router-dom';\nimport TemplateService from '../service/TemplateService';\n\nconst ListTemplate = () => {\n  const [templates, setTemplates] = useState([]);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedTemplateId, setSelectedTemplateId] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    loadTemplates();\n  }, []);\n\n  const loadTemplates = async () => {\n    try {\n      const response = await TemplateService.getAll();\n      setTemplates(response.data);\n    } catch (error) {\n      console.error('Error loading templates:', error);\n      // Handle error (show notification, etc.)\n    }\n  };\n\n  const getTemplateIcon = (type) => {\n    switch (type) {\n      case 'kanban':\n        return <DashboardIcon />;\n      case 'scrum':\n        return <TimelineIcon />;\n      case 'project':\n        return <FolderIcon />;\n      default:\n        return <DashboardIcon />;\n    }\n  };\n\n  const getTemplateTypeLabel = (type) => {\n    switch (type) {\n      case 'kanban':\n        return 'Kanban Board';\n      case 'scrum':\n        return 'Scrum Board';\n      case 'project':\n        return 'Project Management';\n      default:\n        return 'Template';\n    }\n  };\n\n  const handleEdit = (id) => {\n    navigate(`/templates/edit/${id}`);\n  };\n\n  const handleDeleteClick = (id) => {\n    setSelectedTemplateId(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleDeleteConfirm = async () => {\n    try {\n      await TemplateService.delete(selectedTemplateId);\n      setDeleteDialogOpen(false);\n      loadTemplates(); // Reload the list\n    } catch (error) {\n      console.error('Error deleting template:', error);\n      // Handle error (show notification, etc.)\n    }\n  };\n\n  const handleAddTemplate = () => {\n    navigate('/templates/add');\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Templates\n        </Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<AddIcon />}\n          onClick={handleAddTemplate}\n        >\n          Add Template\n        </Button>\n      </Box>\n      \n      <Grid container spacing={3}>\n        {templates.map((template) => (\n          <Grid item xs={12} md={6} lg={4} key={template._id}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  {getTemplateIcon(template.type)}\n                  <Typography variant=\"h6\" sx={{ ml: 1 }}>\n                    {template.name}\n                  </Typography>\n                </Box>\n                \n                <Chip \n                  label={getTemplateTypeLabel(template.type)}\n                  size=\"small\"\n                  sx={{ mb: 2 }}\n                />\n                \n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  {template.description}\n                </Typography>\n                \n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Created: {new Date(template.createdAt).toLocaleDateString()}\n                  </Typography>\n                  \n                  <Box>\n                    <Tooltip title=\"Edit\">\n                      <IconButton size=\"small\" onClick={() => handleEdit(template._id)}>\n                        <EditIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete\">\n                      <IconButton size=\"small\" onClick={() => handleDeleteClick(template._id)}>\n                        <DeleteIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </Box>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteDialogOpen}\n        onClose={() => setDeleteDialogOpen(false)}\n      >\n        <DialogTitle>Delete Template</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete this template? This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleDeleteConfirm} color=\"error\" autoFocus>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default ListTemplate;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    console.log('Fetching all templates...');\n    return httpClient.get('/template/all');\n};\n\nconst getTemplate = (id) => {\n    console.log('Fetching template with ID:', id);\n    return httpClient.get(`/template/${id}`);\n};\n\nconst getTemplatesByType = (type) => {\n    console.log('Fetching templates by type:', type);\n    return httpClient.get(`/template/type/${type}`);\n};\n\nconst getDefaultTemplates = () => {\n    console.log('Fetching default templates...');\n    return httpClient.get('/template/default');\n};\n\nconst create = (templateData) => {\n    console.log('Creating template with data:', templateData);\n    return httpClient.post('/template/create', templateData);\n};\n\nconst update = (id, templateData) => {\n    console.log('Updating template with ID:', id);\n    console.log('Update data:', templateData);\n    return httpClient.put(`/template/update/${id}`, templateData);\n};\n\nconst deleteTemplate = (id) => {\n    console.log('Deleting template with ID:', id);\n    return httpClient.delete(`/template/delete/${id}`);\n};\n\nconst cloneTemplate = (id) => {\n    console.log('Cloning template with ID:', id);\n    return httpClient.post(`/template/${id}/clone`);\n};\n\nexport default { \n    getAll, \n    getTemplate, \n    getTemplatesByType, \n    getDefaultTemplates,\n    create, \n    update, \n    delete: deleteTemplate,\n    clone: cloneTemplate \n};","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8z\"\n}), 'Folder');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getCardContentUtilityClass } from \"./cardContentClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 16,\n  '&:last-child': {\n    paddingBottom: 24\n  }\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n    className,\n    component = 'div',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["getDialogContentTextUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","DialogContentTextRoot","styled","Typography","shouldForwardProp","prop","rootShouldForwardProp","name","overridesResolver","props","styles","root","React","inProps","ref","useDefaultProps","children","className","ownerState","_objectWithoutProperties","classes","composedClasses","composeClasses","_objectSpread","useUtilityClasses","_jsx","component","variant","color","clsx","ListTemplate","templates","setTemplates","useState","deleteDialogOpen","setDeleteDialogOpen","selectedTemplateId","setSelectedTemplateId","navigate","useNavigate","useEffect","loadTemplates","async","response","TemplateService","getAll","data","error","console","getTemplateIcon","type","DashboardIcon","TimelineIcon","FolderIcon","getTemplateTypeLabel","_jsxs","Container","maxWidth","sx","mt","mb","Box","display","justifyContent","alignItems","gutterBottom","Button","startIcon","AddIcon","onClick","handleAddTemplate","Grid","container","spacing","map","template","item","xs","md","lg","Card","CardContent","ml","Chip","label","size","paragraph","description","Date","createdAt","toLocaleDateString","Tooltip","title","IconButton","handleEdit","id","_id","concat","EditIcon","handleDeleteClick","DeleteIcon","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","delete","autoFocus","log","httpClient","get","getTemplate","getTemplatesByType","getDefaultTemplates","create","templateData","post","update","put","clone","createSvgIcon","d","getCardContentUtilityClass","CardContentRoot","padding","paddingBottom","other","as"],"sourceRoot":""}