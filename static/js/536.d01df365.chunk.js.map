{"version":3,"file":"static/js/536.d01df365.chunk.js","mappings":"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","sources":["service/ReportService.js","components/Reports/Reports.jsx"],"sourcesContent":["import axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport httpClient from '../http-common';\n\nclass ReportService {\n    static async generateProjectReport(projectId, format = 'pdf') {\n        try {\n            const response = await httpClient.get(`/projects/${projectId}/export/${format}`, {\n                responseType: 'blob'\n            });\n            \n            const fileName = `project-report-${projectId}.${format}`;\n            saveAs(new Blob([response.data]), fileName);\n            \n            return true;\n        } catch (error) {\n            console.error('Error generating report:', error);\n            throw error;\n        }\n    }\n\n    static async exportToExcel(data, fileName = 'export.xlsx') {\n        try {\n            const ws = XLSX.utils.json_to_sheet(data);\n            const wb = XLSX.utils.book_new();\n            XLSX.utils.book_append_sheet(wb, ws, 'Data');\n            \n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n            saveAs(new Blob([excelBuffer]), fileName);\n            \n            return true;\n        } catch (error) {\n            console.error('Error exporting to Excel:', error);\n            throw error;\n        }\n    }\n\n    static async exportToCsv(data, fileName = 'export.csv') {\n        try {\n            const replacer = (key, value) => value === null ? '' : value;\n            const header = Object.keys(data[0]);\n            const csv = [\n                header.join(','),\n                ...data.map(row => header.map(fieldName => \n                    JSON.stringify(row[fieldName], replacer)).join(','))\n            ].join('\\r\\n');\n\n            saveAs(new Blob([csv], { type: 'text/csv;charset=utf-8;' }), fileName);\n            return true;\n        } catch (error) {\n            console.error('Error exporting to CSV:', error);\n            throw error;\n        }\n    }\n\n    static async scheduleReport(projectId, schedule) {\n        try {\n            const response = await httpClient.post(`/projects/${projectId}/schedule-report`, schedule);\n            return response.data;\n        } catch (error) {\n            console.error('Error scheduling report:', error);\n            throw error;\n        }\n    }\n\n    static async getScheduledReports(projectId) {\n        try {\n            const response = await httpClient.get(`/projects/${projectId}/scheduled-reports`);\n            return response.data;\n        } catch (error) {\n            console.error('Error getting scheduled reports:', error);\n            throw error;\n        }\n    }\n\n    static async deleteScheduledReport(projectId, reportId) {\n        try {\n            const response = await httpClient.delete(`/projects/${projectId}/scheduled-reports/${reportId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting scheduled report:', error);\n            throw error;\n        }\n    }\n\n    static async getCustomReport(projectId, filters) {\n        try {\n            const response = await axios.post(`/api/projects/${projectId}/custom-report`, filters);\n            return response.data;\n        } catch (error) {\n            console.error('Error generating custom report:', error);\n            throw error;\n        }\n    }\n}\n\nexport default ReportService;\n","import React, { useState } from 'react';\nimport {\n    Box,\n    Typography,\n    Paper,\n    Grid,\n    Button,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Snackbar,\n    Alert,\n    Card,\n    CardContent,\n    IconButton,\n    Tooltip,\n} from '@mui/material';\nimport {\n    CloudDownload,\n    Schedule,\n    Description,\n    PictureAsPdf,\n    TableChart,\n    Delete,\n} from '@mui/icons-material';\nimport ReportService from '../../service/ReportService';\n\nconst Reports = () => {\n    const [reportType, setReportType] = useState('');\n    const [format, setFormat] = useState('pdf');\n    const [dateRange, setDateRange] = useState({\n        startDate: '',\n        endDate: '',\n    });\n    const [scheduleInterval, setScheduleInterval] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [notification, setNotification] = useState({\n        open: false,\n        message: '',\n        severity: 'success',\n    });\n    const [scheduledReports, setScheduledReports] = useState([\n        {\n            id: 1,\n            name: 'Weekly Progress Report',\n            interval: 'weekly',\n            format: 'pdf',\n            nextRun: '2024-01-25',\n        },\n        {\n            id: 2,\n            name: 'Monthly Analytics',\n            interval: 'monthly',\n            format: 'excel',\n            nextRun: '2024-02-01',\n        },\n    ]);\n\n    const handleGenerateReport = async () => {\n        if (!reportType || !format) {\n            setNotification({\n                open: true,\n                message: 'Please select report type and format',\n                severity: 'error',\n            });\n            return;\n        }\n\n        setLoading(true);\n        try {\n            await ReportService.exportProjectReport(reportType, format);\n            setNotification({\n                open: true,\n                message: 'Report generated successfully',\n                severity: 'success',\n            });\n        } catch (error) {\n            setNotification({\n                open: true,\n                message: 'Error generating report',\n                severity: 'error',\n            });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleScheduleReport = async () => {\n        if (!reportType || !scheduleInterval) {\n            setNotification({\n                open: true,\n                message: 'Please select report type and schedule interval',\n                severity: 'error',\n            });\n            return;\n        }\n\n        setLoading(true);\n        try {\n            await ReportService.scheduleReport(reportType, {\n                interval: scheduleInterval,\n                format,\n            });\n            setNotification({\n                open: true,\n                message: 'Report scheduled successfully',\n                severity: 'success',\n            });\n        } catch (error) {\n            setNotification({\n                open: true,\n                message: 'Error scheduling report',\n                severity: 'error',\n            });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDeleteScheduledReport = (reportId) => {\n        setScheduledReports(prev => prev.filter(report => report.id !== reportId));\n        setNotification({\n            open: true,\n            message: 'Scheduled report deleted',\n            severity: 'success',\n        });\n    };\n\n    return (\n        <Box sx={{ p: 3 }}>\n            <Typography variant=\"h4\" gutterBottom>\n                Reports\n            </Typography>\n\n            <Grid container spacing={3}>\n                {/* Generate Report Section */}\n                <Grid item xs={12} md={6}>\n                    <Paper sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Generate Report\n                        </Typography>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <FormControl fullWidth>\n                                    <InputLabel>Report Type</InputLabel>\n                                    <Select\n                                        value={reportType}\n                                        onChange={(e) => setReportType(e.target.value)}\n                                        label=\"Report Type\"\n                                    >\n                                        <MenuItem value=\"project-progress\">Project Progress</MenuItem>\n                                        <MenuItem value=\"team-performance\">Team Performance</MenuItem>\n                                        <MenuItem value=\"resource-allocation\">Resource Allocation</MenuItem>\n                                        <MenuItem value=\"budget-analysis\">Budget Analysis</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <FormControl fullWidth>\n                                    <InputLabel>Format</InputLabel>\n                                    <Select\n                                        value={format}\n                                        onChange={(e) => setFormat(e.target.value)}\n                                        label=\"Format\"\n                                    >\n                                        <MenuItem value=\"pdf\">PDF</MenuItem>\n                                        <MenuItem value=\"excel\">Excel</MenuItem>\n                                        <MenuItem value=\"csv\">CSV</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Start Date\"\n                                    type=\"date\"\n                                    value={dateRange.startDate}\n                                    onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"End Date\"\n                                    type=\"date\"\n                                    value={dateRange.endDate}\n                                    onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    fullWidth\n                                    variant=\"contained\"\n                                    startIcon={<CloudDownload />}\n                                    onClick={handleGenerateReport}\n                                    disabled={loading}\n                                >\n                                    Generate Report\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </Grid>\n\n                {/* Schedule Report Section */}\n                <Grid item xs={12} md={6}>\n                    <Paper sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Schedule Report\n                        </Typography>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <FormControl fullWidth>\n                                    <InputLabel>Report Type</InputLabel>\n                                    <Select\n                                        value={reportType}\n                                        onChange={(e) => setReportType(e.target.value)}\n                                        label=\"Report Type\"\n                                    >\n                                        <MenuItem value=\"project-progress\">Project Progress</MenuItem>\n                                        <MenuItem value=\"team-performance\">Team Performance</MenuItem>\n                                        <MenuItem value=\"resource-allocation\">Resource Allocation</MenuItem>\n                                        <MenuItem value=\"budget-analysis\">Budget Analysis</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <FormControl fullWidth>\n                                    <InputLabel>Schedule Interval</InputLabel>\n                                    <Select\n                                        value={scheduleInterval}\n                                        onChange={(e) => setScheduleInterval(e.target.value)}\n                                        label=\"Schedule Interval\"\n                                    >\n                                        <MenuItem value=\"daily\">Daily</MenuItem>\n                                        <MenuItem value=\"weekly\">Weekly</MenuItem>\n                                        <MenuItem value=\"monthly\">Monthly</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    fullWidth\n                                    variant=\"contained\"\n                                    startIcon={<Schedule />}\n                                    onClick={handleScheduleReport}\n                                    disabled={loading}\n                                >\n                                    Schedule Report\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </Grid>\n\n                {/* Scheduled Reports Section */}\n                <Grid item xs={12}>\n                    <Paper sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Scheduled Reports\n                        </Typography>\n                        <Grid container spacing={2}>\n                            {scheduledReports.map((report) => (\n                                <Grid item xs={12} sm={6} md={4} key={report.id}>\n                                    <Card>\n                                        <CardContent>\n                                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n                                                <Typography variant=\"h6\" component=\"div\">\n                                                    {report.name}\n                                                </Typography>\n                                                <Tooltip title=\"Delete Schedule\">\n                                                    <IconButton\n                                                        size=\"small\"\n                                                        onClick={() => handleDeleteScheduledReport(report.id)}\n                                                    >\n                                                        <Delete />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </Box>\n                                            <Typography color=\"text.secondary\">\n                                                Interval: {report.interval}\n                                            </Typography>\n                                            <Typography color=\"text.secondary\">\n                                                Format: {report.format}\n                                            </Typography>\n                                            <Typography color=\"text.secondary\">\n                                                Next Run: {report.nextRun}\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Paper>\n                </Grid>\n            </Grid>\n\n            <Snackbar\n                open={notification.open}\n                autoHideDuration={6000}\n                onClose={() => setNotification(prev => ({ ...prev, open: false }))}\n            >\n                <Alert\n                    onClose={() => setNotification(prev => ({ ...prev, open: false }))}\n                    severity={notification.severity}\n                    sx={{ width: '100%' }}\n                >\n                    {notification.message}\n                </Alert>\n            </Snackbar>\n        </Box>\n    );\n};\n\nexport default Reports;\n"],"names":["generateProjectReport","projectId","format","arguments","length","undefined","response","httpClient","get","concat","responseType","fileName","saveAs","Blob","data","error","console","exportToExcel","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","excelBuffer","bookType","type","exportToCsv","replacer","key","value","header","Object","keys","csv","join","map","row","fieldName","JSON","stringify","scheduleReport","schedule","post","getScheduledReports","deleteScheduledReport","reportId","delete","getCustomReport","filters","axios","Reports","reportType","setReportType","useState","setFormat","dateRange","setDateRange","startDate","endDate","scheduleInterval","setScheduleInterval","loading","setLoading","notification","setNotification","open","message","severity","scheduledReports","setScheduledReports","id","name","interval","nextRun","_jsxs","Box","sx","p","children","_jsx","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Paper","FormControl","fullWidth","InputLabel","Select","onChange","e","target","label","MenuItem","TextField","prev","_objectSpread","InputLabelProps","shrink","Button","startIcon","CloudDownload","onClick","async","ReportService","exportProjectReport","disabled","Schedule","report","sm","Card","CardContent","display","justifyContent","mb","component","Tooltip","title","IconButton","size","handleDeleteScheduledReport","filter","Delete","color","Snackbar","autoHideDuration","onClose","Alert","width"],"sourceRoot":""}