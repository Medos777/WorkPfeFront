{"version":3,"file":"static/js/632.6b6ef8bb.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Analytics.js","../node_modules/@mui/icons-material/esm/Info.js","../node_modules/@mui/icons-material/esm/Warning.js","service/ProjectAIService.js","components/Dashboard/ProjectAnalytics.jsx","service/ProjectService.js","../node_modules/@mui/icons-material/esm/Speed.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2M9 17H7v-5h2zm4 0h-2v-3h2zm0-5h-2v-2h2zm4 5h-2V7h2z\"\n}), 'Analytics');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z\"\n}), 'Info');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M1 21h22L12 2zm12-3h-2v-2h2zm0-4h-2v-4h2z\"\n}), 'Warning');","import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nclass ProjectAIService {\n    async getProjectInsights(projectId) {\n        try {\n            const response = await axios.get(`${API_URL}/projects/${projectId}/ai/insights`);\n            return response.data;\n        } catch (error) {\n            // For demo purposes, return mock data\n            return {\n                recommendations: [\n                    {\n                        title: 'Resource Optimization',\n                        description: 'Based on historical data, team velocity could be improved by 25% by redistributing tasks according to skill sets.',\n                        impact: 'High'\n                    },\n                    {\n                        title: 'Sprint Planning',\n                        description: 'Current sprint capacity is underutilized. Consider increasing story points by 15% in next sprint.',\n                        impact: 'Medium'\n                    },\n                    {\n                        title: 'Risk Mitigation',\n                        description: 'Dependencies in upcoming tasks suggest potential bottlenecks. Consider parallel development tracks.',\n                        impact: 'High'\n                    }\n                ],\n                confidenceScore: 85\n            };\n        }\n    }\n\n    async getProjectRisks(projectId) {\n        try {\n            const response = await axios.get(`${API_URL}/projects/${projectId}/ai/risks`);\n            return response.data;\n        } catch (error) {\n            // For demo purposes, return mock data\n            return {\n                overallRisk: 65,\n                riskDistribution: [\n                    { category: 'Technical', value: 30 },\n                    { category: 'Schedule', value: 25 },\n                    { category: 'Resource', value: 20 },\n                    { category: 'Scope', value: 15 },\n                    { category: 'Budget', value: 10 }\n                ],\n                topRisks: [\n                    {\n                        category: 'Technical Debt',\n                        description: 'Current code complexity trends indicate increasing maintenance costs',\n                        probability: 75\n                    },\n                    {\n                        category: 'Resource Availability',\n                        description: 'Key team members have overlapping commitments in upcoming sprints',\n                        probability: 60\n                    },\n                    {\n                        category: 'Schedule Delay',\n                        description: 'Integration testing phase may require additional time based on complexity',\n                        probability: 45\n                    }\n                ]\n            };\n        }\n    }\n\n    async predictProjectSuccess(projectId) {\n        try {\n            const response = await axios.get(`${API_URL}/projects/${projectId}/ai/prediction`);\n            return response.data;\n        } catch (error) {\n            // For demo purposes, return mock data\n            return {\n                successProbability: 78,\n                factors: [\n                    {\n                        name: 'Team Experience',\n                        impact: 'positive',\n                        weight: 0.8\n                    },\n                    {\n                        name: 'Technical Complexity',\n                        impact: 'negative',\n                        weight: 0.6\n                    },\n                    {\n                        name: 'Resource Allocation',\n                        impact: 'neutral',\n                        weight: 0.4\n                    }\n                ],\n                recommendations: [\n                    'Consider adding more experienced developers to complex tasks',\n                    'Implement more automated testing to reduce technical risks',\n                    'Review and optimize resource allocation strategy'\n                ]\n            };\n        }\n    }\n\n    async analyzeTrends(projectId) {\n        try {\n            const response = await axios.get(`${API_URL}/projects/${projectId}/ai/trends`);\n            return response.data;\n        } catch (error) {\n            // For demo purposes, return mock data\n            return {\n                velocityTrend: {\n                    current: 25,\n                    historical: [20, 22, 24, 25, 23, 25],\n                    prediction: 27\n                },\n                qualityMetrics: {\n                    bugRate: {\n                        current: 2.5,\n                        trend: 'decreasing'\n                    },\n                    codeQuality: {\n                        current: 85,\n                        trend: 'stable'\n                    },\n                    testCoverage: {\n                        current: 78,\n                        trend: 'increasing'\n                    }\n                },\n                teamHealth: {\n                    productivity: {\n                        score: 85,\n                        trend: 'improving'\n                    },\n                    collaboration: {\n                        score: 90,\n                        trend: 'stable'\n                    },\n                    satisfaction: {\n                        score: 82,\n                        trend: 'stable'\n                    }\n                }\n            };\n        }\n    }\n}\n\nexport default new ProjectAIService();\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n    Box,\n    Grid,\n    Paper,\n    Typography,\n    CircularProgress,\n    Card,\n    CardContent,\n    Button,\n    Tooltip,\n    IconButton,\n    Chip,\n} from '@mui/material';\nimport {\n    BarChart,\n    Bar,\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip as ChartTooltip,\n    Legend,\n    ResponsiveContainer,\n    PieChart,\n    Pie,\n    Cell,\n} from 'recharts';\nimport {\n    TrendingUp,\n    Warning,\n    CheckCircle,\n    Info,\n    Analytics,\n    Timeline,\n    Speed,\n} from '@mui/icons-material';\nimport ProjectService from '../../service/ProjectService';\nimport ProjectAIService from '../../service/ProjectAIService';\n\nconst ProjectAnalytics = () => {\n    const { projectId } = useParams();\n    const [loading, setLoading] = useState(true);\n    const [projectData, setProjectData] = useState(null);\n    const [aiInsights, setAiInsights] = useState(null);\n    const [performanceMetrics, setPerformanceMetrics] = useState(null);\n    const [riskAnalysis, setRiskAnalysis] = useState(null);\n\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                // Fetch real project data\n                const projectStats = await ProjectService.getProjectAnalytics(projectId);\n                setProjectData(projectStats);\n\n                // Get AI-powered insights\n                const insights = await ProjectAIService.getProjectInsights(projectId);\n                setAiInsights(insights);\n\n                // Get performance metrics\n                const metrics = await ProjectService.getProjectPerformance(projectId);\n                setPerformanceMetrics(metrics);\n\n                // Get risk analysis\n                const risks = await ProjectAIService.getProjectRisks(projectId);\n                setRiskAnalysis(risks);\n\n            } catch (error) {\n                console.error('Error fetching project analytics:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [projectId]);\n\n    const renderAIInsights = () => (\n        <Card sx={{ height: '100%' }}>\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    <Analytics sx={{ mr: 1, verticalAlign: 'middle' }} />\n                    AI-Powered Insights\n                </Typography>\n                {aiInsights?.recommendations.map((insight, index) => (\n                    <Box key={index} sx={{ mt: 2, display: 'flex', alignItems: 'flex-start' }}>\n                        <Info color=\"primary\" sx={{ mr: 1, mt: 0.5 }} />\n                        <Box>\n                            <Typography variant=\"subtitle1\">{insight.title}</Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                                {insight.description}\n                            </Typography>\n                            {insight.impact && (\n                                <Chip\n                                    size=\"small\"\n                                    label={`Impact: ${insight.impact}`}\n                                    color={insight.impact === 'High' ? 'error' : 'warning'}\n                                    sx={{ mt: 1 }}\n                                />\n                            )}\n                        </Box>\n                    </Box>\n                ))}\n            </CardContent>\n        </Card>\n    );\n\n    const renderPerformanceMetrics = () => (\n        <Card sx={{ height: '100%' }}>\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    <Speed sx={{ mr: 1, verticalAlign: 'middle' }} />\n                    Performance Metrics\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={performanceMetrics?.timeline}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <ChartTooltip />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"velocity\" stroke=\"#8884d8\" name=\"Team Velocity\" />\n                        <Line type=\"monotone\" dataKey=\"completion\" stroke=\"#82ca9d\" name=\"Completion Rate\" />\n                    </LineChart>\n                </ResponsiveContainer>\n            </CardContent>\n        </Card>\n    );\n\n    const renderRiskAnalysis = () => (\n        <Card sx={{ height: '100%' }}>\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    <Warning sx={{ mr: 1, verticalAlign: 'middle' }} />\n                    Risk Analysis\n                </Typography>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                        <ResponsiveContainer width=\"100%\" height={200}>\n                            <PieChart>\n                                <Pie\n                                    data={riskAnalysis?.riskDistribution}\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    nameKey=\"category\"\n                                    label\n                                >\n                                    {riskAnalysis?.riskDistribution.map((entry, index) => (\n                                        <Cell key={index} fill={COLORS[index % COLORS.length]} />\n                                    ))}\n                                </Pie>\n                                <ChartTooltip />\n                            </PieChart>\n                        </ResponsiveContainer>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Box>\n                            {riskAnalysis?.topRisks.map((risk, index) => (\n                                <Box key={index} sx={{ mt: 1 }}>\n                                    <Typography variant=\"subtitle2\">\n                                        {risk.category}\n                                    </Typography>\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\n                                        {risk.description}\n                                    </Typography>\n                                    <Chip\n                                        size=\"small\"\n                                        label={`Probability: ${risk.probability}%`}\n                                        color={risk.probability > 70 ? 'error' : 'warning'}\n                                        sx={{ mt: 0.5 }}\n                                    />\n                                </Box>\n                            ))}\n                        </Box>\n                    </Grid>\n                </Grid>\n            </CardContent>\n        </Card>\n    );\n\n    const renderProgressMetrics = () => (\n        <Card sx={{ height: '100%' }}>\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    <Timeline sx={{ mr: 1, verticalAlign: 'middle' }} />\n                    Progress Metrics\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={projectData?.progressMetrics}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"sprint\" />\n                        <YAxis />\n                        <ChartTooltip />\n                        <Legend />\n                        <Bar dataKey=\"planned\" fill=\"#8884d8\" name=\"Planned\" />\n                        <Bar dataKey=\"completed\" fill=\"#82ca9d\" name=\"Completed\" />\n                    </BarChart>\n                </ResponsiveContainer>\n            </CardContent>\n        </Card>\n    );\n\n    if (loading) {\n        return (\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3 }}>\n            <Typography variant=\"h4\" gutterBottom>\n                Project Analytics Dashboard\n            </Typography>\n\n            <Grid container spacing={3}>\n                {/* Summary Cards */}\n                <Grid item xs={12} md={3}>\n                    <Paper sx={{ p: 2, textAlign: 'center' }}>\n                        <Typography variant=\"h6\">Sprint Velocity</Typography>\n                        <Typography variant=\"h4\" color=\"primary\">\n                            {performanceMetrics?.currentVelocity}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                            Points per Sprint\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                    <Paper sx={{ p: 2, textAlign: 'center' }}>\n                        <Typography variant=\"h6\">Completion Rate</Typography>\n                        <Typography variant=\"h4\" color=\"success.main\">\n                            {performanceMetrics?.completionRate}%\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                            Tasks Completed\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                    <Paper sx={{ p: 2, textAlign: 'center' }}>\n                        <Typography variant=\"h6\">Risk Level</Typography>\n                        <Typography variant=\"h4\" color={riskAnalysis?.overallRisk > 70 ? 'error.main' : 'warning.main'}>\n                            {riskAnalysis?.overallRisk}%\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                            Overall Risk Score\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                    <Paper sx={{ p: 2, textAlign: 'center' }}>\n                        <Typography variant=\"h6\">AI Confidence</Typography>\n                        <Typography variant=\"h4\" color=\"info.main\">\n                            {aiInsights?.confidenceScore}%\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                            Prediction Accuracy\n                        </Typography>\n                    </Paper>\n                </Grid>\n\n                {/* AI Insights */}\n                <Grid item xs={12} md={6}>\n                    {renderAIInsights()}\n                </Grid>\n\n                {/* Performance Metrics */}\n                <Grid item xs={12} md={6}>\n                    {renderPerformanceMetrics()}\n                </Grid>\n\n                {/* Risk Analysis */}\n                <Grid item xs={12} md={6}>\n                    {renderRiskAnalysis()}\n                </Grid>\n\n                {/* Progress Metrics */}\n                <Grid item xs={12} md={6}>\n                    {renderProgressMetrics()}\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default ProjectAnalytics;\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get(\"/projects\");\n};\n\nconst create = data => {\n    return httpClient.post(\"/projects\", data);\n};\n\nconst get = id => {\n    return httpClient.get(`/projects/${id}`);\n};\n\nconst getProjectById = id => {\n    return httpClient.get(`/projects/id/${id}`);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/projects/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/projects/${id}`);\n};\n\nconst removeAll = () => {\n    return httpClient.delete(`/projects`);\n};\n\nconst findByTitle = title => {\n    return httpClient.get(`/projects?title=${title}`);\n};\n\nconst getProjectProgress = projectId => {\n    return httpClient.get(`/projects/${projectId}/progress`);\n};\n\nconst getBudgetAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/budget-analytics`);\n};\n\nconst getTeamPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/team-performance`);\n};\n\nconst searchProjects = searchParams => {\n    return httpClient.post(`/projects/search`, searchParams);\n};\n\nconst getProjectMessages = projectId => {\n    return httpClient.get(`/projects/${projectId}/messages`);\n};\n\nconst sendProjectMessage = (projectId, message) => {\n    return httpClient.post(`/projects/${projectId}/messages`, message);\n};\n\nconst exportProjectReport = (projectId, format) => {\n    return httpClient.get(`/projects/${projectId}/export/${format}`);\n};\n\nconst scheduleReport = (projectId, scheduleData) => {\n    return httpClient.post(`/projects/${projectId}/schedule-report`, scheduleData);\n};\n\nconst getProjectAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/analytics`);\n};\n\nconst getProjectPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/performance`);\n};\n\nexport default {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByTitle,\n    getProjectProgress,\n    getBudgetAnalytics,\n    getTeamPerformance,\n    searchProjects,\n    getProjectMessages,\n    sendProjectMessage,\n    exportProjectReport,\n    scheduleReport,\n    getProjectAnalytics,\n    getProjectById\n};\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m20.38 8.57-1.23 1.85a8 8 0 0 1-.22 7.58H5.07A8 8 0 0 1 15.58 6.85l1.85-1.23A10 10 0 0 0 3.35 19a2 2 0 0 0 1.72 1h13.85a2 2 0 0 0 1.74-1 10 10 0 0 0-.27-10.44zm-9.79 6.84a2 2 0 0 0 2.83 0l5.66-8.49-8.49 5.66a2 2 0 0 0 0 2.83\"\n}), 'Speed');"],"names":["createSvgIcon","_jsx","d","API_URL","process","REACT_APP_API_URL","getProjectInsights","projectId","axios","get","concat","data","error","recommendations","title","description","impact","confidenceScore","getProjectRisks","overallRisk","riskDistribution","category","value","topRisks","probability","predictProjectSuccess","successProbability","factors","name","weight","analyzeTrends","velocityTrend","current","historical","prediction","qualityMetrics","bugRate","trend","codeQuality","testCoverage","teamHealth","productivity","score","collaboration","satisfaction","ProjectAnalytics","useParams","loading","setLoading","useState","projectData","setProjectData","aiInsights","setAiInsights","performanceMetrics","setPerformanceMetrics","riskAnalysis","setRiskAnalysis","COLORS","useEffect","async","projectStats","ProjectService","getProjectAnalytics","insights","ProjectAIService","metrics","getProjectPerformance","risks","console","fetchData","Box","sx","display","justifyContent","alignItems","height","children","CircularProgress","_jsxs","p","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Paper","textAlign","color","currentVelocity","completionRate","Card","CardContent","Analytics","mr","verticalAlign","map","insight","index","mt","Info","Chip","size","label","Speed","ResponsiveContainer","width","LineChart","timeline","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","ChartTooltip","Legend","Line","type","stroke","Warning","PieChart","Pie","cx","cy","outerRadius","fill","nameKey","entry","Cell","length","risk","Timeline","BarChart","progressMetrics","Bar","getAll","httpClient","id","create","post","update","put","remove","delete","removeAll","findByTitle","getProjectProgress","getBudgetAnalytics","getTeamPerformance","searchProjects","searchParams","getProjectMessages","sendProjectMessage","message","exportProjectReport","format","scheduleReport","scheduleData","getProjectById"],"sourceRoot":""}