{"version":3,"file":"static/js/754.ec53e6ad.chunk.js","mappings":"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","sources":["Epic/AddEpic.jsx","service/EpicService.js","service/IssueService.js","service/ProjectService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n    useTheme,\n    useMediaQuery,\n    Box,\n    Alert,\n    CircularProgress,\n    Chip,\n    Typography,\n    FormHelperText\n} from '@mui/material';\nimport epicService from '../service/EpicService';\nimport projectService from '../service/ProjectService';\nimport issueService from '../service/IssueService';\n\nconst AddEpic = ({ open, onClose, projectId: initialProjectId, epic }) => {\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [projects, setProjects] = useState([]);\n    const [issues, setIssues] = useState([]);\n    const [epicData, setEpicData] = useState({\n        name: '',\n        description: '',\n        project: initialProjectId || '',\n        status: 'to do',\n        priority: 'medium',\n        startDate: '',\n        dueDate: '',\n        color: '#0052CC',\n        labels: [],\n        watchers: [],\n        issues: []\n    });\n\n    // Load projects and issues\n    useEffect(() => {\n        const loadData = async () => {\n            try {\n                const [projectsResponse, issuesResponse] = await Promise.all([\n                    projectService.getAll(),\n                    issueService.getAll()\n                ]);\n                setProjects(projectsResponse.data);\n                setIssues(issuesResponse.data);\n            } catch (err) {\n                console.error('Error loading data:', err);\n                setError('Failed to load required data');\n            }\n        };\n        loadData();\n    }, []);\n\n    // Set epic data when editing\n    useEffect(() => {\n        if (epic) {\n            setEpicData({\n                name: epic.name || '',\n                description: epic.description || '',\n                project: epic.project || initialProjectId || '',\n                status: epic.status || 'to do',\n                priority: epic.priority || 'medium',\n                startDate: epic.startDate ? new Date(epic.startDate).toISOString().split('T')[0] : '',\n                dueDate: epic.dueDate ? new Date(epic.dueDate).toISOString().split('T')[0] : '',\n                color: epic.color || '#0052CC',\n                labels: epic.labels || [],\n                watchers: epic.watchers || [],\n                issues: epic.issues || []\n            });\n        } else {\n            setEpicData({\n                name: '',\n                description: '',\n                project: initialProjectId || '',\n                status: 'to do',\n                priority: 'medium',\n                startDate: '',\n                dueDate: '',\n                color: '#0052CC',\n                labels: [],\n                watchers: [],\n                issues: []\n            });\n        }\n    }, [epic, initialProjectId]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        console.log('Handle change:', name, value);\n\n        if (name === 'issues') {\n            console.log('Issues selected:', value);\n            setEpicData(prev => {\n                const newData = {\n                    ...prev,\n                    issues: Array.isArray(value) ? value : []\n                };\n                console.log('New epic data after issues change:', newData);\n                return newData;\n            });\n        } else {\n            const newValue = name === 'project' ? (value || '') : (value === '' ? undefined : value);\n            setEpicData(prev => ({\n                ...prev,\n                [name]: newValue\n            }));\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setError('');\n        setSuccess('');\n\n        // Get userId from localStorage\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n            setError('User not authenticated');\n            setLoading(false);\n            return;\n        }\n\n        // Validate required fields\n        if (!epicData.name?.trim()) {\n            setError('Epic name is required');\n            setLoading(false);\n            return;\n        }\n\n        try {\n            // Prepare data for submission\n            const data = {\n                name: epicData.name.trim(),\n                description: epicData.description?.trim(),\n                status: epicData.status?.toLowerCase() || 'to do',\n                priority: epicData.priority?.toLowerCase() || 'medium',\n                owner: userId,\n                project: epicData.project || initialProjectId || null,\n                startDate: epicData.startDate || undefined,\n                dueDate: epicData.dueDate || undefined,\n                color: epicData.color || '#0052CC',\n                labels: epicData.labels?.length > 0 ? epicData.labels : undefined,\n                watchers: epicData.watchers?.length > 0 ? epicData.watchers : undefined,\n                issues: epicData.issues?.length > 0 ? epicData.issues : undefined\n            };\n\n            // Remove undefined values\n            Object.keys(data).forEach(key => {\n                if (data[key] === undefined) {\n                    delete data[key];\n                }\n            });\n\n            console.log('Submitting epic data:', data);\n\n            let response;\n            if (epic) {\n                response = await epicService.update(epic._id, data);\n                console.log('Epic updated:', response.data);\n                setSuccess('Epic updated successfully!');\n            } else {\n                response = await epicService.create(data);\n                console.log('Epic created:', response.data);\n                setSuccess('Epic created successfully!');\n            }\n\n            // Only update issues if we have them and we're creating a new epic\n            if (!epic && response.data?._id && epicData.issues?.length > 0) {\n                try {\n                    await Promise.all(epicData.issues.map(issueId =>\n                        issueService.update(issueId, { epic: response.data._id })\n                    ));\n                    console.log('Issues updated successfully');\n                } catch (issueError) {\n                    console.error('Error updating issues:', issueError);\n                    // Don't fail the whole operation if issue update fails\n                }\n            }\n\n            setTimeout(() => {\n                setLoading(false);\n                onClose(true);\n            }, 1000);\n        } catch (err) {\n            console.error('Error submitting epic:', err);\n            const errorMessage = err.response?.data?.message || 'Failed to save epic. Please check all required fields.';\n            setError(errorMessage);\n            setLoading(false);\n        }\n    };\n\n    const handleClose = () => {\n        setEpicData({\n            name: '',\n            description: '',\n            project: initialProjectId || '',\n            status: 'to do',\n            priority: 'medium',\n            startDate: '',\n            dueDate: '',\n            color: '#0052CC',\n            labels: [],\n            watchers: [],\n            issues: []\n        });\n        setError('');\n        setSuccess('');\n        onClose(false);\n    };\n\n    const getStatusColor = (status) => {\n        switch (status) {\n            case 'to do':\n                return { bg: '#E3F2FD', color: '#1976D2' };\n            case 'in progress':\n                return { bg: '#F7DC6F', color: '#FFD700' };\n            case 'done':\n                return { bg: '#C6F4D6', color: '#2E865F' };\n            default:\n                return { bg: '#E3F2FD', color: '#1976D2' };\n        }\n    };\n\n    const getPriorityColor = (priority) => {\n        switch (priority) {\n            case 'highest':\n                return '#FF0000';\n            case 'high':\n                return '#FFA07A';\n            case 'medium':\n                return '#FFFF00';\n            case 'low':\n                return '#32CD32';\n            case 'lowest':\n                return '#008000';\n            default:\n                return '#FFFF00';\n        }\n    };\n\n    return (\n        <Dialog \n            open={open} \n            onClose={handleClose}\n            fullScreen={isMobile}\n            maxWidth=\"sm\"\n            fullWidth\n        >\n            <DialogTitle>{epic ? 'Edit Epic' : 'Create New Epic'}</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n                    {success && (\n                        <Alert severity=\"success\" sx={{ mb: 2 }}>\n                            {success}\n                        </Alert>\n                    )}\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"key\"\n                                label=\"Epic Key (Optional)\"\n                                value={epicData.key}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                helperText=\"Unique identifier for project-linked epics\"\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"name\"\n                                label=\"Epic Name\"\n                                value={epicData.name}\n                                onChange={handleChange}\n                                fullWidth\n                                required\n                                size={isMobile ? \"small\" : \"medium\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                name=\"description\"\n                                label=\"Description\"\n                                value={epicData.description}\n                                onChange={handleChange}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                size={isMobile ? \"small\" : \"medium\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel>Project (Optional)</InputLabel>\n                                <Select\n                                    name=\"project\"\n                                    value={epicData.project || ''}\n                                    onChange={handleChange}\n                                    label=\"Project (Optional)\"\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {projects.map((project) => (\n                                        <MenuItem key={project._id} value={project._id}>\n                                            {project.projectName}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel>Status</InputLabel>\n                                <Select\n                                    name=\"status\"\n                                    value={epicData.status}\n                                    onChange={handleChange}\n                                    label=\"Status\"\n                                >\n                                    <MenuItem value=\"to do\">To Do</MenuItem>\n                                    <MenuItem value=\"in progress\">In Progress</MenuItem>\n                                    <MenuItem value=\"done\">Done</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel>Priority</InputLabel>\n                                <Select\n                                    name=\"priority\"\n                                    value={epicData.priority}\n                                    onChange={handleChange}\n                                    label=\"Priority\"\n                                >\n                                    <MenuItem value=\"highest\">Highest</MenuItem>\n                                    <MenuItem value=\"high\">High</MenuItem>\n                                    <MenuItem value=\"medium\">Medium</MenuItem>\n                                    <MenuItem value=\"low\">Low</MenuItem>\n                                    <MenuItem value=\"lowest\">Lowest</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"color\"\n                                label=\"Epic Color\"\n                                type=\"color\"\n                                value={epicData.color}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                InputLabelProps={{ shrink: true }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"startDate\"\n                                label=\"Start Date\"\n                                type=\"date\"\n                                value={epicData.startDate}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                InputLabelProps={{ shrink: true }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"dueDate\"\n                                label=\"Due Date\"\n                                type=\"date\"\n                                value={epicData.dueDate}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                InputLabelProps={{ shrink: true }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel id=\"issues-label\">Issues</InputLabel>\n                                <Select\n                                    labelId=\"issues-label\"\n                                    name=\"issues\"\n                                    multiple\n                                    value={epicData.issues || []}\n                                    onChange={handleChange}\n                                    label=\"Issues\"\n                                    renderValue={(selected) => (\n                                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                                            {selected.map((value) => {\n                                                const issue = issues.find(i => i._id === value);\n                                                return (\n                                                    <Chip\n                                                        key={value}\n                                                        label={issue ? `${issue.key} - ${issue.title}` : value}\n                                                        sx={{\n                                                            backgroundColor: issue ? getStatusColor(issue.status).bg : '#E3F2FD',\n                                                            color: issue ? getStatusColor(issue.status).color : '#1976D2',\n                                                            fontWeight: 500\n                                                        }}\n                                                    />\n                                                );\n                                            })}\n                                        </Box>\n                                    )}\n                                    MenuProps={{\n                                        PaperProps: {\n                                            style: {\n                                                maxHeight: 300\n                                            }\n                                        }\n                                    }}\n                                >\n                                    {issues && issues.length > 0 ? (\n                                        issues.map((issue) => (\n                                            <MenuItem \n                                                key={issue._id} \n                                                value={issue._id}\n                                                sx={{\n                                                    display: 'flex',\n                                                    justifyContent: 'space-between',\n                                                    gap: 1,\n                                                    py: 1\n                                                }}\n                                            >\n                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                                    <Typography \n                                                        variant=\"body2\" \n                                                        sx={{ \n                                                            fontWeight: 600,\n                                                            color: 'primary.main',\n                                                            minWidth: '80px'\n                                                        }}\n                                                    >\n                                                        {issue.key}\n                                                    </Typography>\n                                                    <Typography variant=\"body2\">\n                                                        {issue.title}\n                                                    </Typography>\n                                                </Box>\n                                                <Box sx={{ display: 'flex', gap: 1, flexShrink: 0 }}>\n                                                    <Chip\n                                                        label={issue.status}\n                                                        size=\"small\"\n                                                        sx={{\n                                                            backgroundColor: getStatusColor(issue.status).bg,\n                                                            color: getStatusColor(issue.status).color,\n                                                            height: 24\n                                                        }}\n                                                    />\n                                                    <Chip\n                                                        label={issue.priority}\n                                                        size=\"small\"\n                                                        sx={{\n                                                            backgroundColor: 'white',\n                                                            color: getPriorityColor(issue.priority),\n                                                            border: 1,\n                                                            borderColor: getPriorityColor(issue.priority),\n                                                            height: 24\n                                                        }}\n                                                    />\n                                                </Box>\n                                            </MenuItem>\n                                        ))\n                                    ) : (\n                                        <MenuItem disabled>No issues available</MenuItem>\n                                    )}\n                                </Select>\n                                {error && error.includes('issues') && (\n                                    <FormHelperText error>{error}</FormHelperText>\n                                )}\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions sx={{ p: theme.spacing(2) }}>\n                    <Button \n                        onClick={handleClose}\n                        size={isMobile ? \"small\" : \"medium\"}\n                        fullWidth={isMobile}\n                    >\n                        Cancel\n                    </Button>\n                    <Button \n                        type=\"submit\" \n                        variant=\"contained\"\n                        size={isMobile ? \"small\" : \"medium\"}\n                        fullWidth={isMobile}\n                        disabled={loading}\n                        sx={{\n                            backgroundColor: '#0052CC',\n                            '&:hover': { backgroundColor: '#0747A6' },\n                        }}\n                    >\n                        {loading ? <CircularProgress size={24} /> : epic ? 'Update Epic' : 'Create Epic'}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};\n\nexport default AddEpic;","import httpClient from '../http-common';\n\nconst getAll = (filters = {}) => {\n    return httpClient.get(\"/epics\", { params: filters });\n};\n\nconst getById = (epicId) => {\n    return httpClient.get(`/epics/${epicId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/epics/project/${projectId}`);\n};\n\nconst transformEpicData = (data) => {\n    const transformed = {\n        name: data.name?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original epic data:', data);\n    console.log('Transformed epic data:', transformed);\n    return transformed;\n};\n\nconst create = (epicData) => {\n    const transformedData = transformEpicData(epicData);\n    return httpClient.post(\"/epics\", transformedData);\n};\n\nconst update = (epicId, epicData) => {\n    const transformedData = transformEpicData(epicData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst remove = (epicId) => {\n    return httpClient.delete(`/epics/${epicId}`);\n};\n\nconst updateProgress = (epicId) => {\n    return httpClient.post(`/epics/${epicId}/progress`);\n};\n\nconst addWatcher = (epicId, userId) => {\n    return httpClient.post(`/epics/${epicId}/watchers`, { userId });\n};\n\nconst removeWatcher = (epicId, userId) => {\n    return httpClient.delete(`/epics/${epicId}/watchers`, { \n        data: { userId } \n    });\n};\n\nconst updateEpicStatus = (epicId, statusData) => {\n    const transformedData = transformEpicData(statusData);\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst EpicService = {\n    getAll,\n    getById,\n    getByProject,\n    create,\n    update,\n    remove,\n    updateProgress,\n    addWatcher,\n    removeWatcher,\n    updateEpicStatus\n};\n\nexport default EpicService;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/issues');\n};\n\nconst getById = (issueId) => {\n    return httpClient.get(`/issues/${issueId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/issues/project/${projectId}`);\n};\n\nconst getByEpic = (epicId) => {\n    return httpClient.get(`/issues/epic/${epicId}`);\n};\n\nconst getBySprint = (sprintId) => {\n    return httpClient.get(`/issues/sprint/${sprintId}`);\n};\n\nconst create = (issueData) => {\n    return httpClient.post('/issues', issueData);\n};\n\nconst transformIssueData = (data) => {\n    const transformed = {\n        title: data.title?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        assignee: data.assignee || null,\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original issue data:', data);\n    console.log('Transformed issue data:', transformed);\n    return transformed;\n};\n\nconst update = (issueId, issueData) => {\n    const transformedData = transformIssueData(issueData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/issues/${issueId}`, transformedData);\n};\n\nconst remove = (issueId) => {\n    return httpClient.delete(`/issues/${issueId}`);\n};\n\nconst addComment = (issueId, commentData) => {\n    return httpClient.post(`/issues/${issueId}/comments`, commentData);\n};\n\nconst addAttachment = (issueId, file) => {\n    const formData = new FormData();\n    formData.append('attachment', file);\n    return httpClient.post(`/issues/${issueId}/attachments`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n};\n\nconst updateTimeTracking = (issueId, timeData) => {\n    return httpClient.post(`/issues/${issueId}/timetracking`, timeData);\n};\n\nexport default {\n    getAll,\n    getById,\n    getByProject,\n    getByEpic,\n    getBySprint,\n    create,\n    update,\n    remove,\n    addComment,\n    addAttachment,\n    updateTimeTracking\n};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get(\"/projects\");\n};\n\nconst create = data => {\n    return httpClient.post(\"/projects\", data);\n};\n\nconst get = id => {\n    return httpClient.get(`/projects/${id}`);\n};\n\nconst getProjectById = id => {\n    return httpClient.get(`/projects/id/${id}`);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/projects/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/projects/${id}`);\n};\n\nconst removeAll = () => {\n    return httpClient.delete(`/projects`);\n};\n\nconst findByTitle = title => {\n    return httpClient.get(`/projects?title=${title}`);\n};\n\nconst getProjectProgress = projectId => {\n    return httpClient.get(`/projects/${projectId}/progress`);\n};\n\nconst getBudgetAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/budget-analytics`);\n};\n\nconst getTeamPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/team-performance`);\n};\n\nconst searchProjects = searchParams => {\n    return httpClient.post(`/projects/search`, searchParams);\n};\n\nconst getProjectMessages = projectId => {\n    return httpClient.get(`/projects/${projectId}/messages`);\n};\n\nconst sendProjectMessage = (projectId, message) => {\n    return httpClient.post(`/projects/${projectId}/messages`, message);\n};\n\nconst exportProjectReport = (projectId, format) => {\n    return httpClient.get(`/projects/${projectId}/export/${format}`);\n};\n\nconst scheduleReport = (projectId, scheduleData) => {\n    return httpClient.post(`/projects/${projectId}/schedule-report`, scheduleData);\n};\n\nconst getProjectAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/analytics`);\n};\n\nconst getProjectPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/performance`);\n};\nconst findByTeams = teamId => {\n    return httpClient.get(`/projects/teams/${teamId}`);\n    \n    \n};\n\n\nexport default {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByTitle,\n    getProjectProgress,\n    getBudgetAnalytics,\n    getTeamPerformance,\n    searchProjects,\n    getProjectMessages,\n    sendProjectMessage,\n    exportProjectReport,\n    scheduleReport,\n    getProjectAnalytics,\n    getProjectById,\n    findByTeams\n};\n"],"names":["_ref","open","onClose","projectId","initialProjectId","epic","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","loading","setLoading","useState","error","setError","success","setSuccess","projects","setProjects","issues","setIssues","epicData","setEpicData","name","description","project","status","priority","startDate","dueDate","color","labels","watchers","useEffect","async","projectsResponse","issuesResponse","Promise","all","projectService","getAll","issueService","data","err","console","loadData","Date","toISOString","split","handleChange","e","value","target","log","prev","newData","_objectSpread","Array","isArray","newValue","undefined","handleClose","getStatusColor","bg","getPriorityColor","_jsxs","Dialog","fullScreen","maxWidth","fullWidth","children","_jsx","DialogTitle","onSubmit","_epicData$name","preventDefault","userId","localStorage","getItem","trim","_epicData$description","_epicData$status","_epicData$priority","_epicData$labels","_epicData$watchers","_epicData$issues","_response$data","_epicData$issues2","toLowerCase","owner","length","response","Object","keys","forEach","key","epicService","update","_id","create","map","issueId","issueError","setTimeout","_err$response","_err$response$data","errorMessage","message","DialogContent","Alert","severity","sx","mb","Grid","container","spacing","item","xs","sm","TextField","label","onChange","size","helperText","required","multiline","rows","FormControl","InputLabel","Select","MenuItem","projectName","type","InputLabelProps","shrink","id","labelId","multiple","renderValue","selected","Box","display","flexWrap","gap","issue","find","i","Chip","concat","title","backgroundColor","fontWeight","MenuProps","PaperProps","style","maxHeight","justifyContent","py","alignItems","Typography","variant","minWidth","flexShrink","height","border","borderColor","disabled","includes","FormHelperText","DialogActions","p","Button","onClick","CircularProgress","transformEpicData","_data$name","_data$description","_data$status","transformed","filters","arguments","httpClient","get","params","getById","epicId","getByProject","transformedData","post","put","remove","delete","updateProgress","addWatcher","removeWatcher","updateEpicStatus","statusData","getByEpic","getBySprint","sprintId","issueData","_data$title","assignee","transformIssueData","addComment","commentData","addAttachment","file","formData","FormData","append","headers","updateTimeTracking","timeData","removeAll","findByTitle","getProjectProgress","getBudgetAnalytics","getTeamPerformance","searchProjects","searchParams","getProjectMessages","sendProjectMessage","exportProjectReport","format","scheduleReport","scheduleData","getProjectAnalytics","getProjectById","findByTeams","teamId"],"sourceRoot":""}