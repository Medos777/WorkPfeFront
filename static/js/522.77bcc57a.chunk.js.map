{"version":3,"file":"static/js/522.77bcc57a.chunk.js","mappings":"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","sources":["Backlog/AddBacklog.jsx","Epic/AddEpic.jsx","Project/EpicCard.jsx","Project/StatusColumn.jsx","Project/ProjectDetails.jsx","service/BacklogItemService.js","service/BacklogService.js","service/EpicService.js","service/SprintService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    Typography,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Select,\r\n    MenuItem,\r\n    CircularProgress,\r\n    Alert,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    IconButton,\r\n    Chip,\r\n    InputLabel,\r\n    FormControl,\r\n} from '@mui/material';\r\nimport { Delete, Add as AddIcon } from '@mui/icons-material';\r\nimport backlogService from '../service/BacklogService';\r\nimport ProjectService from '../service/ProjectService';\r\nimport backlogItemService from '../service/BacklogItemService';\r\n\r\nconst AddBacklog = ({ open, onClose, onBacklogCreated }) => {\r\n    const [projects, setProjects] = useState([]);\r\n    const [allBacklogItems, setAllBacklogItems] = useState([]);\r\n    const [filteredBacklogItems, setFilteredBacklogItems] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [newBacklog, setNewBacklog] = useState({\r\n        name: '',\r\n        project: '',\r\n        items: [],\r\n    });\r\n    const [openBacklogItemDialog, setOpenBacklogItemDialog] = useState(false);\r\n    const [newBacklogItem, setNewBacklogItem] = useState({\r\n        title: '',\r\n        description: '',\r\n        type: 'story',\r\n        status: 'todo',\r\n        project: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const [projectsResponse, backlogItemsResponse] = await Promise.all([\r\n                    ProjectService.getAll(),\r\n                    backlogItemService.getAll(),\r\n                ]);\r\n                setProjects(projectsResponse.data || []);\r\n                setAllBacklogItems(backlogItemsResponse.data || []);\r\n                setError(null);\r\n            } catch (err) {\r\n                setError('Failed to fetch data');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleProjectChange = (projectId) => {\r\n        setNewBacklog((prev) => ({ ...prev, project: projectId, items: [] }));\r\n        setNewBacklogItem((prev) => ({ ...prev, project: projectId })); // Automatically set project for new backlog items\r\n        const filteredItems = allBacklogItems.filter((item) => item.project === projectId);\r\n        setFilteredBacklogItems(filteredItems);\r\n    };\r\n\r\n    const handleCreate = async () => {\r\n        if (!newBacklog.name || !newBacklog.project) {\r\n            setError('Name and Project are required fields');\r\n            return;\r\n        }\r\n        try {\r\n            await backlogService.create(newBacklog);\r\n            setNewBacklog({ name: '', project: '', items: [] });\r\n            onBacklogCreated();\r\n            onClose();\r\n        } catch (err) {\r\n            setError('Failed to create backlog');\r\n        }\r\n    };\r\n\r\n    const handleAddBacklogItem = async () => {\r\n        if (!newBacklogItem.title || !newBacklogItem.project) {\r\n            setError('Backlog Item title and project are required');\r\n            return;\r\n        }\r\n        try {\r\n            const createdItem = await backlogItemService.create(newBacklogItem);\r\n            setAllBacklogItems((prev) => [...prev, createdItem.data]);\r\n            setFilteredBacklogItems((prev) => [...prev, createdItem.data]);\r\n            setNewBacklog((prev) => ({\r\n                ...prev,\r\n                items: [...prev.items, createdItem.data._id],\r\n            }));\r\n            setNewBacklogItem({\r\n                title: '',\r\n                description: '',\r\n                type: 'story',\r\n                status: 'todo',\r\n                project: newBacklog.project,\r\n            });\r\n            setOpenBacklogItemDialog(false);\r\n        } catch (err) {\r\n            setError('Failed to create backlog item');\r\n        }\r\n    };\r\n\r\n    const handleRemoveItem = (itemId) => {\r\n        setNewBacklog((prev) => ({\r\n            ...prev,\r\n            items: prev.items.filter((id) => id !== itemId),\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n            <DialogTitle>Add New Backlog</DialogTitle>\r\n            <DialogContent>\r\n                {error && <Alert severity=\"error\">{error}</Alert>}\r\n                <TextField\r\n                    label=\"Backlog Name\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    value={newBacklog.name}\r\n                    onChange={(e) => setNewBacklog({ ...newBacklog, name: e.target.value })}\r\n                />\r\n                <FormControl fullWidth margin=\"normal\">\r\n                    <InputLabel>Project</InputLabel>\r\n                    <Select\r\n                        value={newBacklog.project}\r\n                        onChange={(e) => handleProjectChange(e.target.value)}\r\n                        displayEmpty\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>Select a Project</em>\r\n                        </MenuItem>\r\n                        {projects.map((project) => (\r\n                            <MenuItem key={project._id} value={project._id}>\r\n                                {project.projectName}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ mt: 2 }}>\r\n                    <Typography variant=\"h6\">Backlog Items</Typography>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<AddIcon />}\r\n                        onClick={() => setOpenBacklogItemDialog(true)}\r\n                    >\r\n                        Add Backlog Item\r\n                    </Button>\r\n                </Box>\r\n                <FormControl fullWidth margin=\"normal\">\r\n                    <InputLabel>Select Items</InputLabel>\r\n                    <Select\r\n                        multiple\r\n                        value={newBacklog.items}\r\n                        onChange={(e) => setNewBacklog({ ...newBacklog, items: e.target.value })}\r\n                        renderValue={(selected) => (\r\n                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                {selected.map((value) => (\r\n                                    <Chip\r\n                                        key={value}\r\n                                        label={\r\n                                            filteredBacklogItems.find((item) => item._id === value)?.title || ''\r\n                                        }\r\n                                    />\r\n                                ))}\r\n                            </Box>\r\n                        )}\r\n                    >\r\n                        {filteredBacklogItems.map((item) => (\r\n                            <MenuItem key={item._id} value={item._id}>\r\n                                {item.title}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <List dense>\r\n                    {newBacklog.items.map((itemId) => (\r\n                        <ListItem\r\n                            key={itemId}\r\n                            secondaryAction={\r\n                                <IconButton edge=\"end\" onClick={() => handleRemoveItem(itemId)}>\r\n                                    <Delete />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            <ListItemText\r\n                                primary={\r\n                                    filteredBacklogItems.find((item) => item._id === itemId)?.title || ''\r\n                                }\r\n                            />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n                <Button variant=\"contained\" onClick={handleCreate}>\r\n                    Create\r\n                </Button>\r\n            </DialogActions>\r\n\r\n            {/* Dialog for Adding Backlog Item */}\r\n            <Dialog open={openBacklogItemDialog} onClose={() => setOpenBacklogItemDialog(false)} maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle>Add Backlog Item</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        label=\"Title\"\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        value={newBacklogItem.title}\r\n                        onChange={(e) => setNewBacklogItem({ ...newBacklogItem, title: e.target.value })}\r\n                    />\r\n                    <TextField\r\n                        label=\"Description\"\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        value={newBacklogItem.description}\r\n                        onChange={(e) => setNewBacklogItem({ ...newBacklogItem, description: e.target.value })}\r\n                    />\r\n                    <FormControl fullWidth margin=\"normal\">\r\n                        <InputLabel>Type</InputLabel>\r\n                        <Select\r\n                            value={newBacklogItem.type}\r\n                            onChange={(e) => setNewBacklogItem({ ...newBacklogItem, type: e.target.value })}\r\n                        >\r\n                            <MenuItem value=\"story\">Story</MenuItem>\r\n                            <MenuItem value=\"task\">Task</MenuItem>\r\n                            <MenuItem value=\"bug\">Bug</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl fullWidth margin=\"normal\">\r\n                        <InputLabel>Status</InputLabel>\r\n                        <Select\r\n                            value={newBacklogItem.status}\r\n                            onChange={(e) => setNewBacklogItem({ ...newBacklogItem, status: e.target.value })}\r\n                        >\r\n                            <MenuItem value=\"todo\">To Do</MenuItem>\r\n                            <MenuItem value=\"in-progress\">In Progress</MenuItem>\r\n                            <MenuItem value=\"done\">Done</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenBacklogItemDialog(false)}>Cancel</Button>\r\n                    <Button variant=\"contained\" onClick={handleAddBacklogItem}>\r\n                        Add Item\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default AddBacklog;\r\n","import React, { useState, useEffect } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n    useTheme,\n    useMediaQuery,\n    Box,\n    Alert,\n    CircularProgress,\n    Chip,\n    Typography,\n    FormHelperText\n} from '@mui/material';\nimport epicService from '../service/EpicService';\nimport projectService from '../service/ProjectService';\nimport issueService from '../service/IssueService';\n\nconst AddEpic = ({ open, onClose, projectId: initialProjectId, epic }) => {\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [projects, setProjects] = useState([]);\n    const [issues, setIssues] = useState([]);\n    const [epicData, setEpicData] = useState({\n        name: '',\n        description: '',\n        project: initialProjectId || '',\n        status: 'to do',\n        priority: 'medium',\n        startDate: '',\n        dueDate: '',\n        color: '#0052CC',\n        labels: [],\n        watchers: [],\n        issues: []\n    });\n\n    // Load projects and issues\n    useEffect(() => {\n        const loadData = async () => {\n            try {\n                const [projectsResponse, issuesResponse] = await Promise.all([\n                    projectService.getAll(),\n                    issueService.getAll()\n                ]);\n                setProjects(projectsResponse.data);\n                setIssues(issuesResponse.data);\n            } catch (err) {\n                console.error('Error loading data:', err);\n                setError('Failed to load required data');\n            }\n        };\n        loadData();\n    }, []);\n\n    // Set epic data when editing\n    useEffect(() => {\n        if (epic) {\n            setEpicData({\n                name: epic.name || '',\n                description: epic.description || '',\n                project: epic.project || initialProjectId || '',\n                status: epic.status || 'to do',\n                priority: epic.priority || 'medium',\n                startDate: epic.startDate ? new Date(epic.startDate).toISOString().split('T')[0] : '',\n                dueDate: epic.dueDate ? new Date(epic.dueDate).toISOString().split('T')[0] : '',\n                color: epic.color || '#0052CC',\n                labels: epic.labels || [],\n                watchers: epic.watchers || [],\n                issues: epic.issues || []\n            });\n        } else {\n            setEpicData({\n                name: '',\n                description: '',\n                project: initialProjectId || '',\n                status: 'to do',\n                priority: 'medium',\n                startDate: '',\n                dueDate: '',\n                color: '#0052CC',\n                labels: [],\n                watchers: [],\n                issues: []\n            });\n        }\n    }, [epic, initialProjectId]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        console.log('Handle change:', name, value);\n\n        if (name === 'issues') {\n            console.log('Issues selected:', value);\n            setEpicData(prev => {\n                const newData = {\n                    ...prev,\n                    issues: Array.isArray(value) ? value : []\n                };\n                console.log('New epic data after issues change:', newData);\n                return newData;\n            });\n        } else {\n            const newValue = name === 'project' ? (value || '') : (value === '' ? undefined : value);\n            setEpicData(prev => ({\n                ...prev,\n                [name]: newValue\n            }));\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setError('');\n        setSuccess('');\n\n        // Get userId from localStorage\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n            setError('User not authenticated');\n            setLoading(false);\n            return;\n        }\n\n        // Validate required fields\n        if (!epicData.name?.trim()) {\n            setError('Epic name is required');\n            setLoading(false);\n            return;\n        }\n\n        try {\n            // Prepare data for submission\n            const data = {\n                name: epicData.name.trim(),\n                description: epicData.description?.trim(),\n                status: epicData.status?.toLowerCase() || 'to do',\n                priority: epicData.priority?.toLowerCase() || 'medium',\n                owner: userId,\n                project: epicData.project || initialProjectId || null,\n                startDate: epicData.startDate || undefined,\n                dueDate: epicData.dueDate || undefined,\n                color: epicData.color || '#0052CC',\n                labels: epicData.labels?.length > 0 ? epicData.labels : undefined,\n                watchers: epicData.watchers?.length > 0 ? epicData.watchers : undefined,\n                issues: epicData.issues?.length > 0 ? epicData.issues : undefined\n            };\n\n            // Remove undefined values\n            Object.keys(data).forEach(key => {\n                if (data[key] === undefined) {\n                    delete data[key];\n                }\n            });\n\n            console.log('Submitting epic data:', data);\n\n            let response;\n            if (epic) {\n                response = await epicService.update(epic._id, data);\n                console.log('Epic updated:', response.data);\n                setSuccess('Epic updated successfully!');\n            } else {\n                response = await epicService.create(data);\n                console.log('Epic created:', response.data);\n                setSuccess('Epic created successfully!');\n            }\n\n            // Only update issues if we have them and we're creating a new epic\n            if (!epic && response.data?._id && epicData.issues?.length > 0) {\n                try {\n                    await Promise.all(epicData.issues.map(issueId =>\n                        issueService.update(issueId, { epic: response.data._id })\n                    ));\n                    console.log('Issues updated successfully');\n                } catch (issueError) {\n                    console.error('Error updating issues:', issueError);\n                    // Don't fail the whole operation if issue update fails\n                }\n            }\n\n            setTimeout(() => {\n                setLoading(false);\n                onClose(true);\n            }, 1000);\n        } catch (err) {\n            console.error('Error submitting epic:', err);\n            const errorMessage = err.response?.data?.message || 'Failed to save epic. Please check all required fields.';\n            setError(errorMessage);\n            setLoading(false);\n        }\n    };\n\n    const handleClose = () => {\n        setEpicData({\n            name: '',\n            description: '',\n            project: initialProjectId || '',\n            status: 'to do',\n            priority: 'medium',\n            startDate: '',\n            dueDate: '',\n            color: '#0052CC',\n            labels: [],\n            watchers: [],\n            issues: []\n        });\n        setError('');\n        setSuccess('');\n        onClose(false);\n    };\n\n    const getStatusColor = (status) => {\n        switch (status) {\n            case 'to do':\n                return { bg: '#E3F2FD', color: '#1976D2' };\n            case 'in progress':\n                return { bg: '#F7DC6F', color: '#FFD700' };\n            case 'done':\n                return { bg: '#C6F4D6', color: '#2E865F' };\n            default:\n                return { bg: '#E3F2FD', color: '#1976D2' };\n        }\n    };\n\n    const getPriorityColor = (priority) => {\n        switch (priority) {\n            case 'highest':\n                return '#FF0000';\n            case 'high':\n                return '#FFA07A';\n            case 'medium':\n                return '#FFFF00';\n            case 'low':\n                return '#32CD32';\n            case 'lowest':\n                return '#008000';\n            default:\n                return '#FFFF00';\n        }\n    };\n\n    return (\n        <Dialog \n            open={open} \n            onClose={handleClose}\n            fullScreen={isMobile}\n            maxWidth=\"sm\"\n            fullWidth\n        >\n            <DialogTitle>{epic ? 'Edit Epic' : 'Create New Epic'}</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n                    {success && (\n                        <Alert severity=\"success\" sx={{ mb: 2 }}>\n                            {success}\n                        </Alert>\n                    )}\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"key\"\n                                label=\"Epic Key (Optional)\"\n                                value={epicData.key}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                helperText=\"Unique identifier for project-linked epics\"\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"name\"\n                                label=\"Epic Name\"\n                                value={epicData.name}\n                                onChange={handleChange}\n                                fullWidth\n                                required\n                                size={isMobile ? \"small\" : \"medium\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                name=\"description\"\n                                label=\"Description\"\n                                value={epicData.description}\n                                onChange={handleChange}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                size={isMobile ? \"small\" : \"medium\"}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel>Project (Optional)</InputLabel>\n                                <Select\n                                    name=\"project\"\n                                    value={epicData.project || ''}\n                                    onChange={handleChange}\n                                    label=\"Project (Optional)\"\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    {projects.map((project) => (\n                                        <MenuItem key={project._id} value={project._id}>\n                                            {project.projectName}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel>Status</InputLabel>\n                                <Select\n                                    name=\"status\"\n                                    value={epicData.status}\n                                    onChange={handleChange}\n                                    label=\"Status\"\n                                >\n                                    <MenuItem value=\"to do\">To Do</MenuItem>\n                                    <MenuItem value=\"in progress\">In Progress</MenuItem>\n                                    <MenuItem value=\"done\">Done</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel>Priority</InputLabel>\n                                <Select\n                                    name=\"priority\"\n                                    value={epicData.priority}\n                                    onChange={handleChange}\n                                    label=\"Priority\"\n                                >\n                                    <MenuItem value=\"highest\">Highest</MenuItem>\n                                    <MenuItem value=\"high\">High</MenuItem>\n                                    <MenuItem value=\"medium\">Medium</MenuItem>\n                                    <MenuItem value=\"low\">Low</MenuItem>\n                                    <MenuItem value=\"lowest\">Lowest</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"color\"\n                                label=\"Epic Color\"\n                                type=\"color\"\n                                value={epicData.color}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                InputLabelProps={{ shrink: true }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"startDate\"\n                                label=\"Start Date\"\n                                type=\"date\"\n                                value={epicData.startDate}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                InputLabelProps={{ shrink: true }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                name=\"dueDate\"\n                                label=\"Due Date\"\n                                type=\"date\"\n                                value={epicData.dueDate}\n                                onChange={handleChange}\n                                fullWidth\n                                size={isMobile ? \"small\" : \"medium\"}\n                                InputLabelProps={{ shrink: true }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FormControl fullWidth size={isMobile ? \"small\" : \"medium\"}>\n                                <InputLabel id=\"issues-label\">Issues</InputLabel>\n                                <Select\n                                    labelId=\"issues-label\"\n                                    name=\"issues\"\n                                    multiple\n                                    value={epicData.issues || []}\n                                    onChange={handleChange}\n                                    label=\"Issues\"\n                                    renderValue={(selected) => (\n                                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                                            {selected.map((value) => {\n                                                const issue = issues.find(i => i._id === value);\n                                                return (\n                                                    <Chip\n                                                        key={value}\n                                                        label={issue ? `${issue.key} - ${issue.title}` : value}\n                                                        sx={{\n                                                            backgroundColor: issue ? getStatusColor(issue.status).bg : '#E3F2FD',\n                                                            color: issue ? getStatusColor(issue.status).color : '#1976D2',\n                                                            fontWeight: 500\n                                                        }}\n                                                    />\n                                                );\n                                            })}\n                                        </Box>\n                                    )}\n                                    MenuProps={{\n                                        PaperProps: {\n                                            style: {\n                                                maxHeight: 300\n                                            }\n                                        }\n                                    }}\n                                >\n                                    {issues && issues.length > 0 ? (\n                                        issues.map((issue) => (\n                                            <MenuItem \n                                                key={issue._id} \n                                                value={issue._id}\n                                                sx={{\n                                                    display: 'flex',\n                                                    justifyContent: 'space-between',\n                                                    gap: 1,\n                                                    py: 1\n                                                }}\n                                            >\n                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                                    <Typography \n                                                        variant=\"body2\" \n                                                        sx={{ \n                                                            fontWeight: 600,\n                                                            color: 'primary.main',\n                                                            minWidth: '80px'\n                                                        }}\n                                                    >\n                                                        {issue.key}\n                                                    </Typography>\n                                                    <Typography variant=\"body2\">\n                                                        {issue.title}\n                                                    </Typography>\n                                                </Box>\n                                                <Box sx={{ display: 'flex', gap: 1, flexShrink: 0 }}>\n                                                    <Chip\n                                                        label={issue.status}\n                                                        size=\"small\"\n                                                        sx={{\n                                                            backgroundColor: getStatusColor(issue.status).bg,\n                                                            color: getStatusColor(issue.status).color,\n                                                            height: 24\n                                                        }}\n                                                    />\n                                                    <Chip\n                                                        label={issue.priority}\n                                                        size=\"small\"\n                                                        sx={{\n                                                            backgroundColor: 'white',\n                                                            color: getPriorityColor(issue.priority),\n                                                            border: 1,\n                                                            borderColor: getPriorityColor(issue.priority),\n                                                            height: 24\n                                                        }}\n                                                    />\n                                                </Box>\n                                            </MenuItem>\n                                        ))\n                                    ) : (\n                                        <MenuItem disabled>No issues available</MenuItem>\n                                    )}\n                                </Select>\n                                {error && error.includes('issues') && (\n                                    <FormHelperText error>{error}</FormHelperText>\n                                )}\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions sx={{ p: theme.spacing(2) }}>\n                    <Button \n                        onClick={handleClose}\n                        size={isMobile ? \"small\" : \"medium\"}\n                        fullWidth={isMobile}\n                    >\n                        Cancel\n                    </Button>\n                    <Button \n                        type=\"submit\" \n                        variant=\"contained\"\n                        size={isMobile ? \"small\" : \"medium\"}\n                        fullWidth={isMobile}\n                        disabled={loading}\n                        sx={{\n                            backgroundColor: '#0052CC',\n                            '&:hover': { backgroundColor: '#0747A6' },\n                        }}\n                    >\n                        {loading ? <CircularProgress size={24} /> : epic ? 'Update Epic' : 'Create Epic'}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};\n\nexport default AddEpic;","import React from 'react';\nimport { useDrag } from 'react-dnd';\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    Typography,\n    Box,\n    Chip,\n    IconButton,\n    Tooltip\n} from '@mui/material';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst EpicCard = ({ epic, onEpicClick, onEditClick, onDeleteClick }) => {\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: 'epic',\n        item: { id: epic._id, status: epic.status },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    }));\n\n    return (\n        <Card \n            ref={drag}\n            sx={{ \n                opacity: isDragging ? 0.5 : 1,\n                cursor: 'move',\n                mb: 2,\n                borderRadius: 2,\n                boxShadow: '0 1px 3px rgba(0,0,0,0.12)',\n                '&:hover': {\n                    boxShadow: '0 4px 6px rgba(0,0,0,0.15)'\n                }\n            }}\n        >\n            <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                    {epic.name}\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>\n                    <Chip \n                        label={epic.status || 'To Do'} \n                        size=\"small\"\n                        sx={{ \n                            bgcolor: \n                                epic.status === 'done' ? '#10b981' :\n                                epic.status === 'in progress' ? '#3b82f6' : '#e2e8f0',\n                            color: epic.status === 'to do' ? '#1e293b' : 'white'\n                        }}\n                    />\n                    <Chip \n                        label={epic.priority || 'Medium'} \n                        size=\"small\"\n                        sx={{ bgcolor: '#e2e8f0', color: '#1e293b' }}\n                    />\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                    {epic.description || 'No description'}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%' }}>\n                    <Tooltip title=\"View Details\">\n                        <IconButton \n                            size=\"small\" \n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onEpicClick(epic);\n                            }}\n                            sx={{ color: '#1e40af' }}\n                        >\n                            <VisibilityIcon fontSize=\"small\" />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Edit Epic\">\n                        <IconButton \n                            size=\"small\" \n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onEditClick(epic);\n                            }}\n                            sx={{ color: '#64748b' }}\n                        >\n                            <EditIcon fontSize=\"small\" />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete Epic\">\n                        <IconButton \n                            size=\"small\" \n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onDeleteClick(epic._id);\n                            }}\n                            sx={{ color: '#ef4444' }}\n                        >\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </Tooltip>\n                </Box>\n            </CardActions>\n        </Card>\n    );\n};\n\nexport default EpicCard;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { Paper, Typography, Box } from '@mui/material';\nimport EpicCard from './EpicCard';\n\nconst StatusColumn = ({ status, title, epics, onDrop, onEpicClick, onEditClick, onDeleteClick }) => {\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: 'epic',\n        drop: (item) => onDrop(item.id, status),\n        collect: (monitor) => ({\n            isOver: monitor.isOver()\n        })\n    }));\n\n    return (\n        <Paper\n            ref={drop}\n            sx={{\n                minWidth: 300,\n                bgcolor: isOver ? '#f1f5f9' : '#fff',\n                p: 2,\n                borderRadius: 2,\n                border: '1px solid #e2e8f0',\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100%'\n            }}\n        >\n            <Typography\n                variant=\"h6\"\n                sx={{\n                    mb: 2,\n                    color: '#1e293b',\n                    fontWeight: 600,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                {title}\n                <Typography\n                    component=\"span\"\n                    sx={{\n                        ml: 1,\n                        fontSize: '0.875rem',\n                        color: '#64748b',\n                        bgcolor: '#f1f5f9',\n                        px: 1.5,\n                        py: 0.5,\n                        borderRadius: '9999px'\n                    }}\n                >\n                    {epics?.length || 0}\n                </Typography>\n            </Typography>\n            <Box sx={{ flexGrow: 1, overflowY: 'auto' }}>\n                {epics?.map((epic) => (\n                    <EpicCard\n                        key={epic._id}\n                        epic={epic}\n                        onEpicClick={onEpicClick}\n                        onEditClick={onEditClick}\n                        onDeleteClick={onDeleteClick}\n                    />\n                ))}\n            </Box>\n        </Paper>\n    );\n};\n\nexport default StatusColumn;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams, Link as RouterLink } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport axios from 'axios';\nimport {\n    Box,\n    Typography,\n    Button,\n    IconButton,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Grid,\n    Card,\n    CardContent,\n    CardActions,\n    Chip,\n    Avatar,\n    AppBar,\n    Toolbar,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Divider,\n    Alert,\n    CircularProgress,\n    LinearProgress,\n    TextField,\n    Breadcrumbs,\n    Link,\n    Tooltip,\n    Select,\n    MenuItem,\n    FormControl,\n    InputLabel\n} from '@mui/material';\n\n// Icons\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport ListAltIcon from '@mui/icons-material/ListAlt';\nimport AssignmentIcon from '@mui/icons-material/Assignment';\nimport SpeedIcon from '@mui/icons-material/Speed';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport SaveAltIcon from '@mui/icons-material/SaveAlt';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport HomeIcon from '@mui/icons-material/Home';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport GroupIcon from '@mui/icons-material/Group';\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport ViewListIcon from '@mui/icons-material/ViewList';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport AssignmentTurnedInIcon from '@mui/icons-material/AssignmentTurnedIn';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport BugIcon from '@mui/icons-material/BugReport';\n\nimport ProjectService from '../service/ProjectService';\nimport SprintService from '../service/SprintService';\nimport EpicService from '../service/EpicService';\nimport BacklogService from '../service/BacklogService';\nimport BacklogItemService from '../service/BacklogItemService';\nimport AddEpic from '../Epic/AddEpic';\nimport AddBacklog from '../Backlog/AddBacklog';\nimport StatusColumn from './StatusColumn';\nimport EpicCard from './EpicCard';\nimport IssueList from '../Issue/IssueList';\n\nconst ItemTypes = {\n    EPIC: 'epic'\n};\n\nconst ProjectDetails = () => {\n    const navigate = useNavigate();\n    const { id } = useParams();\n    const [project, setProject] = useState(null);\n    const [epics, setEpics] = useState([]);\n    const [backlogs, setBacklogs] = useState([]);\n    const [backlogItems, setBacklogItems] = useState([]);\n    const [sprints, setSprints] = useState([]);\n    const [issues, setIssues] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedType, setSelectedType] = useState('epics');\n    const [selectedItem, setSelectedItem] = useState(null);\n    const [selectedItemType, setSelectedItemType] = useState(null);\n    const [openAddBacklogDialog, setOpenAddBacklogDialog] = useState(false);\n    const [editBacklogDialogOpen, setEditBacklogDialogOpen] = useState(false);\n    const [editedBacklogName, setEditedBacklogName] = useState('');\n    const [editedBacklogId, setEditedBacklogId] = useState(null);\n    const [projectType, setProjectType] = useState(localStorage.getItem('projectType'));\n    const [projectKey, setProjectKey] = useState('');\n    const [openAddEpicDialog, setOpenAddEpicDialog] = useState(false);\n    const [epicViewMode, setEpicViewMode] = useState('cards');\n    const [epicsByStatus, setEpicsByStatus] = useState({\n        'to do': [],\n        'in progress': [],\n        'done': []\n    });\n    const [selectedEpic, setSelectedEpic] = useState(null);\n    const [epicDetailsOpen, setEpicDetailsOpen] = useState(false);\n    const [editEpicDialogOpen, setEditEpicDialogOpen] = useState(false);\n    const [editedEpic, setEditedEpic] = useState(null);\n    const [addIssueDialogOpen, setAddIssueDialogOpen] = useState(false);\n\n    // Constants for status values\n    const STATUS = {\n        TODO: 'to do',\n        IN_PROGRESS: 'in progress',\n        DONE: 'done'\n    };\n\n    const DISPLAY_STATUS = {\n        'to do': 'To Do',\n        'in progress': 'In Progress',\n        'done': 'Done'\n    };\n\n    const getItemIcon = (item) => {\n        switch (item) {\n            case 'epics':\n                return <AssignmentIcon />;\n            case 'backlog':\n                return <ViewModuleIcon />;\n            case 'sprints':\n                return <BugReportIcon />;\n            case 'issues':\n                return <BugIcon />;\n            case 'backlogItems':\n                return <ListAltIcon />;\n            default:\n                return null;\n        }\n    };\n\n    const renderSidebar = () => {\n        // Filter sidebar items based on project type\n        const sidebarItems = projectType === 'scrum' \n            ? [\n                { id: 'backlog', icon: <ViewModuleIcon />, label: 'Backlog' },\n                { id: 'backlogItems', icon: <ListAltIcon />, label: 'Backlog Items' },\n                { id: 'sprints', icon: <BugReportIcon />, label: 'Sprints' }\n            ]\n            : [\n                { id: 'epics', icon: <AssignmentIcon />, label: 'Epics' },\n                { id: 'issues', icon: <BugIcon />, label: 'Issues' }\n            ];\n\n        return (\n            <Box sx={{ \n                width: '240px',\n                backgroundColor: '#fff',\n                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n                display: 'flex',\n                flexDirection: 'column',\n                height: '100vh',\n                position: 'fixed',\n                left: 0,\n                top: 64,\n                color: '#1e40af',\n                zIndex: 100,\n                transition: 'all 0.3s ease'\n            }}>\n                {/* Project Key Avatar */}\n                <Box sx={{ \n                    display: 'flex', \n                    alignItems: 'center',\n                    px: 3,\n                    py: 3,\n                    borderBottom: '1px solid rgba(0, 0, 0, 0.06)',\n                    mb: 1,\n                    background: 'linear-gradient(to right, rgba(30, 64, 175, 0.05), transparent)'\n                }}>\n                    <Avatar \n                        sx={{ \n                            bgcolor: '#1e40af',\n                            width: 40,\n                            height: 40,\n                            fontSize: '1.2rem',\n                            fontWeight: 600,\n                            mr: 2,\n                            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                            border: '2px solid #fff'\n                        }}\n                    >\n                        {projectKey}\n                    </Avatar>\n                    <Typography variant=\"h6\" sx={{ \n                        fontWeight: 600,\n                        color: '#1e293b',\n                        fontSize: '1.1rem'\n                    }}>\n                        {project?.name}\n                    </Typography>\n                </Box>\n\n                {/* Navigation Items */}\n                <Box sx={{ flex: 1, py: 2 }}>\n                    {sidebarItems.map((item) => (\n                        <Button\n                            key={item.id}\n                            startIcon={item.icon}\n                            onClick={() => handleItemTypeSelect(item.id)}\n                            sx={{\n                                justifyContent: 'flex-start',\n                                px: 3,\n                                py: 1.5,\n                                width: '100%',\n                                color: selectedType === item.id ? '#fff' : '#64748b',\n                                backgroundColor: selectedType === item.id ? '#1e40af' : 'transparent',\n                                borderRadius: 0,\n                                position: 'relative',\n                                transition: 'all 0.2s ease',\n                                '&:hover': {\n                                    backgroundColor: selectedType === item.id ? '#1e40af' : 'rgba(30, 64, 175, 0.08)',\n                                    color: selectedType === item.id ? '#fff' : '#1e40af',\n                                    '&::before': {\n                                        width: '4px'\n                                    }\n                                },\n                                '&::before': {\n                                    content: '\"\"',\n                                    position: 'absolute',\n                                    left: 0,\n                                    top: 0,\n                                    width: selectedType === item.id ? '4px' : '0px',\n                                    height: '100%',\n                                    backgroundColor: '#1e40af',\n                                    transition: 'width 0.2s ease'\n                                },\n                                textTransform: 'capitalize',\n                                letterSpacing: '0.5px',\n                                fontSize: '0.95rem',\n                                fontWeight: selectedType === item.id ? 600 : 500\n                            }}\n                        >\n                            {item.label}\n                        </Button>\n                    ))}\n                </Box>\n            </Box>\n        );\n    };\n\n    const handleItemTypeSelect = (type) => {\n        setSelectedType(type);\n        setSelectedItem(null);\n    };\n\n    useEffect(() => {\n        const fetchProjectData = async () => {\n            setLoading(true);\n            try {\n                const projectResponse = await ProjectService.getProjectById(id);\n                setProject(projectResponse.data);\n                setProjectKey(projectResponse.data.key);\n\n                const backlogResponse = await BacklogService.getByProject(id);\n                setBacklogs(backlogResponse.data);\n\n                const epicResponse = await EpicService.getByProject(id);\n                setEpics(epicResponse.data);\n\n                const sprintResponse = await SprintService.getByProject(id);\n                setSprints(sprintResponse.data);\n            } catch (err) {\n                console.error('Error fetching project data:', err);\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchProjectData();\n    }, [id]);\n\n    useEffect(() => {\n        const handleStorageChange = () => {\n            const newProjectType = localStorage.getItem('projectType');\n            setProjectType(newProjectType);\n        };\n\n        window.addEventListener('storage', handleStorageChange);\n        return () => window.removeEventListener('storage', handleStorageChange);\n    }, []);\n\n    useEffect(() => {\n        if (epics.length > 0) {\n            const grouped = {\n                'to do': epics.filter(epic => epic.status === STATUS.TODO),\n                'in progress': epics.filter(epic => epic.status === STATUS.IN_PROGRESS),\n                'done': epics.filter(epic => epic.status === STATUS.DONE)\n            };\n            setEpicsByStatus(grouped);\n        }\n    }, [epics]);\n\n    const getStatusDisplay = (status) => {\n        return DISPLAY_STATUS[status] || DISPLAY_STATUS['to do'];\n    };\n\n    const handleStatusChange = async (epicId, newStatus) => {\n        try {\n            const epicToUpdate = epics.find(e => e._id === epicId);\n            if (!epicToUpdate) return;\n\n            // Update locally first for immediate feedback\n            const updatedEpic = { ...epicToUpdate, status: newStatus };\n            const updatedEpics = epics.map(e => \n                e._id === epicId ? updatedEpic : e\n            );\n            setEpics(updatedEpics);\n\n            // Update epicsByStatus\n            const newEpicsByStatus = {\n                'to do': updatedEpics.filter(e => e.status === STATUS.TODO),\n                'in progress': updatedEpics.filter(e => e.status === STATUS.IN_PROGRESS),\n                'done': updatedEpics.filter(e => e.status === STATUS.DONE)\n            };\n            setEpicsByStatus(newEpicsByStatus);\n\n            // Update in backend\n            await EpicService.update(epicId, {\n                ...epicToUpdate,\n                status: newStatus\n            });\n\n        } catch (error) {\n            console.error('Error updating epic status:', error);\n            // Revert changes if update fails\n            const originalEpics = [...epics];\n            setEpics(originalEpics);\n            setError('Failed to update epic status');\n        }\n    };\n\n    const handleEpicClick = (epic) => {\n        setSelectedEpic(epic);\n        setEpicDetailsOpen(true);\n    };\n\n    const handleBacklogClick = (backlog) => {\n        setSelectedItem(backlog);\n        setSelectedType('backlog');\n    };\n\n    const handleSectionClick = (type) => {\n        setSelectedType(type);\n        setSelectedItem(null);\n    };\n\n    const handleEpicViewChange = (event, newView) => {\n        if (newView !== null) {\n            setEpicViewMode(newView);\n        }\n    };\n\n    const handleDrop = async (epicId, newStatus) => {\n        try {\n            const epicToUpdate = epics.find(e => e._id === epicId);\n            if (!epicToUpdate) return;\n\n            // Update locally first for immediate feedback\n            const updatedEpic = { ...epicToUpdate, status: newStatus };\n            const updatedEpics = epics.map(e => \n                e._id === epicId ? updatedEpic : e\n            );\n            setEpics(updatedEpics);\n\n            // Update epicsByStatus\n            const newEpicsByStatus = {\n                'to do': updatedEpics.filter(e => e.status === STATUS.TODO),\n                'in progress': updatedEpics.filter(e => e.status === STATUS.IN_PROGRESS),\n                'done': updatedEpics.filter(e => e.status === STATUS.DONE)\n            };\n            setEpicsByStatus(newEpicsByStatus);\n\n            // Update in backend\n            await EpicService.update(epicId, {\n                ...epicToUpdate,\n                status: newStatus\n            });\n\n        } catch (error) {\n            console.error('Error updating epic status:', error);\n            // Revert changes if update fails\n            const originalEpics = [...epics];\n            setEpics(originalEpics);\n            setError('Failed to update epic status');\n        }\n    };\n\n    const handleEditBacklog = (backlog) => {\n        setSelectedBacklog(backlog);\n        setEditedBacklogName(backlog.name);\n        setEditBacklogDialogOpen(true);\n    };\n\n    const handleEditBacklogSave = async () => {\n        try {\n            await BacklogService.update(selectedBacklog._id, { name: editedBacklogName });\n            setEditBacklogDialogOpen(false);\n            const response = await BacklogService.getByProject(id);\n            setBacklogs(response.data);\n        } catch (err) {\n            setError(\"Failed to update backlog. Please try again.\");\n        }\n    };\n\n    const handleDeleteBacklog = async (backlogId) => {\n        try {\n            await BacklogService.delete(backlogId);\n            const response = await BacklogService.getByProject(id);\n            setBacklogs(response.data);\n        } catch (err) {\n            setError(\"Failed to delete backlog. Please try again.\");\n        }\n    };\n\n    const exportToCSV = (backlog) => {\n        const headers = \"Backlog Name,Project,Item Title,Item Description,Item Type,Item Status\\n\";\n        const items = backlog.items\n            .map((item) => {\n                if (!item) return null;\n                return `${backlog.name},${project.name},${item.title},${item.description || ''},${item.type || ''},${item.status || ''}`;\n            })\n            .filter(Boolean)\n            .join(\"\\n\");\n\n        const csv = headers + items;\n        const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n        saveAs(blob, `${backlog.name.replace(/\\s+/g, \"_\")}_backlog.csv`);\n    };\n\n    const handleBacklogCreated = async () => {\n        try {\n            const response = await BacklogService.getByProject(id);\n            setBacklogs(response.data);\n            setOpenAddBacklogDialog(false);\n        } catch (err) {\n            setError(\"Failed to refresh backlogs. Please try again.\");\n        }\n    };\n\n    const renderTable = () => {\n        let data = [];\n        let columns = [];\n\n        switch (selectedType) {\n            case 'epics':\n                data = epics;\n                columns = [\n                    { field: 'name', headerName: 'Name', flex: 1 },\n                    { field: 'status', headerName: 'Status', width: 120 },\n                    { field: 'description', headerName: 'Description', flex: 1.5 }\n                ];\n                break;\n            case 'backlog':\n                data = backlogs;\n                columns = [\n                    { field: 'name', headerName: 'Name', flex: 1 },\n                    { field: 'status', headerName: 'Status', width: 120 },\n                    { \n                        field: 'items', \n                        headerName: 'Items', \n                        width: 100,\n                        renderCell: (params) => params.value ? params.value.length : 0\n                    }\n                ];\n                break;\n            case 'sprints':\n                data = sprints;\n                columns = [\n                    { field: 'name', headerName: 'Name', flex: 1 },\n                    { field: 'status', headerName: 'Status', width: 120 },\n                    { \n                        field: 'startDate', \n                        headerName: 'Start Date', \n                        width: 120,\n                        renderCell: (params) => params.value ? new Date(params.value).toLocaleDateString() : '-'\n                    },\n                    { \n                        field: 'endDate', \n                        headerName: 'End Date', \n                        width: 120,\n                        renderCell: (params) => params.value ? new Date(params.value).toLocaleDateString() : '-'\n                    }\n                ];\n                break;\n            default:\n                return null;\n        }\n\n        if (!data || data.length === 0) {\n            return (\n                <Box sx={{ textAlign: 'center', py: 4 }}>\n                    <Typography color=\"textSecondary\">\n                        No {selectedType} found\n                    </Typography>\n                </Box>\n            );\n        }\n\n        return (\n            <Box sx={{ maxWidth: '100%', overflowX: 'auto' }}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.field}\n                                    sx={{\n                                        fontWeight: 600,\n                                        backgroundColor: '#f5f5f5',\n                                        color: '#546e7a'\n                                    }}\n                                    width={column.width}\n                                >\n                                    {column.headerName}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data.map((row) => (\n                            <TableRow\n                                key={row._id}\n                                hover\n                                onClick={() => handleBacklogClick(row)}\n                                sx={{ \n                                    cursor: 'pointer',\n                                    '&:hover': { backgroundColor: '#f5f5f5' }\n                                }}\n                            >\n                                {columns.map((column) => (\n                                    <TableCell key={column.field}>\n                                        {column.renderCell ? \n                                            column.renderCell({ value: row[column.field] }) : \n                                            row[column.field] || '-'}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        );\n    };\n\n    const calculateProgress = (progressObj) => {\n        if (!progressObj) return 0;\n        if (typeof progressObj === 'number') return progressObj;\n        if (typeof progressObj === 'object' && progressObj.total > 0) {\n            return Math.round((progressObj.completed / progressObj.total) * 100);\n        }\n        return 0;\n    };\n\n    const renderEpicTable = () => {\n        return (\n            <TableContainer component={Paper} sx={{ mt: 2 }}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Description</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>Priority</TableCell>\n                            <TableCell>Start Date</TableCell>\n                            <TableCell>Due Date</TableCell>\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {epics.map((epic) => (\n                            <TableRow key={epic._id}>\n                                <TableCell>{epic.name}</TableCell>\n                                <TableCell>{epic.description}</TableCell>\n                                <TableCell>\n                                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                                        <Select\n                                            value={epic.status || STATUS.TODO}\n                                            onChange={(e) => handleStatusChange(epic._id, e.target.value)}\n                                            sx={{ height: 32 }}\n                                        >\n                                            <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                            <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                            <MenuItem value={STATUS.DONE}>Completed</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                    <Chip \n                                        label={epic.priority}\n                                        size=\"small\"\n                                        color={\n                                            epic.priority === 'high' ? 'error' :\n                                            epic.priority === 'medium' ? 'warning' : 'info'\n                                        }\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {epic.startDate ? new Date(epic.startDate).toLocaleDateString() : '-'}\n                                </TableCell>\n                                <TableCell>\n                                    {epic.dueDate ? new Date(epic.dueDate).toLocaleDateString() : '-'}\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={() => handleEpicClick(epic)}\n                                        title=\"View Details\"\n                                    >\n                                        <VisibilityIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    };\n\n    const renderEpicCard = (epic) => {\n        return (\n            <Card \n                key={epic._id}\n                sx={{ \n                    '&:hover': {\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n                        transform: 'translateY(-2px)',\n                        transition: 'all 0.2s ease'\n                    }\n                }}\n            >\n                <CardContent sx={{ flex: 1 }}>\n                    <Typography variant=\"h6\" component=\"div\" gutterBottom>\n                        {epic.name}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                        {epic.description}\n                    </Typography>\n                    <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n                        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                            <Select\n                                value={epic.status || STATUS.TODO}\n                                onChange={(e) => handleStatusChange(epic._id, e.target.value)}\n                                sx={{ height: 32 }}\n                            >\n                                <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                <MenuItem value={STATUS.DONE}>Completed</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <Chip \n                            label={epic.priority}\n                            size=\"small\"\n                            color={\n                                epic.priority === 'high' ? 'error' :\n                                epic.priority === 'medium' ? 'warning' : 'info'\n                            }\n                            variant=\"outlined\"\n                        />\n                    </Box>\n                    {epic.startDate && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                            Start: {new Date(epic.startDate).toLocaleDateString()}\n                        </Typography>\n                    )}\n                    {epic.dueDate && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                            Due: {new Date(epic.dueDate).toLocaleDateString()}\n                        </Typography>\n                    )}\n                </CardContent>\n                <CardActions>\n                    <Button size=\"small\" onClick={() => handleEpicClick(epic)}>\n                        View Details\n                    </Button>\n                </CardActions>\n            </Card>\n        );\n    };\n\n    const renderEpicCards = () => {\n        const statusColumns = [\n            { id: STATUS.TODO, title: 'To Do' },\n            { id: STATUS.IN_PROGRESS, title: 'In Progress' },\n            { id: STATUS.DONE, title: 'Completed' }\n        ];\n\n        return (\n            <DndProvider backend={HTML5Backend}>\n                <Box sx={{ display: 'flex', gap: 2, p: 2, overflowX: 'auto' }}>\n                    {statusColumns.map(column => (\n                        <StatusColumn\n                            key={column.id}\n                            status={column.id}\n                            title={column.title}\n                            epics={epicsByStatus[column.id]}\n                            onDrop={handleDrop}\n                            onEpicClick={handleEpicClick}\n                            onEditClick={handleEditEpic}\n                            onDeleteClick={handleDeleteEpic}\n                        />\n                    ))}\n                </Box>\n            </DndProvider>\n        );\n    };\n\n    const renderEpicHeader = () => (\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Box>\n                <Typography variant=\"h5\" sx={{ \n                    fontWeight: 600,\n                    color: '#1e293b',\n                    mb: 0.5\n                }}>\n                    Project Epics\n                </Typography>\n                <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                    Manage and track epics for {project?.name}\n                </Typography>\n            </Box>\n            <Box>\n                <Button\n                    variant=\"outlined\"\n                    onClick={() => setEpicViewMode(epicViewMode === 'table' ? 'cards' : 'table')}\n                    startIcon={epicViewMode === 'table' ? <ViewModuleIcon /> : <ViewListIcon />}\n                    sx={{ mr: 2 }}\n                >\n                    {epicViewMode === 'table' ? 'Card View' : 'Table View'}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    startIcon={<AddIcon />}\n                    onClick={() => setOpenAddEpicDialog(true)}\n                    sx={{\n                        bgcolor: '#1e40af',\n                        '&:hover': { bgcolor: '#1e3a8a' }\n                    }}\n                >\n                    Add Epic\n                </Button>\n            </Box>\n        </Box>\n    );\n\n    const renderEpicContent = () => {\n        if (!epics || epics.length === 0) {\n            return (\n                <Box sx={{ p: 2, textAlign: 'center' }}>\n                    <Typography variant=\"body1\" color=\"text.secondary\">\n                        No epics found\n                    </Typography>\n                </Box>\n            );\n        }\n\n        return (\n            <Box>\n                <Box sx={{ mb: 2 }}>\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<ViewModuleIcon />}\n                        onClick={() => setEpicViewMode(epicViewMode === 'cards' ? 'table' : 'cards')}\n                        sx={{ mr: 1 }}\n                    >\n                        {epicViewMode === 'cards' ? 'Table View' : 'Card View'}\n                    </Button>\n                </Box>\n\n                {epicViewMode === 'cards' ? (\n                    <DndProvider backend={HTML5Backend}>\n                        {renderKanbanBoard()}\n                    </DndProvider>\n                ) : (\n                    renderEpicTableContent()\n                )}\n            </Box>\n        );\n    };\n\n    const renderKanbanBoard = () => (\n        <Box sx={{ \n            display: 'flex', \n            gap: 2, \n            overflowX: 'auto',\n            p: 2,\n            minHeight: 600\n        }}>\n            <StatusColumn\n                status={STATUS.TODO}\n                title=\"To Do\"\n                epics={epicsByStatus[STATUS.TODO]}\n                onDrop={handleDrop}\n                onEpicClick={handleEpicClick}\n                onEditClick={handleEditEpic}\n                onDeleteClick={handleDeleteEpic}\n            />\n            <StatusColumn\n                status={STATUS.IN_PROGRESS}\n                title=\"In Progress\"\n                epics={epicsByStatus[STATUS.IN_PROGRESS]}\n                onDrop={handleDrop}\n                onEpicClick={handleEpicClick}\n                onEditClick={handleEditEpic}\n                onDeleteClick={handleDeleteEpic}\n            />\n            <StatusColumn\n                status={STATUS.DONE}\n                title=\"Done\"\n                epics={epicsByStatus[STATUS.DONE]}\n                onDrop={handleDrop}\n                onEpicClick={handleEpicClick}\n                onEditClick={handleEditEpic}\n                onDeleteClick={handleDeleteEpic}\n            />\n        </Box>\n    );\n\n    const renderBacklogContent = () => {\n        if (!backlogs || backlogs.length === 0) {\n            return (\n                <Box sx={{ p: 2, textAlign: 'center' }}>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                        No backlog items found\n                    </Typography>\n                </Box>\n            );\n        }\n\n        return (\n            <TableContainer component={Paper} elevation={0} sx={{ \n                border: '1px solid #e2e8f0',\n                borderRadius: 2,\n                '& .MuiTableCell-head': {\n                    bgcolor: '#f8fafc',\n                    borderBottom: '2px solid #e2e8f0'\n                },\n                '& .MuiTableRow-root:hover': {\n                    bgcolor: '#f1f5f9'\n                },\n                '& .MuiTableCell-root': {\n                    borderColor: '#e2e8f0'\n                }\n            }}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Name</TableCell>\n                            <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Description</TableCell>\n                            <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Status</TableCell>\n                            <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Progress</TableCell>\n                            <TableCell align=\"right\" sx={{ fontWeight: 600, color: '#475569' }}>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {backlogs.map((backlog) => (\n                            <TableRow \n                                key={backlog._id}\n                                sx={{ \n                                    '&:last-child td, &:last-child th': { border: 0 },\n                                    '&:hover': { bgcolor: '#f8fafc' },\n                                    cursor: 'pointer'\n                                }}\n                                onClick={() => handleBacklogClick(backlog)}\n                            >\n                                <TableCell sx={{ color: '#1e293b' }}>{backlog.name}</TableCell>\n                                <TableCell sx={{ color: '#475569' }}>\n                                    {backlog.description ? (\n                                        backlog.description.length > 50 \n                                            ? `${backlog.description.substring(0, 50)}...` \n                                            : backlog.description\n                                    ) : 'No description'}\n                                </TableCell>\n                                <TableCell>\n                                    <Chip \n                                        label={backlog.status || 'to do'} \n                                        size=\"small\"\n                                        sx={{ \n                                            bgcolor: \n                                                backlog.status === 'done' ? '#dcfce7' :\n                                                backlog.status === 'in progress' ? '#dbeafe' : '#f1f5f9',\n                                            color: \n                                                backlog.status === 'done' ? '#059669' :\n                                                backlog.status === 'in progress' ? '#2563eb' : '#475569',\n                                            textTransform: 'capitalize',\n                                            fontWeight: 500\n                                        }}\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                        <CircularProgress\n                                            variant=\"determinate\"\n                                            value={typeof backlog.progress === 'object' ? \n                                                (backlog.progress.completed / backlog.progress.total * 100) : \n                                                backlog.progress || 0}\n                                            size={24}\n                                            thickness={4}\n                                            sx={{ \n                                                color: ((typeof backlog.progress === 'object' ? \n                                                    (backlog.progress.completed / backlog.progress.total * 100) : \n                                                    backlog.progress || 0) >= 100) ? '#10b981' : '#3b82f6' \n                                            }}\n                                        />\n                                        <Typography variant=\"body2\" sx={{ color: '#475569' }}>\n                                            {typeof backlog.progress === 'object' ? \n                                                `${(backlog.progress.completed / backlog.progress.total * 100).toFixed(0)}%` :\n                                                `${backlog.progress || 0}%`\n                                            }\n                                        </Typography>\n                                    </Box>\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                handleBacklogClick(backlog);\n                                            }}\n                                            sx={{ color: '#3b82f6' }}\n                                        >\n                                            <VisibilityIcon fontSize=\"small\" />\n                                        </IconButton>\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                handleEditBacklog(backlog);\n                                            }}\n                                            sx={{ color: '#3b82f6' }}\n                                        >\n                                            <EditIcon fontSize=\"small\" />\n                                        </IconButton>\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={(e) => {\n                                                e.stopPropagation();\n                                                handleDeleteBacklog(backlog._id);\n                                            }}\n                                            sx={{ color: '#ef4444' }}\n                                        >\n                                            <DeleteIcon fontSize=\"small\" />\n                                        </IconButton>\n                                    </Box>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    };\n\n    const renderSprintContent = () => {\n        return (\n            <Box sx={{ p: 2 }}>\n                {sprints.map((sprint) => (\n                    <Paper\n                        key={sprint._id}\n                        elevation={0}\n                        sx={{\n                            mb: 3,\n                            border: '1px solid #e2e8f0',\n                            borderRadius: 2,\n                            overflow: 'hidden'\n                        }}\n                    >\n                        <Box\n                            sx={{\n                                p: 2,\n                                borderBottom: '1px solid #e2e8f0',\n                                bgcolor: '#f8fafc',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'space-between'\n                            }}\n                        >\n                            <Box>\n                                <Typography variant=\"h6\" sx={{ color: '#1e293b', fontWeight: 600, mb: 0.5 }}>\n                                    {sprint.name}\n                                </Typography>\n                                <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                        <CalendarTodayIcon sx={{ color: '#64748b', fontSize: '0.875rem' }} />\n                                        <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                                            {new Date(sprint.startDate).toLocaleDateString()} - {new Date(sprint.endDate).toLocaleDateString()}\n                                        </Typography>\n                                    </Box>\n                                    <Chip\n                                        label={sprint.status}\n                                        size=\"small\"\n                                        sx={{\n                                            bgcolor: \n                                                sprint.status === 'completed' ? '#10b981' :\n                                                sprint.status === 'active' ? '#3b82f6' :\n                                                sprint.status === 'planned' ? '#f59e0b' : '#e2e8f0',\n                                            color: sprint.status === 'planned' ? '#1e293b' : 'white',\n                                            fontWeight: 500,\n                                            textTransform: 'capitalize'\n                                        }}\n                                    />\n                                </Box>\n                            </Box>\n                            <Box sx={{ display: 'flex', gap: 1 }}>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => handleSprintClick(sprint)}\n                                    sx={{ \n                                        color: '#64748b',\n                                        '&:hover': { \n                                            bgcolor: '#f1f5f9',\n                                            color: '#3b82f6'\n                                        }\n                                    }}\n                                >\n                                    <VisibilityIcon fontSize=\"small\" />\n                                </IconButton>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => handleEditSprint(sprint)}\n                                    sx={{ \n                                        color: '#64748b',\n                                        '&:hover': { \n                                            bgcolor: '#f1f5f9',\n                                            color: '#3b82f6'\n                                        }\n                                    }}\n                                >\n                                    <EditIcon fontSize=\"small\" />\n                                </IconButton>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={() => handleDeleteSprint(sprint)}\n                                    sx={{ \n                                        color: '#64748b',\n                                        '&:hover': { \n                                            bgcolor: '#fee2e2',\n                                            color: '#ef4444'\n                                        }\n                                    }}\n                                >\n                                    <DeleteIcon fontSize=\"small\" />\n                                </IconButton>\n                            </Box>\n                        </Box>\n\n                        <Box sx={{ p: 2 }}>\n                            <Box sx={{ mb: 3 }}>\n                                <Typography variant=\"body1\" sx={{ color: '#475569', mb: 2, whiteSpace: 'pre-wrap' }}>\n                                    {sprint.description || 'No description provided'}\n                                </Typography>\n                                <Box sx={{ display: 'flex', gap: 3, alignItems: 'center' }}>\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                        <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n                                            <CircularProgress\n                                                variant=\"determinate\"\n                                                value={calculateProgress(sprint.progress)}\n                                                size={40}\n                                                thickness={4}\n                                                sx={{ color: calculateProgress(sprint.progress) >= 100 ? '#10b981' : '#3b82f6' }}\n                                            />\n                                            <Box\n                                                sx={{\n                                                    top: 0,\n                                                    left: 0,\n                                                    bottom: 0,\n                                                    right: 0,\n                                                    position: 'absolute',\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    justifyContent: 'center',\n                                                }}\n                                            >\n                                                <Typography variant=\"caption\" sx={{ color: '#1e293b', fontWeight: 600 }}>\n                                                    {calculateProgress(sprint.progress)}%\n                                                </Typography>\n                                            </Box>\n                                        </Box>\n                                        <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                                            Progress\n                                        </Typography>\n                                    </Box>\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                        <AssignmentIcon sx={{ color: '#3b82f6', fontSize: '1.25rem' }} />\n                                        <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                                            {sprint.tasks ? sprint.tasks.length : 0} Tasks\n                                        </Typography>\n                                    </Box>\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                        <GroupIcon sx={{ color: '#3b82f6', fontSize: '1.25rem' }} />\n                                        <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                                            {sprint.assignees ? sprint.assignees.length : 0} Members\n                                        </Typography>\n                                    </Box>\n                                </Box>\n                            </Box>\n\n                            {sprint.tasks && sprint.tasks.length > 0 && (\n                                <Box>\n                                    <Typography variant=\"subtitle1\" sx={{ color: '#1e293b', fontWeight: 600, mb: 1.5 }}>\n                                        Tasks\n                                    </Typography>\n                                    <TableContainer component={Paper} elevation={0} sx={{ border: '1px solid #e2e8f0' }}>\n                                        <Table size=\"small\">\n                                            <TableHead>\n                                                <TableRow sx={{ bgcolor: '#f8fafc' }}>\n                                                    <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Title</TableCell>\n                                                    <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Status</TableCell>\n                                                    <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Assignee</TableCell>\n                                                    <TableCell sx={{ fontWeight: 600, color: '#475569' }}>Due Date</TableCell>\n                                                </TableRow>\n                                            </TableHead>\n                                            <TableBody>\n                                                {sprint.tasks.map((task, index) => (\n                                                    <TableRow \n                                                        key={task._id || index}\n                                                        sx={{ \n                                                            '&:last-child td, &:last-child th': { border: 0 },\n                                                            '&:hover': { bgcolor: '#f8fafc' }\n                                                        }}\n                                                    >\n                                                        <TableCell sx={{ color: '#1e293b' }}>{task.title}</TableCell>\n                                                        <TableCell>\n                                                            <Chip\n                                                                label={task.status}\n                                                                size=\"small\"\n                                                                sx={{\n                                                                    bgcolor: \n                                                                        task.status === 'completed' ? '#dcfce7' :\n                                                                        task.status === 'in progress' ? '#dbeafe' : '#f1f5f9',\n                                                                    color: \n                                                                        task.status === 'completed' ? '#10b981' :\n                                                                        task.status === 'in progress' ? '#3b82f6' : '#64748b',\n                                                                    textTransform: 'capitalize'\n                                                                }}\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell sx={{ color: '#475569' }}>\n                                                            {task.assignee ? (\n                                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                                                                    <Avatar sx={{ width: 24, height: 24, fontSize: '0.75rem' }}>\n                                                                        {task.assignee.name[0]}\n                                                                    </Avatar>\n                                                                    <Typography variant=\"body2\">\n                                                                        {task.assignee.name}\n                                                                    </Typography>\n                                                                </Box>\n                                                            ) : '-'}\n                                                        </TableCell>\n                                                        <TableCell sx={{ color: '#475569' }}>\n                                                            {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : '-'}\n                                                        </TableCell>\n                                                    </TableRow>\n                                                ))}\n                                            </TableBody>\n                                        </Table>\n                                    </TableContainer>\n                                </Box>\n                            )}\n                        </Box>\n                    </Paper>\n                ))}\n            </Box>\n        );\n    };\n\n    const renderEpicTableContent = () => {\n        if (!epics || epics.length === 0) {\n            return (\n                <Box sx={{ p: 2, textAlign: 'center' }}>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                        No epics found\n                    </Typography>\n                </Box>\n            );\n        }\n\n        return (\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Description</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>Progress</TableCell>\n                            <TableCell>Timeline</TableCell>\n                            <TableCell align=\"right\">Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {epics.map((epic) => {\n                            const progress = calculateProgress(epic.progress);\n\n                            return (\n                                <TableRow key={epic._id}>\n                                    <TableCell>{epic.name}</TableCell>\n                                    <TableCell>{epic.description}</TableCell>\n                                    <TableCell>\n                                        <FormControl size=\"small\" onClick={(e) => e.stopPropagation()}>\n                                            <Select\n                                                value={epic.status || STATUS.TODO}\n                                                onChange={(e) => handleEpicStatusChange(epic._id, e.target.value)}\n                                                sx={{\n                                                    minWidth: 120,\n                                                    bgcolor: \n                                                        epic.status === STATUS.DONE ? '#dcfce7' :\n                                                        epic.status === STATUS.IN_PROGRESS ? '#dbeafe' : '#f1f5f9',\n                                                    color: epic.status === STATUS.TODO ? '#1e293b' : 'white',\n                                                    fontWeight: 500\n                                                }}\n                                            >\n                                                <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                                <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                                <MenuItem value={STATUS.DONE}>Done</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Chip \n                                            label={epic.priority || 'Medium'} \n                                            size=\"small\"\n                                            sx={{ \n                                                bgcolor: \n                                                    epic.priority === 'high' ? '#ef4444' :\n                                                    epic.priority === 'medium' ? '#f59e0b' : '#3b82f6',\n                                                color: 'white',\n                                                fontWeight: 500\n                                            }}\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                            <CircularProgress\n                                                variant=\"determinate\"\n                                                value={progress}\n                                                size={24}\n                                                thickness={4}\n                                                sx={{ color: progress >= 100 ? '#10b981' : '#3b82f6' }}\n                                            />\n                                            <Typography variant=\"body2\">\n                                                {progress}%\n                                            </Typography>\n                                        </Box>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body2\" color=\"text.secondary\">\n                                            {epic.startDate ? new Date(epic.startDate).toLocaleDateString() : 'Not set'} \n                                            {' - '}\n                                            {epic.dueDate ? new Date(epic.dueDate).toLocaleDateString() : 'Not set'}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={() => handleEpicClick(epic)}\n                                        >\n                                            <VisibilityIcon fontSize=\"small\" />\n                                        </IconButton>\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={() => handleEditEpic(epic)}\n                                        >\n                                            <EditIcon fontSize=\"small\" />\n                                        </IconButton>\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={() => handleDeleteEpic(epic._id)}\n                                        >\n                                            <DeleteIcon fontSize=\"small\" />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    };\n\n    const handleEpicStatusChange = async (epicId, newStatus) => {\n        try {\n            const epicToUpdate = epics.find(e => e._id === epicId);\n            if (!epicToUpdate) return;\n\n            // Update locally first for immediate feedback\n            const updatedEpics = epics.map(epic => \n                epic._id === epicId ? { ...epic, status: newStatus } : epic\n            );\n            setEpics(updatedEpics);\n\n            // Update on the server with complete epic data\n            await EpicService.updateEpicStatus(epicId, { \n                ...epicToUpdate,\n                status: newStatus \n            });\n        } catch (error) {\n            console.error('Error updating epic status:', error);\n            // Revert the local change if the server update fails\n            const originalEpics = epics.map(epic => \n                epic._id === epicId ? { ...epic, status: epic.status } : epic\n            );\n            setEpics(originalEpics);\n        }\n    };\n\n    const renderBreadcrumbs = () => {\n        const pathSegments = [\n            { name: 'Home', icon: <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />, path: '/' },\n            { name: 'Projects', icon: <ViewListIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />, path: '/projects' },\n            { name: project?.name || 'Project Details', icon: <AssignmentIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> }\n        ];\n\n        if (selectedType === 'backlog') {\n            pathSegments.push({ name: 'Backlog', icon: <ViewModuleIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> });\n        } else if (selectedType === 'epics') {\n            pathSegments.push({ name: 'Epics', icon: <AssignmentIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> });\n        } else if (selectedType === 'sprints') {\n            pathSegments.push({ name: 'Sprints', icon: <BugReportIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> });\n        }\n\n        return (\n            <Breadcrumbs \n                separator={<NavigateNextIcon fontSize=\"small\" sx={{ color: 'rgba(255,255,255,0.7)' }} />}\n                sx={{ \n                    flex: 1,\n                    '& .MuiBreadcrumbs-li': {\n                        display: 'flex',\n                        alignItems: 'center'\n                    }\n                }}\n            >\n                {pathSegments.map((segment, index) => {\n                    const isLast = index === pathSegments.length - 1;\n                    \n                    if (isLast) {\n                        return (\n                            <Typography\n                                key={segment.name}\n                                sx={{\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    color: 'rgba(255,255,255,0.7)',\n                                    fontWeight: 'medium'\n                                }}\n                            >\n                                {segment.icon}\n                                {segment.name}\n                            </Typography>\n                        );\n                    }\n\n                    return (\n                        <Link\n                            key={segment.name}\n                            component={RouterLink}\n                            to={segment.path}\n                            sx={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                color: '#fff',\n                                textDecoration: 'none',\n                                '&:hover': {\n                                    textDecoration: 'underline',\n                                    color: '#fff'\n                                }\n                            }}\n                        >\n                            {segment.icon}\n                            {segment.name}\n                        </Link>\n                    );\n                })}\n            </Breadcrumbs>\n        );\n    };\n\n    const handleNavigation = (path) => {\n        navigate(path);\n    };\n\n    // Add Epic dialog handlers\n    const handleOpenAddEpicDialog = () => {\n        setOpenAddEpicDialog(true);\n    };\n\n    const handleCloseAddEpicDialog = () => {\n        setOpenAddEpicDialog(false);\n    };\n\n    const handleEpicAdded = async () => {\n        try {\n            const response = await EpicService.getByProject(id);\n            setEpics(response.data);\n            handleCloseAddEpicDialog();\n        } catch (error) {\n            console.error('Error fetching epics:', error);\n        }\n    };\n\n    const handleCloseEpicDetails = () => {\n        setEpicDetailsOpen(false);\n        setSelectedEpic(null);\n    };\n\n    const renderEpicDetails = () => {\n        if (!selectedEpic) return null;\n\n        const progress = calculateProgress(selectedEpic.progress);\n\n        return (\n            <Dialog\n                open={epicDetailsOpen}\n                onClose={handleCloseEpicDetails}\n                maxWidth=\"md\"\n                fullWidth\n                PaperProps={{\n                    sx: {\n                        borderRadius: 2,\n                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'\n                    }\n                }}\n            >\n                <DialogTitle sx={{ bgcolor: '#f8fafc', borderBottom: '1px solid #e2e8f0', px: 3, py: 2 }}>\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                        <Box>\n                            <Typography variant=\"h5\" sx={{ color: '#1e293b', fontWeight: 600, mb: 1 }}>\n                                {selectedEpic.name}\n                            </Typography>\n                            <Box sx={{ display: 'flex', gap: 1 }}>\n                                <Chip \n                                    label={selectedEpic.status || 'To Do'} \n                                    size=\"small\"\n                                    sx={{ \n                                        bgcolor: \n                                            selectedEpic.status === 'done' ? '#10b981' :\n                                            selectedEpic.status === 'in progress' ? '#3b82f6' : '#e2e8f0',\n                                        color: selectedEpic.status === 'to do' ? '#1e293b' : 'white',\n                                        fontWeight: 500\n                                    }}\n                                />\n                                <Chip \n                                    label={selectedEpic.priority || 'Medium'} \n                                    size=\"small\"\n                                    sx={{ \n                                        bgcolor: \n                                            selectedEpic.priority === 'high' ? '#ef4444' :\n                                            selectedEpic.priority === 'medium' ? '#f59e0b' : '#3b82f6',\n                                        color: 'white',\n                                        fontWeight: 500\n                                    }}\n                                />\n                            </Box>\n                        </Box>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            onClick={handleCloseEpicDetails}\n                            aria-label=\"close\"\n                            sx={{ color: '#64748b' }}\n                        >\n                            <CloseIcon />\n                        </IconButton>\n                    </Box>\n                </DialogTitle>\n                <DialogContent sx={{ px: 3, py: 3 }}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={8}>\n                            <Box sx={{ mb: 4 }}>\n                                <Typography variant=\"h6\" gutterBottom sx={{ color: '#1e293b', fontWeight: 600, display: 'flex', alignItems: 'center', gap: 1 }}>\n                                    <AssignmentIcon sx={{ color: '#3b82f6' }} />\n                                    Description\n                                </Typography>\n                                <Paper sx={{ p: 2, bgcolor: '#f8fafc', borderRadius: 2, minHeight: 100 }}>\n                                    <Typography variant=\"body1\" sx={{ color: '#475569', whiteSpace: 'pre-wrap' }}>\n                                        {selectedEpic.description || 'No description provided'}\n                                    </Typography>\n                                </Paper>\n                            </Box>\n\n                            <Box>\n                                <Typography variant=\"h6\" gutterBottom sx={{ color: '#1e293b', fontWeight: 600, display: 'flex', alignItems: 'center', gap: 1 }}>\n                                    <BugReportIcon sx={{ color: '#3b82f6' }} />\n                                    Related Issues\n                                </Typography>\n                                <Paper sx={{ p: 2, bgcolor: '#f8fafc', borderRadius: 2 }}>\n                                    {selectedEpic.issues && selectedEpic.issues.length > 0 ? (\n                                        <List disablePadding>\n                                            {selectedEpic.issues.map((issue, index) => (\n                                                <ListItem \n                                                    key={issue._id || index}\n                                                    disablePadding\n                                                    sx={{ \n                                                        py: 1,\n                                                        borderBottom: index < selectedEpic.issues.length - 1 ? '1px solid #e2e8f0' : 'none'\n                                                    }}\n                                                >\n                                                    <ListItemText\n                                                        primary={issue.title}\n                                                        secondary={issue.status}\n                                                        primaryTypographyProps={{ sx: { color: '#1e293b' } }}\n                                                        secondaryTypographyProps={{ sx: { color: '#64748b' } }}\n                                                    />\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    ) : (\n                                        <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                                            No issues linked to this epic\n                                        </Typography>\n                                    )}\n                                </Paper>\n                            </Box>\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <Box sx={{ mb: 4 }}>\n                                <Typography variant=\"h6\" gutterBottom sx={{ color: '#1e293b', fontWeight: 600, display: 'flex', alignItems: 'center', gap: 1 }}>\n                                    <SpeedIcon sx={{ color: '#3b82f6' }} />\n                                    Progress\n                                </Typography>\n                                <Paper sx={{ p: 3, bgcolor: '#f8fafc', borderRadius: 2, textAlign: 'center' }}>\n                                    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n                                        <CircularProgress \n                                            variant=\"determinate\" \n                                            value={progress}\n                                            size={80}\n                                            thickness={4}\n                                            sx={{ color: progress >= 100 ? '#10b981' : '#3b82f6' }}\n                                        />\n                                        <Box\n                                            sx={{\n                                                top: 0,\n                                                left: 0,\n                                                bottom: 0,\n                                                right: 0,\n                                                position: 'absolute',\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                                justifyContent: 'center',\n                                            }}\n                                        >\n                                            <Typography variant=\"h6\" sx={{ color: '#1e293b', fontWeight: 600 }}>\n                                                {progress}%\n                                            </Typography>\n                                        </Box>\n                                    </Box>\n                                </Paper>\n                            </Box>\n\n                            <Box sx={{ mb: 4 }}>\n                                <Typography variant=\"h6\" gutterBottom sx={{ color: '#1e293b', fontWeight: 600, display: 'flex', alignItems: 'center', gap: 1 }}>\n                                    <CalendarTodayIcon sx={{ color: '#3b82f6' }} />\n                                    Timeline\n                                </Typography>\n                                <Paper sx={{ p: 2, bgcolor: '#f8fafc', borderRadius: 2 }}>\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={6}>\n                                            <Typography variant=\"subtitle2\" sx={{ color: '#64748b', mb: 0.5 }}>\n                                                Start Date\n                                            </Typography>\n                                            <Typography variant=\"body1\" sx={{ color: '#1e293b', fontWeight: 500 }}>\n                                                {selectedEpic.startDate ? new Date(selectedEpic.startDate).toLocaleDateString() : 'Not set'}\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography variant=\"subtitle2\" sx={{ color: '#64748b', mb: 0.5 }}>\n                                                Due Date\n                                            </Typography>\n                                            <Typography variant=\"body1\" sx={{ color: '#1e293b', fontWeight: 500 }}>\n                                                {selectedEpic.dueDate ? new Date(selectedEpic.dueDate).toLocaleDateString() : 'Not set'}\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Paper>\n                            </Box>\n\n                            <Box>\n                                <Typography variant=\"h6\" gutterBottom sx={{ color: '#1e293b', fontWeight: 600, display: 'flex', alignItems: 'center', gap: 1 }}>\n                                    <GroupIcon sx={{ color: '#3b82f6' }} />\n                                    Team\n                                </Typography>\n                                <Paper sx={{ p: 2, bgcolor: '#f8fafc', borderRadius: 2 }}>\n                                    {selectedEpic.assignees && selectedEpic.assignees.length > 0 ? (\n                                        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                                            {selectedEpic.assignees.map((assignee, index) => (\n                                                <Chip\n                                                    key={assignee._id || index}\n                                                    avatar={<Avatar>{assignee.name[0]}</Avatar>}\n                                                    label={assignee.name}\n                                                    sx={{ bgcolor: '#e2e8f0', color: '#1e293b' }}\n                                                />\n                                            ))}\n                                        </Box>\n                                    ) : (\n                                        <Typography variant=\"body2\" sx={{ color: '#64748b' }}>\n                                            No team members assigned\n                                        </Typography>\n                                    )}\n                                </Paper>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions sx={{ px: 3, py: 2, bgcolor: '#f8fafc', borderTop: '1px solid #e2e8f0' }}>\n                    <Button \n                        onClick={handleCloseEpicDetails}\n                        sx={{ \n                            color: '#64748b',\n                            '&:hover': { bgcolor: '#f1f5f9' }\n                        }}\n                    >\n                        Close\n                    </Button>\n                    <Button \n                        onClick={() => handleEditEpic(selectedEpic)}\n                        variant=\"contained\"\n                        startIcon={<EditIcon />}\n                        sx={{ \n                            bgcolor: '#1e40af',\n                            '&:hover': { bgcolor: '#1e3a8a' }\n                        }}\n                    >\n                        Edit Epic\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const handleEditEpic = (epic) => {\n        setEditedEpic(epic);\n        setEditEpicDialogOpen(true);\n    };\n\n    const handleCloseEditEpic = () => {\n        setEditEpicDialogOpen(false);\n        setEditedEpic(null);\n    };\n\n    const handleEditEpicSave = async () => {\n        try {\n            await EpicService.update(editedEpic._id, editedEpic);\n            \n            // Update local state\n            const updatedEpics = epics.map(e => \n                e._id === editedEpic._id ? editedEpic : e\n            );\n            setEpics(updatedEpics);\n            \n            // Update epicsByStatus\n            const newEpicsByStatus = {\n                'to do': updatedEpics.filter(e => e.status === STATUS.TODO),\n                'in progress': updatedEpics.filter(e => e.status === STATUS.IN_PROGRESS),\n                'done': updatedEpics.filter(e => e.status === STATUS.DONE)\n            };\n            setEpicsByStatus(newEpicsByStatus);\n            \n            handleCloseEditEpic();\n        } catch (error) {\n            console.error('Error updating epic:', error);\n        }\n    };\n\n    const handleDeleteEpic = async (epicId) => {\n        if (!window.confirm('Are you sure you want to delete this epic?')) return;\n\n        try {\n            await EpicService.delete(epicId);\n            \n            // Update local state\n            const updatedEpics = epics.filter(e => e._id !== epicId);\n            setEpics(updatedEpics);\n            \n            // Update epicsByStatus\n            const newEpicsByStatus = {\n                'to do': updatedEpics.filter(e => e.status === STATUS.TODO),\n                'in progress': updatedEpics.filter(e => e.status === STATUS.IN_PROGRESS),\n                'done': updatedEpics.filter(e => e.status === STATUS.DONE)\n            };\n            setEpicsByStatus(newEpicsByStatus);\n        } catch (error) {\n            console.error('Error deleting epic:', error);\n        }\n    };\n\n    const handleEditEpicChange = (field, value) => {\n        setEditedEpic(prev => ({\n            ...prev,\n            [field]: value\n        }));\n    };\n\n    const handleSprintClick = (sprint) => {\n        setSelectedType('sprints');\n        setSelectedItem(sprint);\n    };\n\n    const handleBackToSprints = () => {\n        setSelectedType('sprints');\n        setSelectedItem(null);\n    };\n\n    const renderContent = () => {\n        if (loading) {\n            return <CircularProgress />;\n        }\n\n        if (error) {\n            return <Alert severity=\"error\">{error}</Alert>;\n        }\n\n        switch (selectedType) {\n            case 'epics':\n                return renderEpicContent();\n            case 'backlog':\n                return renderBacklogContent();\n            case 'sprints':\n                return (\n                    <Box sx={{ p: 3 }}>\n                        <Typography variant=\"h5\" sx={{ mb: 3 }}>Sprints</Typography>\n                        <Grid container spacing={3}>\n                            {sprints.map((sprint) => (\n                                <Grid item xs={12} md={6} lg={4} key={sprint._id}>\n                                    <Card \n                                        sx={{ \n                                            height: '100%',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            position: 'relative'\n                                        }}\n                                    >\n                                        <CardContent sx={{ flexGrow: 1 }}>\n                                            <Typography variant=\"h6\" gutterBottom>\n                                                {sprint.name}\n                                            </Typography>\n                                            <Box sx={{ mb: 2 }}>\n                                                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                                    Progress\n                                                </Typography>\n                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                                    <Box sx={{ flexGrow: 1 }}>\n                                                        <LinearProgress \n                                                            variant=\"determinate\" \n                                                            value={sprint.progress || 0}\n                                                            sx={{\n                                                                height: 8,\n                                                                borderRadius: 4,\n                                                                backgroundColor: '#e2e8f0',\n                                                                '& .MuiLinearProgress-bar': {\n                                                                    backgroundColor: \n                                                                        sprint.progress === 100 ? '#059669' :\n                                                                        sprint.progress >= 70 ? '#3b82f6' :\n                                                                        sprint.progress >= 30 ? '#f59e0b' : '#ef4444',\n                                                                    borderRadius: 4\n                                                                }\n                                                            }}\n                                                        />\n                                                    </Box>\n                                                    <Typography \n                                                        variant=\"body2\" \n                                                        sx={{ \n                                                            minWidth: 40,\n                                                            color: \n                                                                sprint.progress === 100 ? '#059669' :\n                                                                sprint.progress >= 70 ? '#3b82f6' :\n                                                                sprint.progress >= 30 ? '#f59e0b' : '#ef4444'\n                                                        }}\n                                                    >\n                                                        {sprint.progress || 0}%\n                                                    </Typography>\n                                                </Box>\n                                            </Box>\n                                            <Typography variant=\"body2\" color=\"text.secondary\">\n                                                Start Date: {new Date(sprint.startDate).toLocaleDateString()}\n                                            </Typography>\n                                            <Typography variant=\"body2\" color=\"text.secondary\">\n                                                End Date: {new Date(sprint.endDate).toLocaleDateString()}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <Button \n                                                size=\"small\" \n                                                startIcon={<VisibilityIcon />}\n                                                onClick={() => handleSprintClick(sprint)}\n                                            >\n                                                View Details\n                                            </Button>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Box>\n                );\n            case 'backlogItems':\n                return (\n                    <Box sx={{ p: 3 }}>\n                        <Typography variant=\"h5\" sx={{ mb: 3 }}>Backlog Items</Typography>\n                        {backlogItems.length === 0 ? (\n                            <Alert severity=\"info\">No backlog items found for this project</Alert>\n                        ) : (\n                            <TableContainer component={Paper}>\n                                <Table>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>Title</TableCell>\n                                            <TableCell>Description</TableCell>\n                                            <TableCell>Type</TableCell>\n                                            <TableCell>Status</TableCell>\n                                            <TableCell>Effort</TableCell>\n                                            <TableCell>Actions</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {backlogItems.map((item) => (\n                                            <TableRow key={item._id}>\n                                                <TableCell>{item.title}</TableCell>\n                                                <TableCell>{item.description}</TableCell>\n                                                <TableCell>\n                                                    <Chip \n                                                        label={item.type} \n                                                        size=\"small\"\n                                                        color={\n                                                            item.type === 'bug' ? 'error' :\n                                                            item.type === 'story' ? 'primary' : 'default'\n                                                        }\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <FormControl size=\"small\">\n                                                        <Select\n                                                            value={item.status || STATUS.TODO}\n                                                            onChange={(e) => handleBacklogItemStatusChange(item._id, e.target.value)}\n                                                            sx={{\n                                                                minWidth: 120,\n                                                                '& .MuiSelect-select': {\n                                                                    py: 1,\n                                                                    bgcolor: \n                                                                        item.status === STATUS.DONE ? '#dcfce7' :\n                                                                        item.status === STATUS.IN_PROGRESS ? '#dbeafe' : '#f1f5f9',\n                                                                    color: \n                                                                        item.status === STATUS.DONE ? '#059669' :\n                                                                        item.status === STATUS.IN_PROGRESS ? '#2563eb' : '#475569',\n                                                                }\n                                                            }}\n                                                        >\n                                                            <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                                            <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                                            <MenuItem value={STATUS.DONE}>Done</MenuItem>\n                                                        </Select>\n                                                    </FormControl>\n                                                </TableCell>\n                                                <TableCell>{item.effortEstimate}</TableCell>\n                                                <TableCell>\n                                                    <IconButton \n                                                        size=\"small\" \n                                                        onClick={() => handleEditBacklogItem(item)}\n                                                    >\n                                                        <EditIcon />\n                                                    </IconButton>\n                                                    <IconButton \n                                                        size=\"small\" \n                                                        onClick={() => handleDeleteBacklogItem(item._id)}\n                                                    >\n                                                        <DeleteIcon />\n                                                    </IconButton>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        )}\n                    </Box>\n                );\n            case 'issues':\n                return (\n                    <Box sx={{ p: 3 }}>\n                        <IssueList projectId={project.id} />\n                    </Box>\n                );\n            default:\n                return null;\n        }\n    };\n\n    const handleBacklogItemStatusChange = async (itemId, newStatus) => {\n        try {\n            console.log('Updating item:', itemId, 'with status:', newStatus);\n            const itemToUpdate = backlogItems.find(item => item._id === itemId);\n            if (!itemToUpdate) {\n                console.error('Item not found:', itemId);\n                return;\n            }\n\n            console.log('Found item to update:', itemToUpdate);\n\n            // Create a complete update object with all required fields\n            const updatedItem = {\n                title: itemToUpdate.title,\n                description: itemToUpdate.description,\n                type: itemToUpdate.type || 'story',\n                status: newStatus,\n                effortEstimate: itemToUpdate.effortEstimate || 0,\n                project: itemToUpdate.project,\n                sprint: itemToUpdate.sprint,\n                assignedTo: itemToUpdate.assignedTo\n            };\n\n            console.log('Sending update with data:', updatedItem);\n            await BacklogItemService.update(itemToUpdate._id, updatedItem);\n            \n            // Update local state\n            setBacklogItems(prevItems =>\n                prevItems.map(item =>\n                    item._id === itemId ? { ...item, status: newStatus } : item\n                )\n            );\n        } catch (error) {\n            console.error('Error updating backlog item status:', error);\n            setError('Failed to update status. Error: ' + error.message);\n        }\n    };\n\n    const fetchBacklogItems = async () => {\n        try {\n            const response = await BacklogItemService.getAll();\n            console.log('Raw backlog items response:', response.data);\n            \n            // Filter backlog items for the current project using project._id\n            const projectBacklogItems = response.data.filter(item => \n                item.project === project._id\n            );\n            console.log('Current project:', project);\n            console.log('Filtered backlog items:', projectBacklogItems);\n            setBacklogItems(projectBacklogItems);\n        } catch (error) {\n            console.error('Error fetching backlog items:', error);\n            setError(error.message);\n        }\n    };\n\n    useEffect(() => {\n        if (selectedType === 'backlogItems' && project?._id) {\n            fetchBacklogItems();\n        }\n    }, [selectedType, project?._id]);\n\n    const handleEditBacklogItem = (item) => {\n        // Implement edit backlog item logic\n    };\n\n    const handleDeleteBacklogItem = (itemId) => {\n        // Implement delete backlog item logic\n    };\n\n    const calculateSprintProgress = async (sprintId) => {\n        try {\n            const response = await BacklogItemService.getAll();\n            // Filter backlog items for this sprint\n            const sprintBacklogItems = response.data.filter(item => \n                item.sprint === sprintId\n            );\n\n            if (sprintBacklogItems.length === 0) return 0;\n\n            // Count completed items (status === 'done')\n            const completedItems = sprintBacklogItems.filter(item => \n                item.status === STATUS.DONE\n            ).length;\n\n            // Calculate percentage\n            const progress = (completedItems / sprintBacklogItems.length) * 100;\n            return Math.round(progress);\n        } catch (error) {\n            console.error('Error calculating sprint progress:', error);\n            return 0;\n        }\n    };\n\n    const updateSprintProgress = async () => {\n        const updatedSprints = await Promise.all(\n            sprints.map(async (sprint) => {\n                const progress = await calculateSprintProgress(sprint._id);\n                return { ...sprint, progress };\n            })\n        );\n        setSprints(updatedSprints);\n    };\n\n    useEffect(() => {\n        if (selectedType === 'sprints') {\n            updateSprintProgress();\n        }\n    }, [selectedType]);\n\n    // Add progress calculation when backlog items are updated\n    useEffect(() => {\n        if (backlogItems.length > 0) {\n            updateSprintProgress();\n        }\n    }, [backlogItems]);\n\n    const renderSprintsContent = () => {\n        return (\n            <Box sx={{ p: 3 }}>\n                <Typography variant=\"h5\" sx={{ mb: 3 }}>Sprints</Typography>\n                <Grid container spacing={3}>\n                    {sprints.map((sprint) => (\n                        <Grid item xs={12} md={6} lg={4} key={sprint._id}>\n                            <Card \n                                sx={{ \n                                    height: '100%',\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    position: 'relative'\n                                }}\n                            >\n                                <CardContent sx={{ flexGrow: 1 }}>\n                                    <Typography variant=\"h6\" gutterBottom>\n                                        {sprint.name}\n                                    </Typography>\n                                    <Box sx={{ mb: 2 }}>\n                                        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                            Progress\n                                        </Typography>\n                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                            <Box sx={{ flexGrow: 1 }}>\n                                                <LinearProgress \n                                                    variant=\"determinate\" \n                                                    value={sprint.progress || 0}\n                                                    sx={{\n                                                        height: 8,\n                                                        borderRadius: 4,\n                                                        backgroundColor: '#e2e8f0',\n                                                        '& .MuiLinearProgress-bar': {\n                                                            backgroundColor: \n                                                                sprint.progress === 100 ? '#059669' :\n                                                                sprint.progress >= 70 ? '#3b82f6' :\n                                                                sprint.progress >= 30 ? '#f59e0b' : '#ef4444',\n                                                            borderRadius: 4\n                                                        }\n                                                    }}\n                                                />\n                                            </Box>\n                                            <Typography \n                                                variant=\"body2\" \n                                                sx={{ \n                                                    minWidth: 40,\n                                                    color: \n                                                        sprint.progress === 100 ? '#059669' :\n                                                        sprint.progress >= 70 ? '#3b82f6' :\n                                                        sprint.progress >= 30 ? '#f59e0b' : '#ef4444'\n                                                }}\n                                            >\n                                                {sprint.progress || 0}%\n                                            </Typography>\n                                        </Box>\n                                    </Box>\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\n                                        Start Date: {new Date(sprint.startDate).toLocaleDateString()}\n                                    </Typography>\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\n                                        End Date: {new Date(sprint.endDate).toLocaleDateString()}\n                                    </Typography>\n                                </CardContent>\n                                <CardActions>\n                                    <Button \n                                        size=\"small\" \n                                        startIcon={<VisibilityIcon />}\n                                        onClick={() => handleSprintClick(sprint)}\n                                    >\n                                        View Details\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        );\n    };\n\n    if (loading) {\n        return (\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    if (error) {\n        return (\n            <Box sx={{ p: 3 }}>\n                <Alert severity=\"error\">{error}</Alert>\n            </Box>\n        );\n    }\n\n    if (!project) {\n        return <Box sx={{ p: 2 }}>Project not found</Box>;\n    }\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Box sx={{ \n                display: 'flex', \n                flexDirection: 'column', \n                minHeight: '100vh', \n                backgroundColor: '#f8fafc'\n            }}>\n                {/* Navbar */}\n                <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1, backgroundColor: '#1e40af' }}>\n                    <Toolbar sx={{ minHeight: '64px !important' }}>\n                        <IconButton\n                            size=\"large\"\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            sx={{ mr: 2 }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        {renderBreadcrumbs()}\n                        <IconButton color=\"inherit\">\n                            <AccountCircleIcon />\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n\n                <Box sx={{ display: 'flex', pt: '64px' }}>\n                    {/* Sidebar */}\n                    <Box\n                        component=\"nav\"\n                        sx={{\n                            width: 240,\n                            flexShrink: 0\n                        }}\n                    >\n                        {renderSidebar()}\n                    </Box>\n\n                    {/* Main content */}\n                    <Box component=\"main\" sx={{ flexGrow: 1, p: 3, width: '100%' }}>\n                        <Paper sx={{ \n                            p: 3, \n                            borderRadius: 2,\n                            backgroundColor: '#fff',\n                            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)'\n                        }}>\n                            {renderContent()}\n                            \n                            {/* Add Epic Dialog */}\n                            <AddEpic\n                                open={openAddEpicDialog}\n                                onClose={handleCloseAddEpicDialog}\n                                projectId={id}\n                                onEpicAdded={handleEpicAdded}\n                            />\n\n                            {/* Epic Details Dialog */}\n                            {renderEpicDetails()}\n\n                            {/* Edit Epic Dialog */}\n                            <Dialog \n                                open={editEpicDialogOpen} \n                                onClose={handleCloseEditEpic}\n                                maxWidth=\"sm\"\n                                fullWidth\n                            >\n                                <DialogTitle>\n                                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                        <Typography variant=\"h6\">Edit Epic</Typography>\n                                        <IconButton\n                                            edge=\"end\"\n                                            color=\"inherit\"\n                                            onClick={handleCloseEditEpic}\n                                            aria-label=\"close\"\n                                        >\n                                            <CloseIcon />\n                                        </IconButton>\n                                    </Box>\n                                </DialogTitle>\n                                <DialogContent>\n                                    <Box sx={{ mt: 2 }}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Name\"\n                                            value={editedEpic?.name || ''}\n                                            onChange={(e) => handleEditEpicChange('name', e.target.value)}\n                                            sx={{ mb: 2 }}\n                                        />\n                                        <TextField\n                                            fullWidth\n                                            label=\"Description\"\n                                            value={editedEpic?.description || ''}\n                                            onChange={(e) => handleEditEpicChange('description', e.target.value)}\n                                            multiline\n                                            rows={4}\n                                            sx={{ mb: 2 }}\n                                        />\n                                        <FormControl fullWidth sx={{ mb: 2 }}>\n                                            <Select\n                                                value={editedEpic?.status || STATUS.TODO}\n                                                onChange={(e) => handleEditEpicChange('status', e.target.value)}\n                                                displayEmpty\n                                            >\n                                                <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                                <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                                <MenuItem value={STATUS.DONE}>Done</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                        <FormControl fullWidth sx={{ mb: 2 }}>\n                                            <Select\n                                                value={editedEpic?.priority || 'medium'}\n                                                onChange={(e) => handleEditEpicChange('priority', e.target.value)}\n                                                displayEmpty\n                                            >\n                                                <MenuItem value=\"low\">Low</MenuItem>\n                                                <MenuItem value=\"medium\">Medium</MenuItem>\n                                                <MenuItem value=\"high\">High</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </Box>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={handleCloseEditEpic}>Cancel</Button>\n                                    <Button \n                                        onClick={handleEditEpicSave}\n                                        variant=\"contained\"\n                                        sx={{ bgcolor: '#1e40af', '&:hover': { bgcolor: '#1e3a8a' } }}\n                                    >\n                                        Save Changes\n                                    </Button>\n                                </DialogActions>\n                            </Dialog>\n\n                            {/* Add Backlog Dialog */}\n                            <Dialog open={openAddBacklogDialog} onClose={() => setOpenAddBacklogDialog(false)} maxWidth=\"sm\" fullWidth>\n                                <AddBacklog \n                                    open={openAddBacklogDialog} \n                                    onClose={() => setOpenAddBacklogDialog(false)} \n                                    onBacklogCreated={handleBacklogCreated}\n                                />\n                            </Dialog>\n\n                            {/* Edit Backlog Dialog */}\n                            <Dialog \n                                open={editBacklogDialogOpen} \n                                onClose={() => setEditBacklogDialogOpen(false)}\n                                maxWidth=\"sm\"\n                                fullWidth\n                            >\n                                <DialogTitle>Edit Backlog</DialogTitle>\n                                <DialogContent>\n                                    <TextField\n                                        label=\"Backlog Name\"\n                                        value={editedBacklogName}\n                                        onChange={(e) => setEditedBacklogName(e.target.value)}\n                                        fullWidth\n                                        margin=\"normal\"\n                                    />\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={() => setEditBacklogDialogOpen(false)}>Cancel</Button>\n                                    <Button onClick={handleEditBacklogSave} variant=\"contained\" color=\"primary\">\n                                        Save\n                                    </Button>\n                                </DialogActions>\n                            </Dialog>\n                        </Paper>\n                    </Box>\n                </Box>\n            </Box>\n        </DndProvider>\n    );\n};\n\nexport default ProjectDetails;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/BacklogItems');\n};\n\nconst getBacklogItems = (BacklogsId) => {\n    return httpClient.get(`/BacklogItems/id/${BacklogsId}`);\n};\n\nconst create = (BacklogsData) => {\n    return httpClient.post('/BacklogItems', BacklogsData);\n};\n\nconst update = (BacklogsId, BacklogsData) => {\n    return httpClient.put(`/BacklogItems/${BacklogsId}`, BacklogsData);\n};\n\nconst deleteBacklogItems = (BacklogsId) => {\n    return httpClient.delete(`/BacklogItems/${BacklogsId}`);\n};\nconst findByUser= userId => {\n    return httpClient.get(`/BacklogItems/user/${userId}`);\n\n};\nexport default { getAll, create, deleteBacklogItems, getBacklogItems, update ,findByUser};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/Backlogs');\n};\n\nconst getById = id => {\n    return httpClient.get(`/Backlogs/id/${id}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/Backlogs/projectId/${projectId}`);\n};\nconst create = data => {\n    return httpClient.post('/Backlogs', data);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/Backlogs/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/Backlogs/${id}`);\n};\nconst findByUser= userId => {\n    return httpClient.get(`/Backlogs/user/${userId}`);\n    \n};\n\nexport default {\n    getAll,\n    getById,\n    getByProject,\n    create,\n    update,\n    remove,\n    findByUser\n};\n","import httpClient from '../http-common';\n\nconst getAll = (filters = {}) => {\n    return httpClient.get(\"/epics\", { params: filters });\n};\n\nconst getById = (epicId) => {\n    return httpClient.get(`/epics/${epicId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/epics/project/${projectId}`);\n};\n\nconst transformEpicData = (data) => {\n    const transformed = {\n        name: data.name?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original epic data:', data);\n    console.log('Transformed epic data:', transformed);\n    return transformed;\n};\n\nconst create = (epicData) => {\n    const transformedData = transformEpicData(epicData);\n    return httpClient.post(\"/epics\", transformedData);\n};\n\nconst update = (epicId, epicData) => {\n    const transformedData = transformEpicData(epicData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst remove = (epicId) => {\n    return httpClient.delete(`/epics/${epicId}`);\n};\n\nconst updateProgress = (epicId) => {\n    return httpClient.post(`/epics/${epicId}/progress`);\n};\n\nconst addWatcher = (epicId, userId) => {\n    return httpClient.post(`/epics/${epicId}/watchers`, { userId });\n};\n\nconst removeWatcher = (epicId, userId) => {\n    return httpClient.delete(`/epics/${epicId}/watchers`, { \n        data: { userId } \n    });\n};\n\nconst updateEpicStatus = (epicId, statusData) => {\n    const transformedData = transformEpicData(statusData);\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst EpicService = {\n    getAll,\n    getById,\n    getByProject,\n    create,\n    update,\n    remove,\n    updateProgress,\n    addWatcher,\n    removeWatcher,\n    updateEpicStatus\n};\n\nexport default EpicService;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/sprints');\n};\n\nconst getSprint = (sprintId) => {\n    return httpClient.get(`/sprints/id/${sprintId}`);\n};\n\nconst create = (sprintData) => {\n    return httpClient.post('/sprints', sprintData);\n};\n\nconst update = (sprintId, sprintData) => {\n    return httpClient.put(`/sprints/${sprintId}`, sprintData);\n};\n\nconst deleteSprint = (sprintId) => {\n    return httpClient.delete(`/sprints/${sprintId}`);\n};\n\nconst updateBacklogItems = (sprintId, backlogItemId) => {\n    console.log('Sending backlogItemId:', backlogItemId);\n    return httpClient.put(`/sprints/${sprintId}/backlogItems`, { backlogItemId });\n};\n\nconst getByProject = (projectId) => {\n    console.log('Fetching sprints for project:', projectId);\n    return httpClient.get(`/sprints/project/${projectId}`);\n};\n\nexport default { \n    getAll, \n    getSprint, \n    create, \n    update, \n    deleteSprint, \n    updateBacklogItems, \n    getByProject \n};\n"],"names":["_ref","open","onClose","onBacklogCreated","projects","setProjects","useState","allBacklogItems","setAllBacklogItems","filteredBacklogItems","setFilteredBacklogItems","loading","setLoading","error","setError","newBacklog","setNewBacklog","name","project","items","openBacklogItemDialog","setOpenBacklogItemDialog","newBacklogItem","setNewBacklogItem","title","description","type","status","useEffect","async","projectsResponse","backlogItemsResponse","Promise","all","ProjectService","getAll","backlogItemService","data","err","fetchData","_jsxs","Dialog","maxWidth","fullWidth","children","_jsx","DialogTitle","DialogContent","Alert","severity","TextField","label","margin","value","onChange","e","_objectSpread","target","FormControl","InputLabel","Select","projectId","prev","filteredItems","filter","item","handleProjectChange","displayEmpty","MenuItem","map","_id","projectName","Box","display","alignItems","justifyContent","sx","mt","Typography","variant","Button","startIcon","AddIcon","onClick","multiple","renderValue","selected","flexWrap","gap","_filteredBacklogItems","Chip","find","List","dense","itemId","_filteredBacklogItems2","ListItem","secondaryAction","IconButton","edge","id","handleRemoveItem","Delete","ListItemText","primary","DialogActions","backlogService","create","createdItem","initialProjectId","epic","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","success","setSuccess","issues","setIssues","epicData","setEpicData","priority","startDate","dueDate","color","labels","watchers","issuesResponse","projectService","issueService","console","loadData","Date","toISOString","split","handleChange","log","newData","Array","isArray","newValue","undefined","handleClose","getStatusColor","bg","getPriorityColor","fullScreen","onSubmit","_epicData$name","preventDefault","userId","localStorage","getItem","trim","_epicData$description","_epicData$status","_epicData$priority","_epicData$labels","_epicData$watchers","_epicData$issues","_response$data","_epicData$issues2","toLowerCase","owner","length","response","Object","keys","forEach","key","epicService","update","issueId","issueError","setTimeout","_err$response","_err$response$data","errorMessage","message","mb","Grid","container","spacing","xs","sm","size","helperText","required","multiline","rows","InputLabelProps","shrink","labelId","issue","i","concat","backgroundColor","fontWeight","MenuProps","PaperProps","style","maxHeight","py","minWidth","flexShrink","height","border","borderColor","disabled","includes","FormHelperText","p","CircularProgress","onEpicClick","onEditClick","onDeleteClick","isDragging","drag","useDrag","collect","monitor","Card","ref","opacity","cursor","borderRadius","boxShadow","CardContent","gutterBottom","bgcolor","noWrap","CardActions","width","Tooltip","stopPropagation","VisibilityIcon","fontSize","EditIcon","DeleteIcon","epics","onDrop","isOver","drop","useDrop","accept","Paper","flexDirection","component","ml","px","flexGrow","overflowY","EpicCard","ProjectDetails","useNavigate","useParams","setProject","setEpics","backlogs","setBacklogs","backlogItems","setBacklogItems","sprints","setSprints","selectedType","setSelectedType","selectedItem","setSelectedItem","selectedItemType","setSelectedItemType","openAddBacklogDialog","setOpenAddBacklogDialog","editBacklogDialogOpen","setEditBacklogDialogOpen","editedBacklogName","setEditedBacklogName","editedBacklogId","setEditedBacklogId","projectType","setProjectType","projectKey","setProjectKey","openAddEpicDialog","setOpenAddEpicDialog","epicViewMode","setEpicViewMode","epicsByStatus","setEpicsByStatus","selectedEpic","setSelectedEpic","epicDetailsOpen","setEpicDetailsOpen","editEpicDialogOpen","setEditEpicDialogOpen","editedEpic","setEditedEpic","addIssueDialogOpen","setAddIssueDialogOpen","STATUS","handleItemTypeSelect","projectResponse","getProjectById","backlogResponse","BacklogService","getByProject","epicResponse","EpicService","sprintResponse","SprintService","fetchProjectData","handleStorageChange","newProjectType","window","addEventListener","removeEventListener","grouped","handleEpicClick","handleBacklogClick","backlog","handleDrop","epicId","newStatus","epicToUpdate","updatedEpic","updatedEpics","newEpicsByStatus","originalEpics","calculateProgress","progressObj","total","Math","round","completed","renderKanbanBoard","overflowX","minHeight","StatusColumn","handleEditEpic","handleDeleteEpic","renderBacklogContent","TableContainer","elevation","borderBottom","Table","TableHead","TableRow","TableCell","align","TableBody","substring","textTransform","progress","thickness","toFixed","setSelectedBacklog","handleEditBacklog","delete","backlogId","handleDeleteBacklog","textAlign","renderEpicTableContent","handleEpicStatusChange","toLocaleDateString","updateEpicStatus","handleCloseAddEpicDialog","handleCloseEpicDetails","handleCloseEditEpic","confirm","handleEditEpicChange","field","handleSprintClick","sprint","handleBacklogItemStatusChange","itemToUpdate","updatedItem","effortEstimate","assignedTo","BacklogItemService","prevItems","projectBacklogItems","fetchBacklogItems","handleEditBacklogItem","handleDeleteBacklogItem","updateSprintProgress","updatedSprints","sprintBacklogItems","sprintId","calculateSprintProgress","DndProvider","backend","HTML5Backend","AppBar","position","zIndex","drawer","Toolbar","mr","MenuIcon","renderBreadcrumbs","pathSegments","icon","HomeIcon","path","ViewListIcon","AssignmentIcon","push","ViewModuleIcon","BugReportIcon","Breadcrumbs","separator","NavigateNextIcon","flex","segment","index","Link","RouterLink","to","textDecoration","AccountCircleIcon","pt","renderSidebar","sidebarItems","ListAltIcon","BugIcon","left","top","transition","background","Avatar","content","letterSpacing","renderContent","md","lg","LinearProgress","endDate","IssueList","AddEpic","onEpicAdded","renderEpicDetails","CloseIcon","whiteSpace","disablePadding","secondary","primaryTypographyProps","secondaryTypographyProps","SpeedIcon","bottom","right","CalendarTodayIcon","GroupIcon","assignees","assignee","avatar","borderTop","AddBacklog","selectedBacklog","httpClient","get","BacklogsData","post","deleteBacklogItems","BacklogsId","getBacklogItems","put","findByUser","getById","remove","transformEpicData","_data$name","_data$description","_data$status","transformed","filters","arguments","params","transformedData","updateProgress","addWatcher","removeWatcher","statusData","getSprint","sprintData","deleteSprint","updateBacklogItems","backlogItemId"],"sourceRoot":""}