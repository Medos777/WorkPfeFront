{"version":3,"file":"static/js/696.01e718a1.chunk.js","mappings":"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","sources":["Project/AiProjectCreation.jsx","service/AiService.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    TextField,\n    Typography,\n    Box,\n    CircularProgress,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Chip,\n    Stack\n} from '@mui/material';\nimport AiService from '../service/AiService';\n\nconst AiProjectCreation = ({ open, onClose, onGenerate }) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [formData, setFormData] = useState({\n        name: '',\n        description: '',\n        type: 'software',\n        industry: 'technology'\n    });\n\n    const projectTypes = [\n        'software',\n        'hardware',\n        'consulting',\n        'research',\n        'marketing',\n        'design'\n    ];\n\n    const industries = [\n        'technology',\n        'healthcare',\n        'finance',\n        'education',\n        'retail',\n        'manufacturing'\n    ];\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    };\n\n    const handleGenerate = async () => {\n        if (!formData.description.trim()) {\n            setError('Please provide a project description');\n            return;\n        }\n\n        setLoading(true);\n        setError('');\n\n        try {\n            const projectStructure = await AiService.generateProjectStructure(formData);\n            \n            // Format the data for the form\n            const formattedData = {\n                projectName: projectStructure.name,\n                projectDescription: projectStructure.description,\n                startDate: projectStructure.startDate,\n                endDate: projectStructure.endDate,\n                budget: projectStructure.budget,\n                costEstimate: projectStructure.costEstimate,\n                teams: projectStructure.recommendedTeams.map(team => team.teamId),\n                // Store additional data for display\n                aiMetadata: {\n                    keyFeatures: projectStructure.keyFeatures,\n                    teamStructure: projectStructure.teamStructure,\n                    recommendedTeams: projectStructure.recommendedTeams,\n                    initialSprints: projectStructure.initialSprints,\n                    keyMilestones: projectStructure.keyMilestones,\n                    riskAssessment: projectStructure.riskAssessment\n                }\n            };\n\n            onGenerate(formattedData);\n            onClose();\n        } catch (error) {\n            console.error('Error generating project:', error);\n            setError('Failed to generate project structure. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Generate Project with AI\n            </DialogTitle>\n            <DialogContent>\n                <Box sx={{ mt: 2 }}>\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                        Describe your project and let AI help you create a detailed project structure.\n                    </Typography>\n                    \n                    <TextField\n                        fullWidth\n                        margin=\"normal\"\n                        name=\"name\"\n                        label=\"Project Name\"\n                        value={formData.name}\n                        onChange={handleChange}\n                        required\n                    />\n\n                    <TextField\n                        fullWidth\n                        margin=\"normal\"\n                        name=\"description\"\n                        label=\"Project Description\"\n                        multiline\n                        rows={4}\n                        value={formData.description}\n                        onChange={handleChange}\n                        required\n                        helperText=\"Describe your project in detail, including goals, requirements, and any specific technologies or methodologies.\"\n                    />\n\n                    <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Project Type</InputLabel>\n                        <Select\n                            name=\"type\"\n                            value={formData.type}\n                            onChange={handleChange}\n                            label=\"Project Type\"\n                        >\n                            {projectTypes.map(type => (\n                                <MenuItem key={type} value={type}>\n                                    {type.charAt(0).toUpperCase() + type.slice(1)}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n\n                    <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Industry</InputLabel>\n                        <Select\n                            name=\"industry\"\n                            value={formData.industry}\n                            onChange={handleChange}\n                            label=\"Industry\"\n                        >\n                            {industries.map(industry => (\n                                <MenuItem key={industry} value={industry}>\n                                    {industry.charAt(0).toUpperCase() + industry.slice(1)}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n\n                    {error && (\n                        <Typography color=\"error\" variant=\"body2\" sx={{ mt: 2 }}>\n                            {error}\n                        </Typography>\n                    )}\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} disabled={loading}>\n                    Cancel\n                </Button>\n                <Button\n                    onClick={handleGenerate}\n                    variant=\"contained\"\n                    disabled={loading || !formData.description.trim()}\n                    startIcon={loading && <CircularProgress size={20} />}\n                >\n                    {loading ? 'Generating...' : 'Generate'}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default AiProjectCreation;\n","import httpClient from '../http-common';\nimport TeamService from './TeamService';\n\nconst API_KEY = 'AIzaSyDGiyo_nl9XPZ1FQbBZDEI4c6zRdXhJVrA';\n\nconst generateAiResponse = async (prompt, context = {}) => {\n    try {\n        const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-goog-api-key': API_KEY\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [{ text: prompt }]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 40,\n                    topP: 0.95,\n                }\n            })\n        });\n\n        const data = await response.json();\n        \n        // Check if there's an error in the response\n        if (data.error) {\n            throw new Error(data.error.message || 'Error from Gemini API');\n        }\n\n        // The correct path to the generated text in Gemini's response\n        if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n            return data.candidates[0].content.parts[0].text;\n        } else if (data.promptFeedback) {\n            throw new Error(data.promptFeedback.blockReason || 'Content blocked by Gemini API');\n        } else {\n            throw new Error('Unexpected response structure from Gemini API');\n        }\n    } catch (error) {\n        console.error('Error generating AI response:', error);\n        throw error;\n    }\n};\n\nconst calculateProjectMetrics = (description) => {\n    const complexityIndicators = {\n        high: ['complex', 'innovative', 'large-scale', 'enterprise', 'integration', 'AI', 'machine learning', 'blockchain'],\n        medium: ['database', 'api', 'authentication', 'dashboard', 'reporting', 'mobile'],\n        low: ['simple', 'basic', 'landing page', 'static', 'form']\n    };\n\n    let complexityScore = 1;\n    const descLower = description.toLowerCase();\n    \n    complexityIndicators.high.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.5;\n    });\n    complexityIndicators.medium.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.3;\n    });\n    complexityIndicators.low.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.1;\n    });\n\n    const baseMetrics = {\n        baseDuration: 3, // months\n        baseCost: 10000, // dollars per month\n        baseTeamSize: 3\n    };\n\n    return {\n        duration: Math.ceil(baseMetrics.baseDuration * complexityScore),\n        budget: Math.ceil(baseMetrics.baseCost * complexityScore * 1000) / 1000,\n        teamSize: Math.ceil(baseMetrics.baseTeamSize * complexityScore)\n    };\n};\n\nconst generateProjectStructure = async (requirements) => {\n    try {\n        const teamsResponse = await TeamService.getAll();\n        const availableTeams = teamsResponse.data;\n\n        const metrics = calculateProjectMetrics(requirements.description);\n\n        const prompt = `Generate a detailed project structure with the following requirements and constraints:\n\nProject Details:\n- Name: \"${requirements.name}\"\n- Description: \"${requirements.description}\"\n- Type: \"${requirements.type}\"\n- Industry: \"${requirements.industry}\"\n- Calculated Duration: ${metrics.duration} months\n- Estimated Budget: $${metrics.budget}\n- Recommended Team Size: ${metrics.teamSize} members\n\nAvailable Teams:\n${JSON.stringify(availableTeams.map(team => ({\n    id: team._id,\n    name: team.teamName,\n    skills: team.skills || []\n})))}\n\nGenerate a project structure in the following JSON format:\n{\n    \"name\": \"${requirements.name}\",\n    \"description\": \"Detailed project description\",\n    \"startDate\": \"YYYY-MM-DD\",\n    \"endDate\": \"YYYY-MM-DD\",\n    \"budget\": \"Estimated budget in numbers\",\n    \"costEstimate\": \"Estimated cost in numbers\",\n    \"keyFeatures\": [\"feature1\", \"feature2\", \"feature3\"],\n    \"teamStructure\": [\"role1\", \"role2\", \"role3\"],\n    \"recommendedTeams\": [\n        {\n            \"teamId\": \"id from available teams\",\n            \"teamName\": \"name from available teams\",\n            \"reason\": \"Why this team is recommended\"\n        }\n    ],\n    \"initialSprints\": [\n        {\n            \"name\": \"Sprint name\",\n            \"duration\": \"2 weeks\",\n            \"goals\": [\"goal1\", \"goal2\"]\n        }\n    ],\n    \"keyMilestones\": [\n        {\n            \"name\": \"Milestone name\",\n            \"date\": \"YYYY-MM-DD\",\n            \"deliverables\": [\"deliverable1\", \"deliverable2\"]\n        }\n    ],\n    \"riskAssessment\": [\n        {\n            \"risk\": \"Potential risk\",\n            \"impact\": \"High/Medium/Low\",\n            \"mitigation\": \"Mitigation strategy\"\n        }\n    ]\n}\n\nEnsure:\n1. Dates are in YYYY-MM-DD format\n2. Budget and cost estimates are realistic based on scope\n3. Team recommendations match project needs\n4. Features and milestones align with description\n5. Sprints cover the entire project duration\n6. Risk assessment is comprehensive`;\n\n        const response = await generateAiResponse(prompt, { type: 'project_creation' });\n        \n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n            throw new Error('No JSON object found in response');\n        }\n\n        const jsonStr = jsonMatch[0];\n        const cleanJson = jsonStr\n            .replace(/[\\u201C\\u201D]/g, '\"')\n            .replace(/[\\n\\r\\t]/g, ' ')\n            .replace(/,\\s*}/g, '}')\n            .replace(/,\\s*]/g, ']')\n            .replace(/([{,])\\s*([a-zA-Z0-9_]+)\\s*:/g, '$1\"$2\":')\n            .replace(/:\\s*'([^']*)'/g, ':\"$1\"')\n            .replace(/\\\\/g, '');\n\n        const parsedProject = JSON.parse(cleanJson);\n\n        const requiredFields = [\n            'name', 'description', 'startDate', 'endDate', \n            'budget', 'costEstimate', 'keyFeatures', 'teamStructure', \n            'recommendedTeams', 'initialSprints', 'keyMilestones', 'riskAssessment'\n        ];\n        \n        for (const field of requiredFields) {\n            if (!parsedProject[field]) {\n                throw new Error(`Missing required field: ${field}`);\n            }\n        }\n\n        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n        if (!dateRegex.test(parsedProject.startDate) || !dateRegex.test(parsedProject.endDate)) {\n            throw new Error('Invalid date format');\n        }\n\n        return parsedProject;\n    } catch (error) {\n        console.error('Error parsing AI response:', error);\n        \n        const metrics = calculateProjectMetrics(requirements.description);\n        \n        const today = new Date();\n        const endDate = new Date();\n        endDate.setMonth(endDate.getMonth() + metrics.duration);\n\n        return {\n            name: requirements.name,\n            description: requirements.description,\n            startDate: today.toISOString().split('T')[0],\n            endDate: endDate.toISOString().split('T')[0],\n            budget: metrics.budget.toString(),\n            costEstimate: (metrics.budget * 0.8).toString(), // 80% of budget as cost estimate\n            keyFeatures: ['Feature 1', 'Feature 2', 'Feature 3'],\n            teamStructure: ['Project Manager', 'Developer', 'Designer'],\n            recommendedTeams: [],\n            initialSprints: [\n                {\n                    name: 'Sprint 1: Planning',\n                    duration: '2 weeks',\n                    goals: ['Project Setup', 'Requirements Analysis']\n                }\n            ],\n            keyMilestones: [\n                {\n                    name: 'Project Kickoff',\n                    date: today.toISOString().split('T')[0],\n                    deliverables: ['Project Charter', 'Initial Timeline']\n                }\n            ],\n            riskAssessment: [\n                {\n                    risk: 'Timeline Risk',\n                    impact: 'Medium',\n                    mitigation: 'Regular progress monitoring'\n                }\n            ]\n        };\n    }\n};\n\nconst analyzeProject = async (projectData) => {\n    const prompt = `Provide a brief analysis of this project in bullet points:\n    - Project: ${projectData.name}\n    - Status: ${projectData.status}\n    - Timeline: ${projectData.startDate} to ${projectData.endDate}\n    \n    Focus on key insights and risks only.`;\n    return generateAiResponse(prompt, { type: 'project_analysis' });\n};\n\nconst suggestImprovements = async (projectData) => {\n    const prompt = `List 3 key improvements for this project:\n    - Project: ${projectData.name}\n    - Status: ${projectData.status}\n    - Challenges: ${projectData.challenges || 'None specified'}\n    \n    Provide specific, actionable suggestions.`;\n    return generateAiResponse(prompt, { type: 'improvement_suggestions' });\n};\n\nconst generateProjectTemplate = async (requirements) => {\n    const prompt = `Create a brief project template outline for:\n    - Industry: ${requirements.industry}\n    - Type: ${requirements.type}\n    - Team: ${requirements.teamSize}\n    - Duration: ${requirements.duration}\n    \n    List only essential components.`;\n    return generateAiResponse(prompt, { type: 'template_generation' });\n};\n\nconst estimateProjectTimeline = async (projectData) => {\n    const prompt = `Provide a quick timeline estimate for:\n    - Scope: ${projectData.description}\n    - Team: ${projectData.teamSize}\n    \n    List only major milestones and durations.`;\n    return generateAiResponse(prompt, { type: 'timeline_estimation' });\n};\n\nexport default {\n    generateAiResponse,\n    analyzeProject,\n    suggestImprovements,\n    generateProjectTemplate,\n    estimateProjectTimeline,\n    generateProjectStructure,\n};\n"],"names":["_ref","open","onClose","onGenerate","loading","setLoading","useState","error","setError","formData","setFormData","name","description","type","industry","handleChange","e","value","target","prev","_objectSpread","_jsxs","Dialog","maxWidth","fullWidth","children","_jsx","DialogTitle","DialogContent","Box","sx","mt","Typography","variant","color","gutterBottom","TextField","margin","label","onChange","required","multiline","rows","helperText","FormControl","InputLabel","Select","map","MenuItem","charAt","toUpperCase","slice","DialogActions","Button","onClick","disabled","async","trim","projectStructure","AiService","generateProjectStructure","formattedData","projectName","projectDescription","startDate","endDate","budget","costEstimate","teams","recommendedTeams","team","teamId","aiMetadata","keyFeatures","teamStructure","initialSprints","keyMilestones","riskAssessment","console","startIcon","CircularProgress","size","generateAiResponse","prompt","response","fetch","method","headers","body","JSON","stringify","contents","role","parts","text","generationConfig","temperature","topK","topP","data","json","Error","message","candidates","content","promptFeedback","blockReason","calculateProjectMetrics","complexityIndicators","high","medium","low","complexityScore","descLower","toLowerCase","forEach","indicator","includes","baseMetrics","duration","Math","ceil","teamSize","analyzeProject","concat","projectData","status","suggestImprovements","challenges","generateProjectTemplate","requirements","estimateProjectTimeline","availableTeams","TeamService","getAll","metrics","id","_id","teamName","skills","jsonMatch","match","cleanJson","replace","parsedProject","parse","requiredFields","field","dateRegex","test","today","Date","setMonth","getMonth","toISOString","split","toString","goals","date","deliverables","risk","impact","mitigation"],"sourceRoot":""}