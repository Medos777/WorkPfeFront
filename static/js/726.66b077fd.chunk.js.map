{"version":3,"file":"static/js/726.66b077fd.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ViewKanban.js","../node_modules/@mui/icons-material/esm/Checklist.js","../node_modules/@mui/icons-material/esm/ArrowBack.js","Project/AddProject.jsx","Project/AiProjectCreation.jsx","Project/ProjectForm.jsx","service/AiService.js","service/ProjectService.js","../node_modules/@mui/icons-material/esm/Speed.js","../node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js","../node_modules/@mui/material/CardActionArea/CardActionArea.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2M9 17H7V7h2zm4-5h-2V7h2zm4 3h-2V7h2z\"\n}), 'ViewKanban');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 7h-9v2h9zm0 8h-9v2h9zM5.54 11 2 7.46l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41zm0 8L2 15.46l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41z\"\n}), 'Checklist');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');","import React, { useRef, useState } from 'react';\nimport {\n    Box,\n    Button,\n    Container,\n    Typography,\n    Card,\n    CardContent,\n    Grid,\n    Stepper,\n    Step,\n    StepLabel,\n    styled,\n    Paper,\n    Divider,\n    CardActionArea,\n    useTheme,\n    alpha\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport ViewKanbanIcon from '@mui/icons-material/ViewKanban';\nimport SprintIcon from '@mui/icons-material/Speed';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport BusinessCenterIcon from '@mui/icons-material/BusinessCenter';\nimport CodeIcon from '@mui/icons-material/Code';\nimport ChecklistIcon from '@mui/icons-material/Checklist';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ProjectForm from './ProjectForm';\nimport AiProjectCreation from './AiProjectCreation';\nimport ProjectService from '../service/ProjectService';\n\nconst StyledStepLabel = styled(StepLabel)(({ theme }) => ({\n    '& .MuiStepLabel-label': {\n        color: theme.palette.text.secondary,\n        '&.Mui-active': {\n            color: theme.palette.primary.main,\n            fontWeight: 600\n        },\n        '&.Mui-completed': {\n            color: theme.palette.success.main\n        }\n    }\n}));\n\nconst ProjectTemplateCard = ({ title, description, icon: Icon, features, onClick, selected }) => {\n    const theme = useTheme();\n    \n    return (\n        <Card \n            sx={{ \n                height: '100%',\n                borderColor: selected ? theme.palette.primary.main : 'transparent',\n                borderWidth: 2,\n                borderStyle: 'solid',\n                transition: 'all 0.3s ease-in-out',\n                '&:hover': {\n                    borderColor: theme.palette.primary.main,\n                    transform: 'translateY(-4px)',\n                    boxShadow: theme.shadows[4]\n                }\n            }}\n        >\n            <CardActionArea \n                onClick={onClick}\n                sx={{ height: '100%', p: 2 }}\n            >\n                <Box \n                    sx={{ \n                        display: 'flex',\n                        alignItems: 'center',\n                        mb: 2,\n                        color: selected ? theme.palette.primary.main : theme.palette.text.primary\n                    }}\n                >\n                    <Icon sx={{ fontSize: 32, mr: 1 }} />\n                    <Typography variant=\"h6\" component=\"h3\">\n                        {title}\n                    </Typography>\n                </Box>\n                <Typography color=\"textSecondary\" paragraph>\n                    {description}\n                </Typography>\n                {features && (\n                    <>\n                        <Divider sx={{ my: 2 }} />\n                        <Box component=\"ul\" sx={{ pl: 2, m: 0 }}>\n                            {features.map((feature, index) => (\n                                <Typography \n                                    key={index} \n                                    component=\"li\" \n                                    variant=\"body2\" \n                                    color=\"textSecondary\"\n                                    sx={{ mb: 0.5 }}\n                                >\n                                    {feature}\n                                </Typography>\n                            ))}\n                        </Box>\n                    </>\n                )}\n            </CardActionArea>\n        </Card>\n    );\n};\n\nconst projectTemplates = [\n    {\n        id: 'Scrum',\n        title: 'Scrum',\n        description: 'Plan and track your agile projects with sprints, backlogs, and customizable workflows.',\n        icon: SprintIcon,\n        features: [\n            'Sprint planning and tracking',\n            'Backlog management',\n            'Burndown charts',\n            'Sprint reports'\n        ]\n    },\n    {\n        id: 'Kanban',\n        title: 'Kanban',\n        description: 'Visualize and manage your work with a flexible Kanban board.',\n        icon: ViewKanbanIcon,\n        features: [\n            'Customizable Kanban board',\n            'Work in progress limits',\n            'Continuous flow',\n            'Lead time tracking'\n        ]\n    },\n    {\n        id: 'simple',\n        title: 'Simple Project',\n        description: 'A straightforward project setup for basic task management and tracking.',\n        icon: ChecklistIcon,\n        features: [\n            'Basic task management',\n            'Simple workflow',\n            'Progress tracking',\n            'Team collaboration'\n        ]\n    }\n];\n\nconst steps = ['Select Project Type', 'Project Details'];\n\nconst AddProject = () => {\n    const navigate = useNavigate();\n    const formRef = useRef();\n    const [aiDialogOpen, setAiDialogOpen] = useState(false);\n    const [error, setError] = useState('');\n    const [currentSlide, setCurrentSlide] = useState(0);\n    const [projectType, setProjectType] = useState(null);\n    const theme = useTheme();\n\n    const handleSubmit = async (projectId, formData) => {\n        try {\n            await ProjectService.create({ ...formData, projectType });\n            navigate('/projects');\n        } catch (error) {\n            console.error('Error creating project:', error);\n            setError('Failed to create project');\n            throw error;\n        }\n    };\n\n    const handleTypeSelect = (type) => {\n        setProjectType(type);\n        setCurrentSlide(1);\n    };\n\n    const handleBack = () => {\n        setCurrentSlide(0);\n        setProjectType(null);\n    };\n\n    const handleAiGenerate = (generatedData) => {\n        if (formRef.current) {\n            formRef.current.updateFormData({\n                projectName: generatedData.projectName,\n                projectDescription: generatedData.projectDescription,\n                startDate: generatedData.startDate,\n                endDate: generatedData.endDate,\n                budget: generatedData.budget,\n                costEstimate: generatedData.costEstimate,\n                teams: generatedData.teams || []\n            });\n\n            if (generatedData.aiMetadata) {\n                localStorage.setItem('lastAiProjectMetadata', JSON.stringify(generatedData.aiMetadata));\n            }\n        }\n    };\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Box sx={{ mt: 4, mb: 4 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\n                    {currentSlide === 1 && (\n                        <Button\n                            startIcon={<ArrowBackIcon />}\n                            onClick={handleBack}\n                            sx={{ mr: 2 }}\n                        >\n                            Back to templates\n                        </Button>\n                    )}\n                    <Typography variant=\"h4\" component=\"h1\">\n                        Create New Project\n                    </Typography>\n                </Box>\n\n                <Stepper \n                    activeStep={currentSlide} \n                    sx={{ \n                        mb: 4,\n                        '& .MuiStepConnector-line': {\n                            borderColor: 'rgba(0, 0, 0, 0.12)'\n                        }\n                    }}\n                >\n                    {steps.map((label) => (\n                        <Step key={label}>\n                            <StyledStepLabel>{label}</StyledStepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n\n                {currentSlide === 0 ? (\n                    <Box>\n                        <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                            Choose a template\n                        </Typography>\n                        <Typography color=\"textSecondary\" sx={{ mb: 4 }}>\n                            Select a template that best fits your project needs. You can customize it further in the next step.\n                        </Typography>\n                        <Grid container spacing={3}>\n                            {projectTemplates.map((template) => (\n                                <Grid item xs={12} sm={6} md={4} key={template.id}>\n                                    <ProjectTemplateCard\n                                        {...template}\n                                        selected={projectType === template.id}\n                                        onClick={() => handleTypeSelect(template.id)}\n                                    />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Box>\n                ) : (\n                    <Paper \n                        elevation={1} \n                        sx={{ \n                            p: 3,\n                            backgroundColor: alpha(theme.palette.background.paper, 0.8),\n                            backdropFilter: 'blur(10px)'\n                        }}\n                    >\n                        <ProjectForm\n                            ref={formRef}\n                            onSubmit={handleSubmit}\n                            onAiClick={() => setAiDialogOpen(true)}\n                            initialProjectType={projectType}\n                        />\n\n                        <AiProjectCreation\n                            open={aiDialogOpen}\n                            onClose={() => setAiDialogOpen(false)}\n                            onGenerate={handleAiGenerate}\n                        />\n                    </Paper>\n                )}\n            </Box>\n        </Container>\n    );\n};\n\nexport default AddProject;\n","import React, { useState } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    TextField,\n    Typography,\n    Box,\n    CircularProgress,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Chip,\n    Stack\n} from '@mui/material';\nimport AiService from '../service/AiService';\n\nconst AiProjectCreation = ({ open, onClose, onGenerate }) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [formData, setFormData] = useState({\n        name: '',\n        description: '',\n        type: 'software',\n        industry: 'technology'\n    });\n\n    const projectTypes = [\n        'software',\n        'hardware',\n        'consulting',\n        'research',\n        'marketing',\n        'design'\n    ];\n\n    const industries = [\n        'technology',\n        'healthcare',\n        'finance',\n        'education',\n        'retail',\n        'manufacturing'\n    ];\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    };\n\n    const handleGenerate = async () => {\n        if (!formData.description.trim()) {\n            setError('Please provide a project description');\n            return;\n        }\n\n        setLoading(true);\n        setError('');\n\n        try {\n            const projectStructure = await AiService.generateProjectStructure(formData);\n            \n            // Format the data for the form\n            const formattedData = {\n                projectName: projectStructure.name,\n                projectDescription: projectStructure.description,\n                startDate: projectStructure.startDate,\n                endDate: projectStructure.endDate,\n                budget: projectStructure.budget,\n                costEstimate: projectStructure.costEstimate,\n                teams: projectStructure.recommendedTeams.map(team => team.teamId),\n                // Store additional data for display\n                aiMetadata: {\n                    keyFeatures: projectStructure.keyFeatures,\n                    teamStructure: projectStructure.teamStructure,\n                    recommendedTeams: projectStructure.recommendedTeams,\n                    initialSprints: projectStructure.initialSprints,\n                    keyMilestones: projectStructure.keyMilestones,\n                    riskAssessment: projectStructure.riskAssessment\n                }\n            };\n\n            onGenerate(formattedData);\n            onClose();\n        } catch (error) {\n            console.error('Error generating project:', error);\n            setError('Failed to generate project structure. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>\n                Generate Project with AI\n            </DialogTitle>\n            <DialogContent>\n                <Box sx={{ mt: 2 }}>\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                        Describe your project and let AI help you create a detailed project structure.\n                    </Typography>\n                    \n                    <TextField\n                        fullWidth\n                        margin=\"normal\"\n                        name=\"name\"\n                        label=\"Project Name\"\n                        value={formData.name}\n                        onChange={handleChange}\n                        required\n                    />\n\n                    <TextField\n                        fullWidth\n                        margin=\"normal\"\n                        name=\"description\"\n                        label=\"Project Description\"\n                        multiline\n                        rows={4}\n                        value={formData.description}\n                        onChange={handleChange}\n                        required\n                        helperText=\"Describe your project in detail, including goals, requirements, and any specific technologies or methodologies.\"\n                    />\n\n                    <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Project Type</InputLabel>\n                        <Select\n                            name=\"type\"\n                            value={formData.type}\n                            onChange={handleChange}\n                            label=\"Project Type\"\n                        >\n                            {projectTypes.map(type => (\n                                <MenuItem key={type} value={type}>\n                                    {type.charAt(0).toUpperCase() + type.slice(1)}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n\n                    <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Industry</InputLabel>\n                        <Select\n                            name=\"industry\"\n                            value={formData.industry}\n                            onChange={handleChange}\n                            label=\"Industry\"\n                        >\n                            {industries.map(industry => (\n                                <MenuItem key={industry} value={industry}>\n                                    {industry.charAt(0).toUpperCase() + industry.slice(1)}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n\n                    {error && (\n                        <Typography color=\"error\" variant=\"body2\" sx={{ mt: 2 }}>\n                            {error}\n                        </Typography>\n                    )}\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} disabled={loading}>\n                    Cancel\n                </Button>\n                <Button\n                    onClick={handleGenerate}\n                    variant=\"contained\"\n                    disabled={loading || !formData.description.trim()}\n                    startIcon={loading && <CircularProgress size={20} />}\n                >\n                    {loading ? 'Generating...' : 'Generate'}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default AiProjectCreation;\n","import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport {\n    Box,\n    Button,\n    Container,\n    CssBaseline,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    CircularProgress,\n    Alert,\n    Snackbar,\n    Tooltip,\n    Grid,\n    Paper,\n    Stepper,\n    Step,\n    StepLabel,\n    StepButton,\n    Slide,\n    Fade,\n    styled\n} from '@mui/material';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport TeamService from '../service/TeamService';\nimport UserService from '../service/UserService';\nimport ProjectService from '../service/ProjectService';\nimport { SmartToy, NavigateNext, NavigateBefore } from '@mui/icons-material';\n\nconst StyledStepLabel = styled(StepLabel)(({ theme }) => ({\n    '& .MuiStepLabel-label': {\n        color: theme.palette.text.secondary,\n        '&.Mui-active': {\n            color: theme.palette.primary.main,\n            fontWeight: 600\n        },\n        '&.Mui-completed': {\n            color: theme.palette.success.main\n        }\n    }\n}));\n\nconst FormSlide = ({ in: inProp, direction = 'left', children }) => (\n    <Slide direction={direction} in={inProp} mountOnEnter unmountOnExit>\n        <Fade in={inProp}>\n            <div>{children}</div>\n        </Fade>\n    </Slide>\n);\n\nconst steps = [\n    'Basic Information',\n    'Team & Leadership',\n    'Timeline & Budget'\n];\n\nconst ProjectForm = forwardRef(({ isEdit = false, projectData = null, onSubmit, onAiClick, initialProjectType }, ref) => {\n    const [formData, setFormData] = useState({\n        projectName: '',\n        projectDescription: '',\n        projectType: initialProjectType || '',\n        projectKey: '',\n        startDate: '',\n        endDate: '',\n        projectLead: '',\n        createdBy: localStorage.getItem('userId'),\n        teams: [],\n        budget: '',\n        costEstimate: '',\n    });\n    const [loading, setLoading] = useState(false);\n    const [teams, setTeams] = useState([]);\n    const [users, setUsers] = useState([]);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [initialLoad, setInitialLoad] = useState(true);\n    const [currentSlide, setCurrentSlide] = useState(0);\n\n    const navigate = useNavigate();\n    const { projectId } = useParams();\n    const currentUser = localStorage.getItem('userId');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [teamsResponse, usersResponse] = await Promise.all([\n                    TeamService.getAll(),\n                    UserService.getAll(),\n                ]);\n                setTeams(teamsResponse.data);\n                setUsers(usersResponse.data);\n\n                if (isEdit && projectId && initialLoad) {\n                    const projectResponse = await ProjectService.getProject(projectId);\n                    const projectData = projectResponse.data;\n                    \n                    // Convert user IDs to their corresponding emails\n                    const projectLeadUser = usersResponse.data.find(user => user._id === projectData.projectLead);\n                    const selectedTeams = projectData.teams.map(teamId => {\n                        const team = teamsResponse.data.find(t => t._id === teamId);\n                        return team ? team._id : null;\n                    }).filter(id => id !== null);\n\n                    setFormData({\n                        ...projectData,\n                        projectLead: projectLeadUser ? projectLeadUser._id : '',\n                        teams: selectedTeams\n                    });\n                    setInitialLoad(false);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setError('Failed to load required data');\n            }\n        };\n\n        fetchData();\n    }, [projectId, isEdit, initialLoad]);\n\n    // Expose method to update form data from parent\n    useImperativeHandle(ref, () => ({\n        updateFormData: (newData) => {\n            setFormData(currentData => ({\n                ...currentData,\n                ...newData\n            }));\n        }\n    }));\n\n    const generateProjectKey = (projectName, startDate) => {\n        if (!projectName || !startDate) return '';\n        const namePrefix = projectName.substring(0, 2).toUpperCase();\n        const date = new Date(startDate);\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const year = date.getFullYear().toString().slice(2);\n        return `${namePrefix}${month}${year}`;\n    };\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormData(prev => {\n            const newData = { ...prev, [name]: value };\n            \n            // Auto-generate project key when project name or start date changes\n            if ((name === 'projectName' || name === 'startDate') && (newData.projectName && newData.startDate)) {\n                newData.projectKey = generateProjectKey(newData.projectName, newData.startDate);\n            }\n            \n            return newData;\n        });\n    };\n\n    const handleTeamChange = (event) => {\n        const { value } = event.target;\n        setFormData((prevData) => ({\n            ...prevData,\n            teams: value,\n        }));\n    };\n\n    const validateForm = () => {\n        if (currentSlide === 0) {\n            if (!formData.projectName.trim()) return 'Project Name is required';\n            if (!formData.projectDescription.trim()) return 'Project Description is required';\n            if (!formData.projectType.trim()) return 'Project Type is required';\n        } else if (currentSlide === 1) {\n            if (!formData.projectLead) return 'Project Lead is required';\n        } else if (currentSlide === 2) {\n            if (!formData.startDate) return 'Start Date is required';\n            if (!formData.endDate) return 'End Date is required';\n            if (new Date(formData.endDate) <= new Date(formData.startDate))\n                return 'End Date must be after Start Date';\n            if (formData.budget && isNaN(Number(formData.budget)))\n                return 'Budget must be a valid number';\n            if (formData.costEstimate && isNaN(Number(formData.costEstimate)))\n                return 'Cost Estimate must be a valid number';\n        }\n        return null;\n    };\n\n    const handleNext = () => {\n        const validationError = validateForm();\n        if (validationError) {\n            setError(validationError);\n            return;\n        }\n        if (currentSlide < 2) {\n            setCurrentSlide(currentSlide + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        setError('');\n        if (currentSlide > 0) {\n            setCurrentSlide(currentSlide - 1);\n        }\n    };\n\n    const handleStepClick = (step) => {\n        const validationError = validateForm();\n        if (!validationError || step < currentSlide) {\n            setCurrentSlide(step);\n            setError('');\n        } else {\n            setError(validationError);\n        }\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setLoading(true);\n        setError('');\n        setSuccess('');\n\n        const validationError = validateForm();\n        if (validationError) {\n            setError(validationError);\n            setLoading(false);\n            return;\n        }\n\n        if (currentSlide === 2) {\n            try {\n                const payload = {\n                    ...formData,\n                    createdBy: currentUser,\n                };\n\n                if (onSubmit) {\n                    await onSubmit(projectId, payload);\n                    setSuccess(isEdit ? 'Project updated successfully!' : 'Project created successfully!');\n                    setTimeout(() => navigate('/projects'), 2000);\n                }\n            } catch (error) {\n                console.error('Failed to submit project', error);\n                let errorMessage = 'Failed to submit project. Please try again.';\n                if (error.response) {\n                    errorMessage = error.response.data.message || errorMessage;\n                } else if (error.request) {\n                    errorMessage = 'No response received from server. Please check your connection.';\n                } else {\n                    errorMessage = error.message || errorMessage;\n                }\n                setError(errorMessage);\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            handleNext();\n        }\n    };\n\n    if (loading && !initialLoad) {\n        return (\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"100vh\">\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ width: '100%', mb: 4 }}>\n            <Container component=\"main\" maxWidth=\"md\">\n                <Paper\n                    elevation={6}\n                    sx={{\n                        p: { xs: 2, sm: 4 },\n                        mt: 3,\n                        borderRadius: 2,\n                        position: 'relative',\n                        overflow: 'hidden'\n                    }}\n                >\n                    <Stepper \n                        activeStep={currentSlide} \n                        alternativeLabel \n                        nonLinear\n                        sx={{ \n                            mb: 4,\n                            '& .MuiStepConnector-line': {\n                                borderColor: 'rgba(0, 0, 0, 0.12)'\n                            }\n                        }}\n                    >\n                        {steps.map((label, index) => (\n                            <Step key={label} completed={index < currentSlide}>\n                                <StepButton onClick={() => handleStepClick(index)}>\n                                    <StyledStepLabel>{label}</StyledStepLabel>\n                                </StepButton>\n                            </Step>\n                        ))}\n                    </Stepper>\n\n                    {error && (\n                        <Fade in={!!error}>\n                            <Alert \n                                severity=\"error\" \n                                sx={{ mb: 3 }} \n                                onClose={() => setError('')}\n                            >\n                                {error}\n                            </Alert>\n                        </Fade>\n                    )}\n\n                    <Box component=\"form\" onSubmit={handleSubmit}>\n                        <FormSlide in={currentSlide === 0} direction=\"left\">\n                            <Grid container spacing={3} sx={{ display: currentSlide === 0 ? 'flex' : 'none' }}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        id=\"projectName\"\n                                        name=\"projectName\"\n                                        label=\"Project Name\"\n                                        value={formData.projectName}\n                                        onChange={handleChange}\n                                        autoFocus\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        multiline\n                                        rows={4}\n                                        id=\"projectDescription\"\n                                        name=\"projectDescription\"\n                                        label=\"Project Description\"\n                                        value={formData.projectDescription}\n                                        onChange={handleChange}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        id=\"projectKey\"\n                                        name=\"projectKey\"\n                                        label=\"Project Key\"\n                                        value={formData.projectKey}\n                                        disabled\n                                        helperText=\"Auto-generated from Project Name and Start Date\"\n                                    />\n                                </Grid>\n                            </Grid>\n                        </FormSlide>\n\n                        <FormSlide in={currentSlide === 1} direction={currentSlide > 1 ? 'left' : 'right'}>\n                            <Grid container spacing={3} sx={{ display: currentSlide === 1 ? 'flex' : 'none' }}>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"project-lead-label\">Project Lead *</InputLabel>\n                                        <Select\n                                            labelId=\"project-lead-label\"\n                                            id=\"projectLead\"\n                                            name=\"projectLead\"\n                                            value={formData.projectLead}\n                                            onChange={handleChange}\n                                            required\n                                            label=\"Project Lead\"\n                                        >\n                                            {users.map((user) => (\n                                                <MenuItem key={user._id} value={user._id}>\n                                                    {user.email}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"teams-label\">Teams</InputLabel>\n                                        <Select\n                                            labelId=\"teams-label\"\n                                            id=\"teams\"\n                                            name=\"teams\"\n                                            multiple\n                                            value={formData.teams}\n                                            onChange={handleTeamChange}\n                                            label=\"Teams\"\n                                        >\n                                            {teams.map((team) => {\n                                                const teamMembers = team.members\n                                                    .map(memberId => users.find(u => u._id === memberId))\n                                                    .filter(member => member)\n                                                    .map(member => member.email)\n                                                    .join(', ');\n                                                \n                                                return (\n                                                    <MenuItem key={team._id} value={team._id}>\n                                                        <Tooltip title={`Members: ${teamMembers}`} arrow placement=\"right\">\n                                                            <div>{team.name} ({teamMembers})</div>\n                                                        </Tooltip>\n                                                    </MenuItem>\n                                                );\n                                            })}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                            </Grid>\n                        </FormSlide>\n\n                        <FormSlide in={currentSlide === 2} direction=\"right\">\n                            <Grid container spacing={3} sx={{ display: currentSlide === 2 ? 'flex' : 'none' }}>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        id=\"startDate\"\n                                        name=\"startDate\"\n                                        label=\"Start Date\"\n                                        type=\"date\"\n                                        value={formData.startDate}\n                                        onChange={handleChange}\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        id=\"endDate\"\n                                        name=\"endDate\"\n                                        label=\"End Date\"\n                                        type=\"date\"\n                                        value={formData.endDate}\n                                        onChange={handleChange}\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        fullWidth\n                                        id=\"budget\"\n                                        name=\"budget\"\n                                        label=\"Budget\"\n                                        type=\"number\"\n                                        value={formData.budget}\n                                        onChange={handleChange}\n                                        InputProps={{\n                                            startAdornment: '$',\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        fullWidth\n                                        id=\"costEstimate\"\n                                        name=\"costEstimate\"\n                                        label=\"Cost Estimate\"\n                                        type=\"number\"\n                                        value={formData.costEstimate}\n                                        onChange={handleChange}\n                                        InputProps={{\n                                            startAdornment: '$',\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </FormSlide>\n\n                        <Box \n                            display=\"flex\" \n                            justifyContent=\"space-between\" \n                            mt={4}\n                            sx={{\n                                '& .MuiButton-root': {\n                                    minWidth: 100\n                                }\n                            }}\n                        >\n                            <Button\n                                variant=\"outlined\"\n                                onClick={handlePrevious}\n                                disabled={currentSlide === 0}\n                                startIcon={<NavigateBefore />}\n                            >\n                                Back\n                            </Button>\n                            <Box>\n                                {onAiClick && (\n                                    <Tooltip title=\"Generate project details using AI\">\n                                        <Button\n                                            onClick={onAiClick}\n                                            startIcon={<SmartToy />}\n                                            sx={{ mr: 2 }}\n                                        >\n                                            AI Assist\n                                        </Button>\n                                    </Tooltip>\n                                )}\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={currentSlide === 2 ? handleSubmit : handleNext}\n                                    endIcon={currentSlide < 2 ? <NavigateNext /> : null}\n                                    disabled={loading}\n                                >\n                                    {currentSlide === 2 ? (isEdit ? 'Update' : 'Create') : 'Next'}\n                                    {loading && <CircularProgress size={24} sx={{ ml: 1 }} />}\n                                </Button>\n                            </Box>\n                        </Box>\n                    </Box>\n                </Paper>\n\n                <Snackbar \n                    open={!!error || !!success} \n                    autoHideDuration={6000} \n                    onClose={() => {\n                        setError('');\n                        setSuccess('');\n                    }}\n                >\n                    <Alert \n                        onClose={() => {\n                            setError('');\n                            setSuccess('');\n                        }} \n                        severity={error ? 'error' : 'success'} \n                        sx={{ width: '100%' }}\n                    >\n                        {error || success}\n                    </Alert>\n                </Snackbar>\n            </Container>\n        </Box>\n    );\n});\n\nexport default ProjectForm;\n","import httpClient from '../http-common';\nimport TeamService from './TeamService';\n\nconst API_KEY = 'AIzaSyDGiyo_nl9XPZ1FQbBZDEI4c6zRdXhJVrA';\n\nconst generateAiResponse = async (prompt, context = {}) => {\n    try {\n        const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-goog-api-key': API_KEY\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [{ text: prompt }]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 40,\n                    topP: 0.95,\n                }\n            })\n        });\n\n        const data = await response.json();\n        \n        // Check if there's an error in the response\n        if (data.error) {\n            throw new Error(data.error.message || 'Error from Gemini API');\n        }\n\n        // The correct path to the generated text in Gemini's response\n        if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n            return data.candidates[0].content.parts[0].text;\n        } else if (data.promptFeedback) {\n            throw new Error(data.promptFeedback.blockReason || 'Content blocked by Gemini API');\n        } else {\n            throw new Error('Unexpected response structure from Gemini API');\n        }\n    } catch (error) {\n        console.error('Error generating AI response:', error);\n        throw error;\n    }\n};\n\nconst calculateProjectMetrics = (description) => {\n    const complexityIndicators = {\n        high: ['complex', 'innovative', 'large-scale', 'enterprise', 'integration', 'AI', 'machine learning', 'blockchain'],\n        medium: ['database', 'api', 'authentication', 'dashboard', 'reporting', 'mobile'],\n        low: ['simple', 'basic', 'landing page', 'static', 'form']\n    };\n\n    let complexityScore = 1;\n    const descLower = description.toLowerCase();\n    \n    complexityIndicators.high.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.5;\n    });\n    complexityIndicators.medium.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.3;\n    });\n    complexityIndicators.low.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.1;\n    });\n\n    const baseMetrics = {\n        baseDuration: 3, // months\n        baseCost: 10000, // dollars per month\n        baseTeamSize: 3\n    };\n\n    return {\n        duration: Math.ceil(baseMetrics.baseDuration * complexityScore),\n        budget: Math.ceil(baseMetrics.baseCost * complexityScore * 1000) / 1000,\n        teamSize: Math.ceil(baseMetrics.baseTeamSize * complexityScore)\n    };\n};\n\nconst generateProjectStructure = async (requirements) => {\n    try {\n        const teamsResponse = await TeamService.getAll();\n        const availableTeams = teamsResponse.data;\n\n        const metrics = calculateProjectMetrics(requirements.description);\n\n        const prompt = `Generate a detailed project structure with the following requirements and constraints:\n\nProject Details:\n- Name: \"${requirements.name}\"\n- Description: \"${requirements.description}\"\n- Type: \"${requirements.type}\"\n- Industry: \"${requirements.industry}\"\n- Calculated Duration: ${metrics.duration} months\n- Estimated Budget: $${metrics.budget}\n- Recommended Team Size: ${metrics.teamSize} members\n\nAvailable Teams:\n${JSON.stringify(availableTeams.map(team => ({\n    id: team._id,\n    name: team.teamName,\n    skills: team.skills || []\n})))}\n\nGenerate a project structure in the following JSON format:\n{\n    \"name\": \"${requirements.name}\",\n    \"description\": \"Detailed project description\",\n    \"startDate\": \"YYYY-MM-DD\",\n    \"endDate\": \"YYYY-MM-DD\",\n    \"budget\": \"Estimated budget in numbers\",\n    \"costEstimate\": \"Estimated cost in numbers\",\n    \"keyFeatures\": [\"feature1\", \"feature2\", \"feature3\"],\n    \"teamStructure\": [\"role1\", \"role2\", \"role3\"],\n    \"recommendedTeams\": [\n        {\n            \"teamId\": \"id from available teams\",\n            \"teamName\": \"name from available teams\",\n            \"reason\": \"Why this team is recommended\"\n        }\n    ],\n    \"initialSprints\": [\n        {\n            \"name\": \"Sprint name\",\n            \"duration\": \"2 weeks\",\n            \"goals\": [\"goal1\", \"goal2\"]\n        }\n    ],\n    \"keyMilestones\": [\n        {\n            \"name\": \"Milestone name\",\n            \"date\": \"YYYY-MM-DD\",\n            \"deliverables\": [\"deliverable1\", \"deliverable2\"]\n        }\n    ],\n    \"riskAssessment\": [\n        {\n            \"risk\": \"Potential risk\",\n            \"impact\": \"High/Medium/Low\",\n            \"mitigation\": \"Mitigation strategy\"\n        }\n    ]\n}\n\nEnsure:\n1. Dates are in YYYY-MM-DD format\n2. Budget and cost estimates are realistic based on scope\n3. Team recommendations match project needs\n4. Features and milestones align with description\n5. Sprints cover the entire project duration\n6. Risk assessment is comprehensive`;\n\n        const response = await generateAiResponse(prompt, { type: 'project_creation' });\n        \n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n            throw new Error('No JSON object found in response');\n        }\n\n        const jsonStr = jsonMatch[0];\n        const cleanJson = jsonStr\n            .replace(/[\\u201C\\u201D]/g, '\"')\n            .replace(/[\\n\\r\\t]/g, ' ')\n            .replace(/,\\s*}/g, '}')\n            .replace(/,\\s*]/g, ']')\n            .replace(/([{,])\\s*([a-zA-Z0-9_]+)\\s*:/g, '$1\"$2\":')\n            .replace(/:\\s*'([^']*)'/g, ':\"$1\"')\n            .replace(/\\\\/g, '');\n\n        const parsedProject = JSON.parse(cleanJson);\n\n        const requiredFields = [\n            'name', 'description', 'startDate', 'endDate', \n            'budget', 'costEstimate', 'keyFeatures', 'teamStructure', \n            'recommendedTeams', 'initialSprints', 'keyMilestones', 'riskAssessment'\n        ];\n        \n        for (const field of requiredFields) {\n            if (!parsedProject[field]) {\n                throw new Error(`Missing required field: ${field}`);\n            }\n        }\n\n        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n        if (!dateRegex.test(parsedProject.startDate) || !dateRegex.test(parsedProject.endDate)) {\n            throw new Error('Invalid date format');\n        }\n\n        return parsedProject;\n    } catch (error) {\n        console.error('Error parsing AI response:', error);\n        \n        const metrics = calculateProjectMetrics(requirements.description);\n        \n        const today = new Date();\n        const endDate = new Date();\n        endDate.setMonth(endDate.getMonth() + metrics.duration);\n\n        return {\n            name: requirements.name,\n            description: requirements.description,\n            startDate: today.toISOString().split('T')[0],\n            endDate: endDate.toISOString().split('T')[0],\n            budget: metrics.budget.toString(),\n            costEstimate: (metrics.budget * 0.8).toString(), // 80% of budget as cost estimate\n            keyFeatures: ['Feature 1', 'Feature 2', 'Feature 3'],\n            teamStructure: ['Project Manager', 'Developer', 'Designer'],\n            recommendedTeams: [],\n            initialSprints: [\n                {\n                    name: 'Sprint 1: Planning',\n                    duration: '2 weeks',\n                    goals: ['Project Setup', 'Requirements Analysis']\n                }\n            ],\n            keyMilestones: [\n                {\n                    name: 'Project Kickoff',\n                    date: today.toISOString().split('T')[0],\n                    deliverables: ['Project Charter', 'Initial Timeline']\n                }\n            ],\n            riskAssessment: [\n                {\n                    risk: 'Timeline Risk',\n                    impact: 'Medium',\n                    mitigation: 'Regular progress monitoring'\n                }\n            ]\n        };\n    }\n};\n\nconst analyzeProject = async (projectData) => {\n    const prompt = `Provide a brief analysis of this project in bullet points:\n    - Project: ${projectData.name}\n    - Status: ${projectData.status}\n    - Timeline: ${projectData.startDate} to ${projectData.endDate}\n    \n    Focus on key insights and risks only.`;\n    return generateAiResponse(prompt, { type: 'project_analysis' });\n};\n\nconst suggestImprovements = async (projectData) => {\n    const prompt = `List 3 key improvements for this project:\n    - Project: ${projectData.name}\n    - Status: ${projectData.status}\n    - Challenges: ${projectData.challenges || 'None specified'}\n    \n    Provide specific, actionable suggestions.`;\n    return generateAiResponse(prompt, { type: 'improvement_suggestions' });\n};\n\nconst generateProjectTemplate = async (requirements) => {\n    const prompt = `Create a brief project template outline for:\n    - Industry: ${requirements.industry}\n    - Type: ${requirements.type}\n    - Team: ${requirements.teamSize}\n    - Duration: ${requirements.duration}\n    \n    List only essential components.`;\n    return generateAiResponse(prompt, { type: 'template_generation' });\n};\n\nconst estimateProjectTimeline = async (projectData) => {\n    const prompt = `Provide a quick timeline estimate for:\n    - Scope: ${projectData.description}\n    - Team: ${projectData.teamSize}\n    \n    List only major milestones and durations.`;\n    return generateAiResponse(prompt, { type: 'timeline_estimation' });\n};\n\nexport default {\n    generateAiResponse,\n    analyzeProject,\n    suggestImprovements,\n    generateProjectTemplate,\n    estimateProjectTimeline,\n    generateProjectStructure,\n};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get(\"/projects\");\n};\n\nconst create = data => {\n    return httpClient.post(\"/projects\", data);\n};\n\nconst get = id => {\n    return httpClient.get(`/projects/${id}`);\n};\n\nconst getProjectById = id => {\n    return httpClient.get(`/projects/id/${id}`);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/projects/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/projects/${id}`);\n};\n\nconst removeAll = () => {\n    return httpClient.delete(`/projects`);\n};\n\nconst findByTitle = title => {\n    return httpClient.get(`/projects?title=${title}`);\n};\n\nconst getProjectProgress = projectId => {\n    return httpClient.get(`/projects/${projectId}/progress`);\n};\n\nconst getBudgetAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/budget-analytics`);\n};\n\nconst getTeamPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/team-performance`);\n};\n\nconst searchProjects = searchParams => {\n    return httpClient.post(`/projects/search`, searchParams);\n};\n\nconst getProjectMessages = projectId => {\n    return httpClient.get(`/projects/${projectId}/messages`);\n};\n\nconst sendProjectMessage = (projectId, message) => {\n    return httpClient.post(`/projects/${projectId}/messages`, message);\n};\n\nconst exportProjectReport = (projectId, format) => {\n    return httpClient.get(`/projects/${projectId}/export/${format}`);\n};\n\nconst scheduleReport = (projectId, scheduleData) => {\n    return httpClient.post(`/projects/${projectId}/schedule-report`, scheduleData);\n};\n\nconst getProjectAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/analytics`);\n};\n\nconst getProjectPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/performance`);\n};\nconst findByTeams = teamId => {\n    return httpClient.get(`/projects/teams/${teamId}`);\n    \n    \n};\n\n\nexport default {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByTitle,\n    getProjectProgress,\n    getBudgetAnalytics,\n    getTeamPerformance,\n    searchProjects,\n    getProjectMessages,\n    sendProjectMessage,\n    exportProjectReport,\n    scheduleReport,\n    getProjectAnalytics,\n    getProjectById,\n    findByTeams\n};\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m20.38 8.57-1.23 1.85a8 8 0 0 1-.22 7.58H5.07A8 8 0 0 1 15.58 6.85l1.85-1.23A10 10 0 0 0 3.35 19a2 2 0 0 0 1.72 1h13.85a2 2 0 0 0 1.74-1 10 10 0 0 0-.27-10.44zm-9.79 6.84a2 2 0 0 0 2.83 0l5.66-8.49-8.49 5.66a2 2 0 0 0 0 2.83\"\n}), 'Speed');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardActionAreaUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActionArea', slot);\n}\nconst cardActionAreaClasses = generateUtilityClasses('MuiCardActionArea', ['root', 'focusVisible', 'focusHighlight']);\nexport default cardActionAreaClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport cardActionAreaClasses, { getCardActionAreaUtilityClass } from \"./cardActionAreaClasses.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    focusHighlight: ['focusHighlight']\n  };\n  return composeClasses(slots, getCardActionAreaUtilityClass, classes);\n};\nconst CardActionAreaRoot = styled(ButtonBase, {\n  name: 'MuiCardActionArea',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'block',\n  textAlign: 'inherit',\n  borderRadius: 'inherit',\n  // for Safari to work https://github.com/mui/material-ui/issues/36285.\n  width: '100%',\n  [`&:hover .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.hoverOpacity,\n    '@media (hover: none)': {\n      opacity: 0\n    }\n  },\n  [`&.${cardActionAreaClasses.focusVisible} .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.focusOpacity\n  }\n})));\nconst CardActionAreaFocusHighlight = styled('span', {\n  name: 'MuiCardActionArea',\n  slot: 'FocusHighlight',\n  overridesResolver: (props, styles) => styles.focusHighlight\n})(memoTheme(({\n  theme\n}) => ({\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  borderRadius: 'inherit',\n  opacity: 0,\n  backgroundColor: 'currentcolor',\n  transition: theme.transitions.create('opacity', {\n    duration: theme.transitions.duration.short\n  })\n})));\nconst CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardActionArea'\n  });\n  const {\n    children,\n    className,\n    focusVisibleClassName,\n    ...other\n  } = props;\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(CardActionAreaRoot, {\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref,\n    ownerState: ownerState,\n    ...other,\n    children: [children, /*#__PURE__*/_jsx(CardActionAreaFocusHighlight, {\n      className: classes.focusHighlight,\n      ownerState: ownerState\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActionArea;"],"names":["createSvgIcon","_jsx","d","StyledStepLabel","styled","StepLabel","_ref","theme","color","palette","text","secondary","primary","main","fontWeight","success","ProjectTemplateCard","_ref2","title","description","icon","Icon","features","onClick","selected","useTheme","Card","sx","height","borderColor","borderWidth","borderStyle","transition","transform","boxShadow","shadows","children","_jsxs","CardActionArea","p","Box","display","alignItems","mb","fontSize","mr","Typography","variant","component","paragraph","_Fragment","Divider","my","pl","m","map","feature","index","projectTemplates","id","SprintIcon","ViewKanbanIcon","ChecklistIcon","steps","AddProject","navigate","useNavigate","formRef","useRef","aiDialogOpen","setAiDialogOpen","useState","error","setError","currentSlide","setCurrentSlide","projectType","setProjectType","Container","maxWidth","mt","Button","startIcon","ArrowBackIcon","handleBack","Stepper","activeStep","label","Step","Grid","container","spacing","template","item","xs","sm","md","_objectSpread","handleTypeSelect","type","Paper","elevation","backgroundColor","alpha","background","paper","backdropFilter","ProjectForm","ref","onSubmit","async","projectId","formData","ProjectService","create","console","onAiClick","initialProjectType","AiProjectCreation","open","onClose","onGenerate","generatedData","current","updateFormData","projectName","projectDescription","startDate","endDate","budget","costEstimate","teams","aiMetadata","localStorage","setItem","JSON","stringify","loading","setLoading","setFormData","name","industry","handleChange","e","value","target","prev","Dialog","fullWidth","DialogTitle","DialogContent","gutterBottom","TextField","margin","onChange","required","multiline","rows","helperText","FormControl","InputLabel","Select","MenuItem","charAt","toUpperCase","slice","DialogActions","disabled","trim","projectStructure","AiService","generateProjectStructure","formattedData","recommendedTeams","team","teamId","keyFeatures","teamStructure","initialSprints","keyMilestones","riskAssessment","CircularProgress","size","FormSlide","in","inProp","direction","Slide","mountOnEnter","unmountOnExit","Fade","forwardRef","_ref3","isEdit","projectData","projectKey","projectLead","createdBy","getItem","setTeams","users","setUsers","setSuccess","initialLoad","setInitialLoad","useParams","currentUser","useEffect","teamsResponse","usersResponse","Promise","all","TeamService","getAll","UserService","data","getProject","projectLeadUser","find","user","_id","selectedTeams","t","filter","fetchData","useImperativeHandle","newData","currentData","event","generateProjectKey","namePrefix","substring","date","Date","month","getMonth","toString","padStart","year","getFullYear","concat","validateForm","isNaN","Number","handleNext","validationError","handleSubmit","preventDefault","payload","setTimeout","errorMessage","response","message","request","justifyContent","minHeight","width","borderRadius","position","overflow","alternativeLabel","nonLinear","completed","StepButton","step","handleStepClick","Alert","severity","autoFocus","labelId","email","multiple","prevData","teamMembers","members","memberId","u","member","join","Tooltip","arrow","placement","InputLabelProps","shrink","InputProps","startAdornment","minWidth","handlePrevious","NavigateBefore","SmartToy","endIcon","NavigateNext","ml","Snackbar","autoHideDuration","generateAiResponse","prompt","fetch","method","headers","body","contents","role","parts","generationConfig","temperature","topK","topP","json","Error","candidates","content","promptFeedback","blockReason","calculateProjectMetrics","complexityIndicators","high","medium","low","complexityScore","descLower","toLowerCase","forEach","indicator","includes","baseMetrics","duration","Math","ceil","teamSize","analyzeProject","status","suggestImprovements","challenges","generateProjectTemplate","requirements","estimateProjectTimeline","availableTeams","metrics","teamName","skills","jsonMatch","match","cleanJson","replace","parsedProject","parse","requiredFields","field","dateRegex","test","today","setMonth","toISOString","split","goals","deliverables","risk","impact","mitigation","httpClient","get","post","update","put","remove","delete","removeAll","findByTitle","getProjectProgress","getBudgetAnalytics","getTeamPerformance","searchProjects","searchParams","getProjectMessages","sendProjectMessage","exportProjectReport","format","scheduleReport","scheduleData","getProjectAnalytics","getProjectById","findByTeams","getCardActionAreaUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionAreaRoot","ButtonBase","overridesResolver","props","styles","root","memoTheme","textAlign","cardActionAreaClasses","focusHighlight","opacity","vars","action","hoverOpacity","focusVisible","focusOpacity","CardActionAreaFocusHighlight","pointerEvents","top","right","bottom","left","transitions","short","React","inProps","useDefaultProps","className","focusVisibleClassName","other","_objectWithoutProperties","ownerState","classes","composeClasses","useUtilityClasses","clsx"],"sourceRoot":""}