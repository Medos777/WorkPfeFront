{"version":3,"file":"static/js/903.3f64c514.chunk.js","mappings":"0UAmBA,MAsPA,EAtPgBA,IAA6D,IAA5D,KAAEC,EAAI,QAAEC,EAASC,UAAWC,EAAgB,OAAEC,GAAQL,EACnE,MAAOM,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,KAClCO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,CACrCS,KAAM,GACNC,YAAa,GACbC,QAASf,GAAoB,GAC7BgB,OAAQ,QACRC,SAAU,SACVC,UAAW,GACXC,QAAS,GACTC,OAAQ,MAGZC,EAAAA,EAAAA,YAAU,KACNC,GAAc,GACf,KAEHD,EAAAA,EAAAA,YAAU,KACFrB,GACAY,GAAYW,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAER,QAASf,KAC7C,GACD,CAACA,IAEJ,MAAMsB,EAAeG,UACjB,IACI,MAAMC,QAAiBC,EAAAA,EAAeC,SACtClB,EAAYgB,EAASG,KACzB,CAAE,MAAOC,GACLC,QAAQ1B,MAAM,0BAA2ByB,GACzCxB,EAAS,0BACb,GAGE0B,EAAgBC,IAClB,MAAM,KAAEpB,EAAI,MAAEqB,GAAUD,EAAEE,OACpBC,EAAoB,YAATvB,EAAsBqB,GAAS,GAAiB,KAAVA,OAAeG,EAAYH,EAClFH,QAAQO,IAAI,YAADC,OAAa1B,EAAI,QAAQuB,GACpCxB,GAAYW,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTD,GAAI,IACP,CAACV,GAAOuB,KACT,EAyDDI,EAAcA,KAChB5B,EAAY,CACRC,KAAM,GACNC,YAAa,GACbC,QAASf,GAAoB,GAC7BgB,OAAQ,QACRC,SAAU,SACVC,UAAW,GACXC,QAAS,GACTC,OAAQ,KAEZd,EAAS,IACTR,GAAS,EAGb,OACI2C,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACH7C,KAAMA,EACNC,QAAS0C,EACTG,SAAS,KACTC,WAAS,EAAAC,SAAA,EAETC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAAAF,SAAC,qBACbJ,EAAAA,EAAAA,MAAA,QAAMO,SAjEOvB,UACjBQ,EAAEgB,iBACF3C,EAAS,IACTE,EAAW,IACXL,GAAW,GAEX,IAEI,MAAM0B,EAAO,CACThB,KAAMF,EAASE,KACfC,YAAaH,EAASG,YACtBE,OAAQL,EAASK,QAAU,QAC3BC,SAAUN,EAASM,UAAY,SAC/BiC,MAAOjD,EACPc,QAASJ,EAASI,SAAW,MAI7BJ,EAASO,YACTW,EAAKX,UAAYP,EAASO,WAE1BP,EAASQ,UACTU,EAAKV,QAAUR,EAASQ,SAG5BY,QAAQO,IAAI,+BAAgC3B,GAC5CoB,QAAQO,IAAI,6BAA8BT,GAC1C,MAAMH,QAAiByB,EAAAA,EAAYC,OAAOvB,GAC1CE,QAAQO,IAAI,6BAA8BZ,GAC1C5B,GAAQ,GAGRU,EAAW,6BACf,CAAE,MAAOsB,GAAM,IAADuB,EAAAC,EACV,MAAMC,GAA2B,QAAZF,EAAAvB,EAAIJ,gBAAQ,IAAA2B,GAAM,QAANC,EAAZD,EAAcxB,YAAI,IAAAyB,OAAN,EAAZA,EAAoBE,UAAW,wBACpDlD,EAASiD,GACTxB,QAAQ1B,MAAM,uBAAwByB,EAC1C,CAAC,QACG3B,GAAW,EACf,GA0BiC0C,SAAA,EACzBJ,EAAAA,EAAAA,MAACgB,EAAAA,EAAa,CAAAZ,SAAA,CACTxC,IACGyC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACC,SAAS,QAAQC,GAAI,CAAEC,GAAI,GAAIhB,SACjCxC,IAGRE,IACGuC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACC,SAAS,UAAUC,GAAI,CAAEC,GAAI,GAAIhB,SACnCtC,KAITkC,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQC,cAAe,SAAUC,IAAK,GAAIpB,SAAA,EAC1DC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACNrD,KAAK,OACLsD,MAAM,YACNjC,MAAOvB,EAASE,KAChBuD,SAAUpC,EACVqC,UAAQ,EACRzB,WAAS,KAGbE,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACNrD,KAAK,cACLsD,MAAM,cACNjC,MAAOvB,EAASG,YAChBsD,SAAUpC,EACVsC,WAAS,EACTC,KAAM,EACN3B,WAAS,KAGbH,EAAAA,EAAAA,MAAC+B,EAAAA,EAAW,CAAC5B,WAAS,EAAAC,SAAA,EAClBC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAAA5B,SAAC,wBACZJ,EAAAA,EAAAA,MAACiC,EAAAA,EAAM,CACH7D,KAAK,UACLqB,MAAOvB,EAASI,SAAW,GAC3BqD,SAAUpC,EACVmC,MAAM,qBAAoBtB,SAAA,EAE1BC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,GAAEW,UACdC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WAEPpC,EAASmE,KAAK7D,IACX+B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAAmBzC,MAAOnB,EAAQ8D,IAAIhC,SAC1C9B,EAAQ+D,aADE/D,EAAQ8D,cAOnCpC,EAAAA,EAAAA,MAAC+B,EAAAA,EAAW,CAAC5B,WAAS,EAAAC,SAAA,EAClBC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAAA5B,SAAC,YACZJ,EAAAA,EAAAA,MAACiC,EAAAA,EAAM,CACH7D,KAAK,SACLqB,MAAOvB,EAASK,OAChBoD,SAAUpC,EACVmC,MAAM,SAAQtB,SAAA,EAEdC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,QAAOW,SAAC,WACxBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,cAAaW,SAAC,iBAC9BC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,OAAMW,SAAC,gBAI/BJ,EAAAA,EAAAA,MAAC+B,EAAAA,EAAW,CAAC5B,WAAS,EAAAC,SAAA,EAClBC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAAA5B,SAAC,cACZJ,EAAAA,EAAAA,MAACiC,EAAAA,EAAM,CACH7D,KAAK,WACLqB,MAAOvB,EAASM,SAChBmD,SAAUpC,EACVmC,MAAM,WAAUtB,SAAA,EAEhBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,UAASW,SAAC,aAC1BC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,OAAMW,SAAC,UACvBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,SAAQW,SAAC,YACzBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,MAAKW,SAAC,SACtBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,SAAQW,SAAC,kBAIjCC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACNrD,KAAK,YACLsD,MAAM,aACNY,KAAK,OACL7C,MAAOvB,EAASO,UAChBkD,SAAUpC,EACVY,WAAS,EACToC,gBAAiB,CAAEC,QAAQ,MAG/BnC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACNrD,KAAK,UACLsD,MAAM,WACNY,KAAK,OACL7C,MAAOvB,EAASQ,QAChBiD,SAAUpC,EACVY,WAAS,EACToC,gBAAiB,CAAEC,QAAQ,YAKvCxC,EAAAA,EAAAA,MAACyC,EAAAA,EAAa,CAAArC,SAAA,EACVC,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,CAACC,QAAS5C,EAAYK,SAAC,YAC9BC,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,CACHJ,KAAK,SACLM,QAAQ,YACRC,SAAUpF,EACV0D,GAAI,CACA2B,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,YAChC1C,SAED3C,GAAU4C,EAAAA,EAAAA,KAAC0C,EAAAA,EAAgB,CAACC,KAAM,KAAS,wBAInD,C,6kBClNjB,MAAMC,EACI,OAGJC,EAAW/F,IAAuB,IAAtB,KAAEgG,EAAI,OAAEC,GAAQjG,EAC9B,OAAO,WAAEkG,GAAcC,IAAQC,EAAAA,EAAAA,IAAQ,MACnCjB,KAAMW,EACNO,KAAM,CAAEC,GAAIN,EAAKf,IAAK7D,OAAQ4E,EAAK5E,QACnCmF,QAAUC,IAAO,CACbN,WAAYM,EAAQN,mBAI5B,OACIhD,EAAAA,EAAAA,KAAA,OACIuD,IAAKN,EACLO,MAAO,CACHC,QAAST,EAAa,GAAM,EAC5BU,OAAQ,QACV3D,UAEFJ,EAAAA,EAAAA,MAACgE,EAAAA,EAAI,CAAC7C,GAAI,CACN,UAAW,CACP8C,UAAW,6BACXC,UAAW,mBACXC,WAAY,kBAElB/D,SAAA,EACEJ,EAAAA,EAAAA,MAACoE,EAAAA,EAAW,CAAAhE,SAAA,EACRC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,KAAK0B,cAAY,EAAAlE,SAChC+C,EAAK/E,QAEViC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQ2B,MAAM,iBAAiBpD,GAAI,CAAEC,GAAI,GAAIhB,SAC5D+C,EAAK9E,eAEV2B,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQE,IAAK,EAAGgD,WAAY,SAAUpD,GAAI,GAAIhB,SAAA,EAC9DC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAW,CAACiB,KAAK,QAAQ7B,GAAI,CAAEsD,SAAU,KAAMrE,UAC5CJ,EAAAA,EAAAA,MAACiC,EAAAA,EAAM,CACHxC,MAAO0D,EAAK5E,QAAU,QACtBoD,SAAWnC,GAAMkF,mBAAmBvB,EAAKf,IAAK5C,EAAEE,OAAOD,OACvD0B,GAAI,CAAEwD,OAAQ,IAAKvE,SAAA,EAEnBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,QAAOW,SAAC,WACxBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,cAAaW,SAAC,iBAC9BC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAM,OAAMW,SAAC,oBAG/BC,EAAAA,EAAAA,KAACuE,EAAAA,EAAI,CACDlD,MAAOyB,EAAK3E,SACZwE,KAAK,QACLuB,MACsB,SAAlBpB,EAAK3E,SAAsB,QACT,WAAlB2E,EAAK3E,SAAwB,UAAY,OAE7CoE,QAAQ,gBAGfO,EAAK1E,YACFuB,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CAACzB,QAAQ,UAAU2B,MAAM,iBAAiBjD,QAAQ,QAAOlB,SAAA,CAAC,UACzD,IAAIyE,KAAK1B,EAAK1E,WAAWqG,wBAGxC3B,EAAKzE,UACFsB,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CAACzB,QAAQ,UAAU2B,MAAM,iBAAiBjD,QAAQ,QAAOlB,SAAA,CAAC,QAC3D,IAAIyE,KAAK1B,EAAKzE,SAASoG,4BAIzCzE,EAAAA,EAAAA,KAAC0E,EAAAA,EAAW,CAAA3E,UACRC,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,CAACM,KAAK,QAAQL,QAASA,IAAMqC,gBAAgB7B,EAAM,QAAQ/C,SAAC,uBAKzE,EAIR6E,GAAeC,IAAuC,IAAtC,OAAE3G,EAAM,MAAE4G,EAAK,MAAEC,EAAK,OAAEhC,GAAQ8B,EAClD,OAAO,OAAEG,GAAUC,IAAQC,EAAAA,EAAAA,IAAQ,MAC/BC,OAAQvC,EACRqC,KAAO9B,GAASJ,EAAOI,EAAKC,GAAIlF,GAChCmF,QAAUC,IAAO,CACb0B,OAAQ1B,EAAQ0B,eAIxB,OACIrF,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CACAuC,IAAK0B,EACLnE,GAAI,CACAsE,MAAO,IACPhB,SAAU,IACViB,QAASL,EAAS,eAAiB,mBACnCM,aAAc,EACdC,EAAG,EACHtE,QAAS,OACTC,cAAe,SACf4C,WAAY,8BACd/D,SAAA,EAEFJ,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CAACzB,QAAQ,KAAKzB,GAAI,CAAEC,GAAI,GAAIhB,SAAA,CAClC+E,EAAM,MAAQ,OAALC,QAAK,IAALA,OAAK,EAALA,EAAOS,SAAU,EAAE,QAEjCxF,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CACL2E,UAAW,IACXxE,QAAS,OACTC,cAAe,SACfC,IAAK,GACPpB,SACQ,OAALgF,QAAK,IAALA,OAAK,EAALA,EAAOjD,KAAI,CAACgB,EAAM4C,KACf1F,EAAAA,EAAAA,KAAC6C,EAAQ,CAELC,KAAMA,EACN4C,MAAOA,GAFF5C,EAAKf,WAMpB,EAqjCd,GAjjCuB4D,MACFC,EAAAA,EAAAA,MAAjB,MACM,GAAExC,IAAOyC,EAAAA,EAAAA,MACR5H,EAAS6H,IAAcxI,EAAAA,EAAAA,UAAS,OAChCyI,EAASC,IAAc1I,EAAAA,EAAAA,UAAS,KAChCyH,EAAOkB,IAAY3I,EAAAA,EAAAA,UAAS,KAC5B4I,EAAUC,IAAe7I,EAAAA,EAAAA,UAAS,KAClCF,EAASC,KAAcC,EAAAA,EAAAA,WAAS,IAChCC,GAAOC,KAAYF,EAAAA,EAAAA,UAAS,OAC5B8I,GAAcC,KAAmB/I,EAAAA,EAAAA,UAAS,OAC1CgJ,GAAcC,KAAmBjJ,EAAAA,EAAAA,UAAS,OAC1CkJ,GAAWC,KAAgBnJ,EAAAA,EAAAA,WAAS,IACpCoJ,GAAaC,KAAkBrJ,EAAAA,EAAAA,UAASsJ,aAAaC,QAAQ,iBAC7DC,GAAYC,KAAiBzJ,EAAAA,EAAAA,UAAS,KACtC0J,GAAmBC,KAAwB3J,EAAAA,EAAAA,WAAS,IACpD4J,GAAcC,KAAmB7J,EAAAA,EAAAA,UAAS,UAC1C8J,GAAeC,KAAoB/J,EAAAA,EAAAA,UAAS,CAC/C,QAAS,GACT,cAAe,GACf,KAAQ,MAELgK,GAAUC,KAAejK,EAAAA,EAAAA,UAAS,OAClCkK,GAAYC,KAAiBnK,EAAAA,EAAAA,UAAS,MAGvCoK,GACI,QADJA,GAEW,cAFXA,GAGI,QASVnJ,EAAAA,EAAAA,YAAU,KA0BF6E,GAzBqBzE,WACrBtB,IAAW,GACX,IACI,MAAMsK,QAAwBC,EAAAA,EAAeC,eAAezE,GAC5D0C,EAAW6B,EAAgB5I,MAC3BgI,GAAcY,EAAgB5I,KAAK+I,KAEnC,MAAMC,QAAqBC,EAAAA,EAAYC,aAAa7E,GACpDnE,QAAQO,IAAI,yBAA0BuI,EAAahJ,MACnDkH,EAAS8B,EAAahJ,MAEtB,MAAMmJ,QAAuBC,EAAAA,EAAcF,aAAa7E,GACxD4C,EAAWkC,EAAenJ,MAE1B,MAAMqJ,QAAwBC,EAAAA,EAAeJ,aAAa7E,GAC1D+C,EAAYiC,EAAgBrJ,KAEhC,CAAE,MAAOC,GACLC,QAAQ1B,MAAM,+BAAgCyB,GAC9CxB,GAASwB,EAAI0B,QACjB,CAAC,QACGrD,IAAW,EACf,GAIAiL,EACJ,GACD,CAAClF,KAEJ7E,EAAAA,EAAAA,YAAU,KACN,MAAMgK,EAAsBA,KACxB,MAAMC,EAAiB5B,aAAaC,QAAQ,eAC5CF,GAAe6B,EAAe,EAIlC,OADAC,OAAOC,iBAAiB,UAAWH,GAC5B,IAAME,OAAOE,oBAAoB,UAAWJ,EAAoB,GACxE,KAEHhK,EAAAA,EAAAA,YAAU,KACN,MAAMqK,EAAYC,uBAAsB,SAIxC,MAAO,KACHC,qBAAqBF,EAAU,CAElC,GACF,KAEHrK,EAAAA,EAAAA,YAAU,KACN,GAAIwG,EAAMS,OAAS,EAAG,CAClBvG,QAAQO,IAAI,iBAAkBuF,GAG9B,MAAMgE,EAAU,CACZ,CAACrB,IAAc,GACf,CAACA,IAAqB,GACtB,CAACA,IAAc,IAInB3C,EAAMiE,SAAQlG,IACV,MAAM5E,EAAS4E,EAAK5E,QAAUwJ,GAC1BqB,EAAQ7K,GACR6K,EAAQ7K,GAAQ+K,KAAKnG,GAErBiG,EAAQrB,IAAauB,KAAKnG,EAC9B,IAGJ7D,QAAQO,IAAI,iBAAkBuJ,GAC9B1B,GAAiB0B,EACrB,IACD,CAAChE,IAEJ,MAAMV,GAAqB1F,MAAOuK,EAAQC,KACtClK,QAAQO,IAAI,mBAAoB,CAAE0J,SAAQC,cAC1C,MAAMrG,EAAOiC,EAAMqE,MAAKjK,GAAKA,EAAE4C,MAAQmH,IACvC,GAAKpG,EAKL,IACI,MAAMuG,EAAa,CACftL,KAAM+E,EAAK/E,KACXC,YAAa8E,EAAK9E,YAClBG,SAAU2E,EAAK3E,SACfC,UAAW0E,EAAK1E,UAChBC,QAASyE,EAAKzE,QACdJ,QAASmF,EACTlF,OAAQiL,EAAUG,eAGtBrK,QAAQO,IAAI,2BAA4B6J,SAClCrB,EAAAA,EAAYuB,OAAOL,EAAQG,GAGjC,MAAMzK,QAAiBoJ,EAAAA,EAAYC,aAAa7E,GAChD6C,EAASrH,EAASG,KACtB,CAAE,MAAOxB,IAAQ,IAADiM,EACZvK,QAAQ1B,MAAM,+BAA6C,QAAdiM,EAAAjM,GAAMqB,gBAAQ,IAAA4K,OAAA,EAAdA,EAAgBzK,OAAQxB,GAAMmD,SAC3ElD,GAAS,kDACb,MAxBIyB,QAAQ1B,MAAM,kBAAmB2L,EAwBrC,EAYEvE,GAAkBA,CAACxB,EAAMlB,KAC3BoE,GAAgBlD,GAChBoD,GAAgBtE,GAChBwE,IAAa,EAAM,EAGjBgD,GAAsBxH,IACxBsE,GAAgBtE,GAChBoE,GAAgB,MAChBI,IAAa,EAAK,EAShBiD,GAAa/K,MAAOuK,EAAQC,KAC9B,IACI,MAAMrG,EAAOiC,EAAMqE,MAAKjK,GAAKA,EAAE4C,MAAQmH,IACvC,IAAKpG,EAED,YADA7D,QAAQ1B,MAAM,kBAAmB2L,GAKrC,MAAMS,GAAgBjL,EAAAA,EAAAA,GAAA,GAAQ0I,IACxBwC,EAAY9G,EAAK5E,OAGvByL,EAAiBC,GAAaD,EAAiBC,GAC1CC,QAAO1K,GAAKA,EAAE4C,MAAQmH,IAG3B,MAAMY,GAAWpL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQoE,GAAI,IAAE5E,OAAQiL,IACvCQ,EAAiBR,GAAa,IAAKQ,EAAiBR,IAAc,GAAKW,GAEvEzC,GAAiBsC,GAGjB,MAAMN,GAAU3K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACToE,GAAI,IACP5E,OAAQiL,EACRlL,QAASmF,WAENiG,EAAWtH,IAElB9C,QAAQO,IAAI,iCAAkC6J,SACxCrB,EAAAA,EAAYuB,OAAOL,EAAQG,GAGjC,MAAMzK,QAAiBoJ,EAAAA,EAAYC,aAAa7E,GAChD6C,EAASrH,EAASG,KACtB,CAAE,MAAOxB,IAAQ,IAADwM,EACZ9K,QAAQ1B,MAAM,+BAA6C,QAAdwM,EAAAxM,GAAMqB,gBAAQ,IAAAmL,OAAA,EAAdA,EAAgBhL,OAAQxB,GAAMmD,SAC3ElD,GAAS,mDAGT,MAAMoB,QAAiBoJ,EAAAA,EAAYC,aAAa7E,GAChD6C,EAASrH,EAASG,KACtB,GA2PEiL,GAAoBA,IACjB5D,IA6CDpG,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEjB,SAAU,IAAKoK,OAAQ,UAAWlK,UACzCJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CACL2B,gBAAiB,OACjB6C,aAAc,EACdvE,GAAI,GACNhB,SAAA,EACEJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEC,GAAI,GAAIhB,SAAA,EACfC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,KAAK0B,cAAY,EAACnD,GAAI,CACtCoD,MAAO,UACPgG,WAAY,KACdnK,SACoB,SAAjBuG,GAA0B,eAAkC,YAAjBA,GAA6B,kBAAoB,oBAEjGtG,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CACAF,GAAI,CACA2B,gBAAiB,UACjByB,MAAO,UACPiG,SAAU,UACVD,WAAY,IACZE,QAAS,UACT9E,aAAc,OAChBvF,SAEDqG,GAAalI,QAAU,cAIhCyB,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEC,GAAI,GAAIhB,SAAA,EACfC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,YAAY0B,cAAY,EAACnD,GAAI,CAC7CoD,MAAO,UACPgG,WAAY,IACZC,SAAU,YACZpK,SAAC,UAGHC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQzB,GAAI,CAAEoD,MAAO,WAAYnE,SAChDqG,GAAarI,WAItB4B,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEC,GAAI,GAAIhB,SAAA,EACfC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,YAAY0B,cAAY,EAACnD,GAAI,CAC7CoD,MAAO,UACPgG,WAAY,IACZC,SAAU,YACZpK,SAAC,iBAGHC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQzB,GAAI,CAAEoD,MAAO,WAAYnE,SAChDqG,GAAapI,aAAe,gCAInB,WAAjBsI,KACG3G,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAAjB,SAAA,EACAC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,YAAY0B,cAAY,EAACnD,GAAI,CAC7CoD,MAAO,UACPgG,WAAY,IACZC,SAAU,YACZpK,SAAC,oBAGHJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CACLG,QAAS,OACToJ,oBAAqB,iBACrBlJ,IAAK,EACLmJ,GAAI,GACNvK,SAAA,EACEJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAAjB,SAAA,EACAC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,UAAUzB,GAAI,CAAEoD,MAAO,WAAYnE,SAAC,gBAGxDC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQzB,GAAI,CAAEoD,MAAO,UAAWgG,WAAY,KAAMnK,SACjE,IAAIyE,KAAK4B,GAAahI,WAAWqG,2BAG1C9E,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAAjB,SAAA,EACAC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,UAAUzB,GAAI,CAAEoD,MAAO,WAAYnE,SAAC,cAGxDC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQzB,GAAI,CAAEoD,MAAO,UAAWgG,WAAY,KAAMnK,SACjE,IAAIyE,KAAK4B,GAAamE,SAAS9F,6BAI3C2B,GAAaoE,OACV7K,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEwJ,GAAI,GAAIvK,SAAA,EACfC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,UAAUzB,GAAI,CAAEoD,MAAO,WAAYnE,SAAC,UAGxDC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQzB,GAAI,CAAEoD,MAAO,UAAWoG,GAAI,IAAMvK,SACzDqG,GAAaoE,mBAtItC7K,EAAAA,EAAAA,MAAA8K,EAAAA,SAAA,CAAA1K,SAAA,EACIJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEC,GAAI,EAAGE,QAAS,OAAQkD,WAAY,SAAUhD,IAAK,GAAIpB,SAAA,EAC9DC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,KAAIxC,SAAE9B,EAAQ+D,eAClChC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CACAF,GAAI,CACA2B,gBAAiB,UACjByB,MAAO,UACPiG,SAAU,UACVD,WAAY,IACZE,QAAS,UACT9E,aAAc,OAChBvF,SACL,gBAKLJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEyE,EAAG,EAAGxE,GAAI,GAAIhB,SAAA,EACrBC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,KAAK0B,cAAY,EAAAlE,SAAC,iBACtCC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,QAAQmI,WAAS,EAAA3K,SAChC9B,EAAQD,aAAe,iCAIhC2B,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEyE,EAAG,GAAIxF,SAAA,EACdC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACzB,QAAQ,KAAK0B,cAAY,EAAAlE,SAAC,qBACtCJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQC,cAAe,SAAUC,IAAK,GAAIpB,SAAA,EAC1DJ,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CAACzB,QAAQ,QAAOxC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kBAAsB,IAAE9B,EAAQyI,gBAE5C/G,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CAACzB,QAAQ,QAAOxC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,IAAE,IAAIyE,KAAKvG,EAAQG,WAAWqG,yBAE9D9E,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CAACzB,QAAQ,QAAOxC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAE,IAAIyE,KAAKvG,EAAQsM,SAAS9F,iCA6M5EkG,IApEDC,EAAAA,EAQIC,EAAAA,EACIC,EAAAA,EAOIC,EAAAA,EAEJC,EAAAA,EACeC,EAAAA,EAIXC,EAAAA,EAWIC,EAAAA,EAGJD,EAAAA,EAWAlH,EAAAA,EACW,OAAP/F,QAAO,IAAPA,GAAAA,EAASF,KAGjB+M,EAAAA,EACIM,EAAAA,EAegBT,KAC7B1D,IAAqB,EAAM,GAa/B,OAAI7J,GACO4C,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQoK,eAAgB,SAAUlH,WAAY,SAAUG,OAAQ,SAAUvE,SAAC,eAGtGxC,IACOyC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEoD,MAAO,aAAcqB,EAAG,GAAIxF,SAAExC,KAG/CU,GAKD0B,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQC,cAAe,SAAUuE,UAAW,QAAShD,gBAAiB,WAAY1C,SAAA,EAElGC,EAAAA,EAAAA,KAAC4K,EAAAA,EAAM,CACHU,SAAS,QACTxK,GAAI,CACAyK,OAAQ,KACR9I,gBAAiB,UACjBmB,UAAW,8BACb7D,UAEFJ,EAAAA,EAAAA,MAACkL,EAAAA,EAAO,CAAC/J,GAAI,CAAE2E,UAAW,mBAAoB1F,SAAA,EAC1CC,EAAAA,EAAAA,KAAC8K,EAAAA,EAAU,CACPnI,KAAK,QACL6I,KAAK,QACLtH,MAAM,UACN,aAAW,OACXpD,GAAI,CAAE2K,GAAI,GAAI1L,UAEdC,EAAAA,EAAAA,KAAC+K,EAAAA,EAAQ,OAEbpL,EAAAA,EAAAA,MAACqL,EAAAA,EAAW,CACRU,WAAW1L,EAAAA,EAAAA,KAACiL,EAAAA,EAAgB,CAACd,SAAS,QAAQrJ,GAAI,CAAEoD,MAAO,2BAC3D,aAAW,aACXpD,GAAI,CAAE6K,KAAM,EAAG,uBAAwB,CAAE1K,QAAS,OAAQkD,WAAY,WAAapE,SAAA,EAEnFJ,EAAAA,EAAAA,MAACuL,EAAAA,EAAI,CACDhH,MAAM,UACN0H,KAAK,IACL9K,GAAI,CACAG,QAAS,OACTkD,WAAY,SACZD,MAAO,QACP2H,eAAgB,OAChB,UAAW,CAAEA,eAAgB,cAC/B9L,SAAA,EAEFC,EAAAA,EAAAA,KAACmL,EAAAA,EAAQ,CAACrK,GAAI,CAAE2K,GAAI,IAAOtB,SAAS,UAAU,WAGlDnK,EAAAA,EAAAA,KAACkL,EAAAA,EAAI,CACDhH,MAAM,UACN0H,KAAK,YACL9K,GAAI,CACAoD,MAAO,QACP2H,eAAgB,OAChB,UAAW,CAAEA,eAAgB,cAC/B9L,SACL,cAGDC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CAACE,MAAM,wBAAuBnE,UAC7B,OAAP9B,QAAO,IAAPA,OAAO,EAAPA,EAASF,OAAQ,wBAG1BiC,EAAAA,EAAAA,KAAC8K,EAAAA,EAAU,CAAC5G,MAAM,UAASnE,UACvBC,EAAAA,EAAAA,KAACoL,EAAAA,EAAiB,YAK9BzL,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQ0K,KAAM,GAAI5L,SAAA,EAElCJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CACLsE,MAAO,QACP3C,gBAAiB,OACjBqJ,YAAa,gCACb7K,QAAS,OACTC,cAAe,SACfoD,OAAQ,QACRgH,SAAU,QACVS,KAAM,EACNC,IAAK,GACL9H,MAAO,UACPqH,OAAQ,KACVxL,SAAA,EAEEJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CACLG,QAAS,OACTkD,WAAY,SACZ8H,GAAI,EACJC,GAAI,EACJC,aAAc,gCACdpL,GAAI,GACNhB,SAAA,EACEC,EAAAA,EAAAA,KAACoM,EAAAA,EAAM,CACHtL,GAAI,CACAuE,QAAS,UACTD,MAAO,GACPd,OAAQ,GACR6F,SAAU,SACVD,WAAY,IACZuB,GAAI,GACN1L,SAES,OAAV+G,SAAU,IAAVA,QAAU,EAAVA,GAAYuF,OAAO,MAExB1M,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAAjB,SAAA,EACAC,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CACPzB,QAAQ,YACRzB,GAAI,CACAoD,MAAO,UACPgG,WAAY,IACZC,SAAU,OACVmC,WAAY,KACdvM,SAED+G,MAEL9G,EAAAA,EAAAA,KAACgE,EAAAA,EAAU,CACPzB,QAAQ,UACRzB,GAAI,CACAoD,MAAO,0BACPiG,SAAU,WACZpK,UAEM,OAAP9B,QAAO,IAAPA,OAAO,EAAPA,EAASF,OAAQ,mBAM9B4B,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CAAE6K,KAAM,EAAGY,SAAU,QAASxM,SAAA,EAEnCC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEwJ,GAAI,GAAIvK,UACfJ,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CACPzB,QAAQ,YACRD,QAASA,IAAMmH,GAAmB,QAClC3I,GAAI,CACAmL,GAAI,EACJC,GAAI,IACJzJ,gBAAkC,SAAjB6D,IAA2BE,GAAY,2BAA6B,cACrFtC,MAAwB,SAAjBoC,IAA2BE,GAAY,UAAY,0BAC1D0D,WAAY,IACZC,SAAU,WACVqC,cAAe,QACf9I,OAAQ,UACRI,WAAY,gBACZ7C,QAAS,OACTkD,WAAY,SACZhD,IAAK,EACL,UAAW,CACPsB,gBAAiB,2BACjByB,MAAO,YAEbnE,SAAA,EAEFC,EAAAA,EAAAA,KAACyM,EAAAA,EAAc,CACXtC,SAAS,QACTrJ,GAAI,CACAoD,MAAO,UACPiG,SAAU,aAEhB,aAMO,WAAhBzD,KACG1G,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAAAjB,UACAJ,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CACPzB,QAAQ,YACRD,QAASA,IAAMmH,GAAmB,WAClC3I,GAAI,CACAmL,GAAI,EACJC,GAAI,IACJzJ,gBAAkC,YAAjB6D,IAA8BE,GAAY,2BAA6B,cACxFtC,MAAwB,YAAjBoC,IAA8BE,GAAY,UAAY,0BAC7D0D,WAAY,IACZC,SAAU,WACVqC,cAAe,QACf9I,OAAQ,UACRI,WAAY,gBACZ7C,QAAS,OACTkD,WAAY,SACZhD,IAAK,EACL,UAAW,CACPsB,gBAAiB,2BACjByB,MAAO,YAEbnE,SAAA,EAEFC,EAAAA,EAAAA,KAAC0M,EAAAA,EAAY,CACTvC,SAAS,QACTrJ,GAAI,CACAoD,MAAO,UACPiG,SAAU,aAEhB,gBAOG,WAAhBzD,KACG1G,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAAAjB,UACAJ,EAAAA,EAAAA,MAACqE,EAAAA,EAAU,CACPzB,QAAQ,YACRD,QAASA,IAAMmH,GAAmB,UAClC3I,GAAI,CACAmL,GAAI,EACJC,GAAI,IACJzJ,gBAAkC,WAAjB6D,IAA6BE,GAAY,2BAA6B,cACvFtC,MAAwB,WAAjBoC,IAA6BE,GAAY,UAAY,0BAC5D0D,WAAY,IACZC,SAAU,WACVqC,cAAe,QACf9I,OAAQ,UACRI,WAAY,gBACZ7C,QAAS,OACTkD,WAAY,SACZhD,IAAK,EACL,UAAW,CACPsB,gBAAiB,2BACjByB,MAAO,YAEbnE,SAAA,EAEFC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAa,CACVxC,SAAS,QACTrJ,GAAI,CACAoD,MAAO,UACPiG,SAAU,aAEhB,sBAStBnK,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CACA4L,UAAU,OACV9L,GAAI,CACA6K,KAAM,EACNkB,GAAI,QACJ5L,QAAS,OACTC,cAAe,SACfuE,UAAW,QACX6F,SAAU,YACZvL,UAEFC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CACAF,GAAI,CACAwK,SAAU,QACVU,IAAK,IACLD,KAAM,QACNe,MAAO,EACPC,OAAQ,EACRtK,gBAAiB,OACjBuK,UAAW,gCACXC,WAAY,gCACZhM,QAAS,OACTC,cAAe,SACfqK,OAAQ,GACVxL,UAEFJ,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CACAF,GAAI,CACA6K,KAAM,EACNY,SAAU,OACVnC,QAAS,OACTxG,UAAW,oCACb7D,SAAA,CAEgB,SAAjBuG,KAA4BF,KACzBzG,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAACF,GAAI,CACLC,GAAI,EACJE,QAAS,OACToK,eAAgB,gBAChBlH,WAAY,UACdpE,SAAA,EACEJ,EAAAA,EAAAA,MAACuN,EAAAA,EAAiB,CACd9N,MAAO8H,GACPiG,WAAS,EACT7L,SA/0BP8L,CAACC,EAAOC,KACjB,OAAZA,GACAnG,GAAgBmG,EACpB,EA60BgC3K,KAAK,QACL7B,GAAI,CACA,uCAAwC,CACpC2B,gBAAiB,UACjByB,MAAO,QACP,UAAW,CACPzB,gBAAiB,aAG3B1C,SAAA,EAEFC,EAAAA,EAAAA,KAACuN,EAAAA,EAAY,CAACnO,MAAM,QAAQ,aAAW,aAAYW,UAC/CC,EAAAA,EAAAA,KAACwN,EAAAA,EAAa,OAElBxN,EAAAA,EAAAA,KAACuN,EAAAA,EAAY,CAACnO,MAAM,OAAO,aAAW,YAAWW,UAC7CC,EAAAA,EAAAA,KAACyN,EAAAA,EAAc,UAGvBzN,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,CACHE,QAAQ,YACR2B,MAAM,UACN5B,QA3UJoL,KAC5BzG,IAAqB,EAAK,EA2UM0G,WAAW3N,EAAAA,EAAAA,KAAC4N,EAAAA,EAAO,IACnB9M,GAAI,CACAwE,aAAc,MACduI,cAAe,OACf3D,WAAY,KACdnK,SACL,mBAKS,SAAjBuG,GACGF,GACI4D,KAEiB,UAAjB9C,IAhuBxBlH,EAAAA,EAAAA,KAAC8N,EAAAA,EAAc,CAAClB,UAAWmB,EAAAA,EAAOjN,GAAI,CAAEwJ,GAAI,GAAIvK,UAC5CJ,EAAAA,EAAAA,MAACqO,EAAAA,EAAK,CAAAjO,SAAA,EACFC,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,CAAAlO,UACNJ,EAAAA,EAAAA,MAACuO,EAAAA,EAAQ,CAAAnO,SAAA,EACLC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,UACXC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,iBACXC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,YACXC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,cACXC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,gBACXC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,cACXC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAC,kBAGnBC,EAAAA,EAAAA,KAACoO,EAAAA,EAAS,CAAArO,SACLgF,EAAMjD,KAAKgB,IACRnD,EAAAA,EAAAA,MAACuO,EAAAA,EAAQ,CAAAnO,SAAA,EACLC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAE+C,EAAK/E,QACjBiC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SAAE+C,EAAK9E,eACjBgC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,UACNC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAW,CAACiB,KAAK,QAAQ7B,GAAI,CAAEsD,SAAU,KAAMrE,UAC5CJ,EAAAA,EAAAA,MAACiC,EAAAA,EAAM,CACHxC,MAAO0D,EAAK5E,QAAUwJ,GACtBpG,SAAWnC,GAAMkF,GAAmBvB,EAAKf,IAAK5C,EAAEE,OAAOD,OACvD0B,GAAI,CAAEwD,OAAQ,IAAKvE,SAAA,EAEnBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAOsI,GAAY3H,SAAC,WAC9BC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAOsI,GAAmB3H,SAAC,iBACrCC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACzC,MAAOsI,GAAY3H,SAAC,sBAI1CC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,UACNC,EAAAA,EAAAA,KAACuE,EAAAA,EAAI,CACDlD,MAAOyB,EAAK3E,SACZwE,KAAK,QACLuB,MACsB,SAAlBpB,EAAK3E,SAAsB,QACT,WAAlB2E,EAAK3E,SAAwB,UAAY,OAE7CoE,QAAQ,gBAGhBvC,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SACL+C,EAAK1E,UAAY,IAAIoG,KAAK1B,EAAK1E,WAAWqG,qBAAuB,OAEtEzE,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SACL+C,EAAKzE,QAAU,IAAImG,KAAK1B,EAAKzE,SAASoG,qBAAuB,OAElEzE,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,UACNC,EAAAA,EAAAA,KAAC8K,EAAAA,EAAU,CACPnI,KAAK,QACLL,QAASA,IAAMqC,GAAgB7B,EAAM,QACrCgC,MAAM,eAAc/E,UAEpBC,EAAAA,EAAAA,KAACqO,EAAAA,EAAc,CAAClE,SAAS,gBAvCtBrH,EAAKf,cAgHpBuM,MACpB,MAAMC,EAAgB,CAClB,CAAEnL,GAAIsE,GAAa5C,MAAO,SAC1B,CAAE1B,GAAIsE,GAAoB5C,MAAO,eACjC,CAAE1B,GAAIsE,GAAa5C,MAAO,cAG9B,OACI9E,EAAAA,EAAAA,KAACwO,EAAAA,EAAW,CAACC,QAASC,EAAAA,GAAa3O,UAC/BC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEG,QAAS,OAAQE,IAAK,EAAGoE,EAAG,EAAGoJ,UAAW,QAAS5O,SACzDwO,EAAczM,KAAI8M,IACf5O,EAAAA,EAAAA,KAAC4E,GAAY,CAET1G,OAAQ0Q,EAAOxL,GACf0B,MAAO8J,EAAO9J,MACdC,MAAOqC,GAAcwH,EAAOxL,IAC5BL,OAAQ2G,IAJHkF,EAAOxL,SAQd,EA6kByDkL,GAGnD9H,GAp0BRqI,MAChB,IAAI9P,EAAO,GACP+P,EAAU,GAEd,OAAQxI,IACJ,IAAK,OACDvH,EAAOgG,EACP+J,EAAU,CACN,CAAEC,MAAO,OAAQC,WAAY,OAAQrD,KAAM,GAC3C,CAAEoD,MAAO,SAAUC,WAAY,SAAU5J,MAAO,KAChD,CAAE2J,MAAO,cAAeC,WAAY,cAAerD,KAAM,MAE7D,MACJ,IAAK,UACD5M,EAAOmH,EACP4I,EAAU,CACN,CAAEC,MAAO,OAAQC,WAAY,OAAQrD,KAAM,GAC3C,CAAEoD,MAAO,SAAUC,WAAY,SAAU5J,MAAO,KAChD,CACI2J,MAAO,QACPC,WAAY,QACZ5J,MAAO,IACP6J,WAAaC,GAAWA,EAAO9P,MAAQ8P,EAAO9P,MAAMoG,OAAS,IAGrE,MACJ,IAAK,SACDzG,EAAOgH,EACP+I,EAAU,CACN,CAAEC,MAAO,OAAQC,WAAY,OAAQrD,KAAM,GAC3C,CAAEoD,MAAO,SAAUC,WAAY,SAAU5J,MAAO,KAChD,CACI2J,MAAO,YACPC,WAAY,aACZ5J,MAAO,IACP6J,WAAaC,GAAW,IAAI1K,KAAK0K,EAAO9P,OAAOqF,sBAEnD,CACIsK,MAAO,UACPC,WAAY,WACZ5J,MAAO,IACP6J,WAAaC,GAAW,IAAI1K,KAAK0K,EAAO9P,OAAOqF,uBAGvD,MACJ,QACI,OAAO,KAGf,OACIzE,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEjB,SAAU,IAAKoK,OAAQ,UAAWlK,UACzCJ,EAAAA,EAAAA,MAACqO,EAAAA,EAAK,CAAAjO,SAAA,EACFC,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,CAAAlO,UACNC,EAAAA,EAAAA,KAACkO,EAAAA,EAAQ,CAAAnO,SACJ+O,EAAQhN,KAAK8M,IACV5O,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAENrN,GAAI,CACAoJ,WAAY,IACZzH,gBAAiB,UACjByB,MAAO,WAEXkB,MAAOwJ,EAAOxJ,MAAMrF,SAEnB6O,EAAOI,YARHJ,EAAOG,cAa5B/O,EAAAA,EAAAA,KAACoO,EAAAA,EAAS,CAAArO,SACLhB,EAAK+C,KAAKqN,IACPnP,EAAAA,EAAAA,KAACkO,EAAAA,EAAQ,CAELkB,OAAK,EACL9M,QAASA,IAAMqC,GAAgBwK,EAAK7I,IACpCxF,GAAI,CACA4C,OAAQ,UACR,UAAW,CAAEjB,gBAAiB,YAChC1C,SAED+O,EAAQhN,KAAK8M,IACV5O,EAAAA,EAAAA,KAACmO,EAAAA,EAAS,CAAApO,SACL6O,EAAOK,WACJL,EAAOK,WAAW,CAAE7P,MAAO+P,EAAIP,EAAOG,SACtCI,EAAIP,EAAOG,QAAU,KAHbH,EAAOG,UATtBI,EAAIpN,aAmBvB,EAyuB0B8M,GAAgB7E,MAIhChK,EAAAA,EAAAA,KAACqP,EAAAA,QAAO,CACJtS,KAAMiK,GACNhK,QAAS2N,GACT1N,UAAWmG,EACXkM,YA9VJ3Q,UACpB,IACI,MAAMC,QAAiBoJ,EAAAA,EAAYC,aAAa7E,GAChD6C,EAASrH,EAASG,MAClB4L,IACJ,CAAE,MAAOpN,IACL0B,QAAQ1B,MAAM,wBAAyBA,GAC3C,mBAYOyC,EAAAA,EAAAA,KAACgB,EAAAA,EAAG,CAACF,GAAI,CAAEyE,EAAG,GAAIxF,SAAC,qBAiVpB,C,kDCxtCd,MAuBA,GACIjB,OAxBWA,IACJyQ,EAAAA,EAAWC,IAAI,aAwBtBC,QArBYrM,GACLmM,EAAAA,EAAWC,IAAI,gBAAD/P,OAAiB2D,IAqBtC6E,aAlBkBhL,GACXsS,EAAAA,EAAWC,IAAI,uBAAD/P,OAAwBxC,IAkB7CqD,OAhBWvB,GACJwQ,EAAAA,EAAWG,KAAK,YAAa3Q,GAgBpCwK,OAbWA,CAACnG,EAAIrE,IACTwQ,EAAAA,EAAWI,IAAI,aAADlQ,OAAc2D,GAAMrE,GAazC6Q,OAVWxM,GACJmM,EAAAA,EAAWM,OAAO,aAADpQ,OAAc2D,I,kDCpB1C,MAYM0M,EAAqB/Q,IAAU,IAADgR,EAAAC,EAAAC,EAChC,MAAMC,EAAc,CAChBnS,KAAe,QAAXgS,EAAEhR,EAAKhB,YAAI,IAAAgS,OAAA,EAATA,EAAWI,OACjBnS,YAA6B,QAAlBgS,EAAEjR,EAAKf,mBAAW,IAAAgS,OAAA,EAAhBA,EAAkBG,OAC/BjS,QAAmB,QAAX+R,EAAAlR,EAAKb,cAAM,IAAA+R,OAAA,EAAXA,EAAa3G,gBAAiB,QACtCnL,UAAWY,EAAKZ,UAAY,UAAUmL,cACtClL,UAAWW,EAAKX,gBAAamB,EAC7BlB,QAASU,EAAKV,cAAWkB,EACzBa,MAAOrB,EAAKqB,OAASwG,aAAaC,QAAQ,UAC1CuJ,SAAUrR,EAAKqR,UAAY,IAiB/B,YAbqB7Q,IAAjBR,EAAKd,UACLiS,EAAYjS,QAAUc,EAAKd,SAAW,MAI1CoS,OAAOC,KAAKJ,GAAalH,SAAQlB,SACJvI,IAArB2Q,EAAYpI,WACLoI,EAAYpI,EACvB,IAGJ7I,QAAQO,IAAI,sBAAuBT,GACnCE,QAAQO,IAAI,yBAA0B0Q,GAC/BA,CAAW,EA4CtB,EAZoB,CAChBpR,OAvEW,WAAmB,IAAlByR,EAAOC,UAAAhL,OAAA,QAAAjG,IAAAiR,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvB,OAAOjB,EAAAA,EAAWC,IAAI,SAAU,CAAEN,OAAQqB,GAC9C,EAsEId,QApEavG,GACNqG,EAAAA,EAAWC,IAAI,UAAD/P,OAAWyJ,IAoEhCjB,aAjEkBhL,GACXsS,EAAAA,EAAWC,IAAI,kBAAD/P,OAAmBxC,IAiExCqD,OAjCYzC,IACZ,MAAM4S,EAAkBX,EAAkBjS,GAC1C,OAAO0R,EAAAA,EAAWG,KAAK,SAAUe,EAAgB,EAgCjDlH,OA7BWA,CAACL,EAAQrL,KACpB,MAAM4S,EAAkBX,EAAkBjS,GAE1C,OADAoB,QAAQO,IAAI,2BAA4BiR,GACjClB,EAAAA,EAAWI,IAAI,UAADlQ,OAAWyJ,GAAUuH,EAAgB,EA2B1Db,OAxBY1G,GACLqG,EAAAA,EAAWM,OAAO,UAADpQ,OAAWyJ,IAwBnCwH,eArBoBxH,GACbqG,EAAAA,EAAWG,KAAK,UAADjQ,OAAWyJ,EAAM,cAqBvCyH,WAlBeA,CAACzH,EAAQ/L,IACjBoS,EAAAA,EAAWG,KAAK,UAADjQ,OAAWyJ,EAAM,aAAa,CAAE/L,WAkBtDyT,cAfkBA,CAAC1H,EAAQ/L,IACpBoS,EAAAA,EAAWM,OAAO,UAADpQ,OAAWyJ,EAAM,aAAa,CAClDnK,KAAM,CAAE5B,Y,kDClEhB,MAwEA,GACI2B,OAzEWA,IACJyQ,EAAAA,EAAWC,IAAI,aAyEtBA,IAlEQpM,GACDmM,EAAAA,EAAWC,IAAI,aAAD/P,OAAc2D,IAkEnC9C,OAvEWvB,GACJwQ,EAAAA,EAAWG,KAAK,YAAa3Q,GAuEpCwK,OA5DWA,CAACnG,EAAIrE,IACTwQ,EAAAA,EAAWI,IAAI,aAADlQ,OAAc2D,GAAMrE,GA4DzC6Q,OAzDWxM,GACJmM,EAAAA,EAAWM,OAAO,aAADpQ,OAAc2D,IAyDtCyN,UAtDcA,IACPtB,EAAAA,EAAWM,OAAO,aAsDzBiB,YAnDgBhM,GACTyK,EAAAA,EAAWC,IAAI,mBAAD/P,OAAoBqF,IAmDzCiM,mBAhDuB9T,GAChBsS,EAAAA,EAAWC,IAAI,aAAD/P,OAAcxC,EAAS,cAgD5C+T,mBA7CuB/T,GAChBsS,EAAAA,EAAWC,IAAI,aAAD/P,OAAcxC,EAAS,sBA6C5CgU,mBA1CuBhU,GAChBsS,EAAAA,EAAWC,IAAI,aAAD/P,OAAcxC,EAAS,sBA0C5CiU,eAvCmBC,GACZ5B,EAAAA,EAAWG,KAAK,mBAAoByB,GAuC3CC,mBApCuBnU,GAChBsS,EAAAA,EAAWC,IAAI,aAAD/P,OAAcxC,EAAS,cAoC5CoU,mBAjCuBA,CAACpU,EAAWyD,IAC5B6O,EAAAA,EAAWG,KAAK,aAADjQ,OAAcxC,EAAS,aAAayD,GAiC1D4Q,oBA9BwBA,CAACrU,EAAWsU,IAC7BhC,EAAAA,EAAWC,IAAI,aAAD/P,OAAcxC,EAAS,YAAAwC,OAAW8R,IA8BvDC,eA3BmBA,CAACvU,EAAWwU,IACxBlC,EAAAA,EAAWG,KAAK,aAADjQ,OAAcxC,EAAS,oBAAoBwU,GA2BjEC,oBAxBwBzU,GACjBsS,EAAAA,EAAWC,IAAI,aAAD/P,OAAcxC,EAAS,eAwB5C4K,eA7EmBzE,GACZmM,EAAAA,EAAWC,IAAI,gBAAD/P,OAAiB2D,I,kDCb1C,MA8BA,GACItE,OA/BWA,IACJyQ,EAAAA,EAAWC,IAAI,YA+BtBmC,UA5BeC,GACRrC,EAAAA,EAAWC,IAAI,eAAD/P,OAAgBmS,IA4BrCtR,OAzBYuR,GACLtC,EAAAA,EAAWG,KAAK,WAAYmC,GAyBnCtI,OAtBWA,CAACqI,EAAUC,IACftC,EAAAA,EAAWI,IAAI,YAADlQ,OAAamS,GAAYC,GAsB9CC,aAnBkBF,GACXrC,EAAAA,EAAWM,OAAO,YAADpQ,OAAamS,IAmBrCG,mBAhBuBA,CAACH,EAAUI,KAClC/S,QAAQO,IAAI,yBAA0BwS,GAC/BzC,EAAAA,EAAWI,IAAI,YAADlQ,OAAamS,EAAQ,iBAAiB,CAAEI,mBAe7D/J,aAZkBhL,IAClBgC,QAAQO,IAAI,gCAAiCvC,GACtCsS,EAAAA,EAAWC,IAAI,oBAAD/P,OAAqBxC,K","sources":["Epic/AddEpic.jsx","Project/ProjectDetails.jsx","service/BacklogService.js","service/EpicService.js","service/ProjectService.js","service/SprintService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Box,\n    Alert,\n    CircularProgress\n} from '@mui/material';\nimport epicService from '../service/EpicService';\nimport projectService from '../service/ProjectService';\n\nconst AddEpic = ({ open, onClose, projectId: initialProjectId, userId }) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [projects, setProjects] = useState([]);\n    const [epicData, setEpicData] = useState({\n        name: '',\n        description: '',\n        project: initialProjectId || '',\n        status: 'to do',\n        priority: 'medium',\n        startDate: '',\n        dueDate: '',\n        labels: []\n    });\n\n    useEffect(() => {\n        loadProjects();\n    }, []);\n\n    useEffect(() => {\n        if (initialProjectId) {\n            setEpicData(prev => ({ ...prev, project: initialProjectId }));\n        }\n    }, [initialProjectId]);\n\n    const loadProjects = async () => {\n        try {\n            const response = await projectService.getAll();\n            setProjects(response.data);\n        } catch (err) {\n            console.error('Error loading projects:', err);\n            setError('Failed to load projects');\n        }\n    };\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        const newValue = name === 'project' ? (value || '') : (value === '' ? undefined : value);\n        console.log(`Changing ${name} to:`, newValue);\n        setEpicData(prev => ({\n            ...prev,\n            [name]: newValue\n        }));\n    };\n\n    const validateForm = () => {\n        if (!epicData.name.trim()) {\n            setError('Epic name is required');\n            return false;\n        }\n        if (epicData.startDate && epicData.dueDate && new Date(epicData.startDate) > new Date(epicData.dueDate)) {\n            setError('Start date cannot be after due date');\n            return false;\n        }\n        return true;\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setError('');\n        setSuccess('');\n        setLoading(true);\n\n        try { \n            // Create a new object for epic data\n            const data = {\n                name: epicData.name,\n                description: epicData.description,\n                status: epicData.status || 'to do',\n                priority: epicData.priority || 'medium',\n                owner: userId,\n                project: epicData.project || null,  \n            };\n\n            // Only add dates if they are set\n            if (epicData.startDate) {\n                data.startDate = epicData.startDate;\n            }\n            if (epicData.dueDate) {\n                data.dueDate = epicData.dueDate;\n            }\n\n            console.log('Epic data before submission:', epicData);\n            console.log('Data being sent to server:', data);\n            const response = await epicService.create(data);\n            console.log('Epic created successfully:', response);\n            onClose(true); // true indicates that we should refresh the list\n            \n            // Show success message\n            setSuccess('Epic created successfully!');\n        } catch (err) {\n            const errorMessage = err.response?.data?.message || 'Failed to create epic';\n            setError(errorMessage);\n            console.error('Error creating epic:', err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleClose = () => {\n        setEpicData({\n            name: '',\n            description: '',\n            project: initialProjectId || '',\n            status: 'to do',\n            priority: 'medium',\n            startDate: '',\n            dueDate: '',\n            labels: []\n        });\n        setError('');\n        onClose();\n    };\n\n    return (\n        <Dialog \n            open={open} \n            onClose={handleClose}\n            maxWidth=\"sm\"\n            fullWidth\n        >\n            <DialogTitle>Create New Epic</DialogTitle>\n            <form onSubmit={handleSubmit}>\n                <DialogContent>\n                    {error && (\n                        <Alert severity=\"error\" sx={{ mb: 2 }}>\n                            {error}\n                        </Alert>\n                    )}\n                    {success && (\n                        <Alert severity=\"success\" sx={{ mb: 2 }}>\n                            {success}\n                        </Alert>\n                    )}\n\n                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                        <TextField\n                            name=\"name\"\n                            label=\"Epic Name\"\n                            value={epicData.name}\n                            onChange={handleChange}\n                            required\n                            fullWidth\n                        />\n\n                        <TextField\n                            name=\"description\"\n                            label=\"Description\"\n                            value={epicData.description}\n                            onChange={handleChange}\n                            multiline\n                            rows={4}\n                            fullWidth\n                        />\n\n                        <FormControl fullWidth>\n                            <InputLabel>Project (Optional)</InputLabel>\n                            <Select\n                                name=\"project\"\n                                value={epicData.project || ''}\n                                onChange={handleChange}\n                                label=\"Project (Optional)\"\n                            >\n                                <MenuItem value=\"\">\n                                    <em>None</em>\n                                </MenuItem>\n                                {projects.map((project) => (\n                                    <MenuItem key={project._id} value={project._id}>\n                                        {project.projectName}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n\n                        <FormControl fullWidth>\n                            <InputLabel>Status</InputLabel>\n                            <Select\n                                name=\"status\"\n                                value={epicData.status}\n                                onChange={handleChange}\n                                label=\"Status\"\n                            >\n                                <MenuItem value=\"to do\">To Do</MenuItem>\n                                <MenuItem value=\"in progress\">In Progress</MenuItem>\n                                <MenuItem value=\"done\">Done</MenuItem>\n                            </Select>\n                        </FormControl>\n\n                        <FormControl fullWidth>\n                            <InputLabel>Priority</InputLabel>\n                            <Select\n                                name=\"priority\"\n                                value={epicData.priority}\n                                onChange={handleChange}\n                                label=\"Priority\"\n                            >\n                                <MenuItem value=\"highest\">Highest</MenuItem>\n                                <MenuItem value=\"high\">High</MenuItem>\n                                <MenuItem value=\"medium\">Medium</MenuItem>\n                                <MenuItem value=\"low\">Low</MenuItem>\n                                <MenuItem value=\"lowest\">Lowest</MenuItem>\n                            </Select>\n                        </FormControl>\n\n                        <TextField\n                            name=\"startDate\"\n                            label=\"Start Date\"\n                            type=\"date\"\n                            value={epicData.startDate}\n                            onChange={handleChange}\n                            fullWidth\n                            InputLabelProps={{ shrink: true }}\n                        />\n\n                        <TextField\n                            name=\"dueDate\"\n                            label=\"Due Date\"\n                            type=\"date\"\n                            value={epicData.dueDate}\n                            onChange={handleChange}\n                            fullWidth\n                            InputLabelProps={{ shrink: true }}\n                        />\n                    </Box>\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={handleClose}>Cancel</Button>\n                    <Button \n                        type=\"submit\" \n                        variant=\"contained\"\n                        disabled={loading}\n                        sx={{\n                            backgroundColor: '#0052CC',\n                            '&:hover': { backgroundColor: '#0747A6' },\n                        }}\n                    >\n                        {loading ? <CircularProgress size={24} /> : 'Create Epic'}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n};\n\nexport default AddEpic;","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n    Box,\n    Typography,\n    AppBar,\n    Toolbar,\n    Button,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Breadcrumbs,\n    Link,\n    IconButton,\n    Avatar,\n    ToggleButton,\n    ToggleButtonGroup,\n    Card,\n    CardContent,\n    CardActions,\n    Chip,\n    FormControl,\n    Select,\n    MenuItem,\n    TableContainer,\n    Paper\n} from '@mui/material';\nimport HomeIcon from '@mui/icons-material/Home';\nimport GroupIcon from '@mui/icons-material/Group';\nimport ViewListIcon from '@mui/icons-material/ViewList';\nimport AssignmentIcon from '@mui/icons-material/Assignment';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AddIcon from '@mui/icons-material/Add';\nimport TableViewIcon from '@mui/icons-material/TableView';\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport ProjectService from '../service/ProjectService';\nimport SprintService from '../service/SprintService';\nimport EpicService from '../service/EpicService';\nimport BacklogService from '../service/BacklogService';\nimport AddEpic from '../Epic/AddEpic';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst ItemTypes = {\n    EPIC: 'epic'\n};\n\nconst EpicCard = ({ epic, onDrop }) => {\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: ItemTypes.EPIC,\n        item: { id: epic._id, status: epic.status },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    }));\n\n    return (\n        <div\n            ref={drag}\n            style={{\n                opacity: isDragging ? 0.5 : 1,\n                cursor: 'move'\n            }}\n        >\n            <Card sx={{\n                '&:hover': {\n                    boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n                    transform: 'translateY(-2px)',\n                    transition: 'all 0.2s ease'\n                }\n            }}>\n                <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                        {epic.name}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                        {epic.description}\n                    </Typography>\n                    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center', mb: 2 }}>\n                        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                            <Select\n                                value={epic.status || 'to do'}\n                                onChange={(e) => handleStatusChange(epic._id, e.target.value)}\n                                sx={{ height: 32 }}\n                            >\n                                <MenuItem value=\"to do\">To Do</MenuItem>\n                                <MenuItem value=\"in progress\">In Progress</MenuItem>\n                                <MenuItem value=\"done\">Completed</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <Chip \n                            label={epic.priority}\n                            size=\"small\"\n                            color={\n                                epic.priority === 'high' ? 'error' :\n                                epic.priority === 'medium' ? 'warning' : 'info'\n                            }\n                            variant=\"outlined\"\n                        />\n                    </Box>\n                    {epic.startDate && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                            Start: {new Date(epic.startDate).toLocaleDateString()}\n                        </Typography>\n                    )}\n                    {epic.dueDate && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                            Due: {new Date(epic.dueDate).toLocaleDateString()}\n                        </Typography>\n                    )}\n                </CardContent>\n                <CardActions>\n                    <Button size=\"small\" onClick={() => handleItemClick(epic, 'epic')}>\n                        View Details\n                    </Button>\n                </CardActions>\n            </Card>\n        </div>\n    );\n};\n\nconst StatusColumn = ({ status, title, epics, onDrop }) => {\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: ItemTypes.EPIC,\n        drop: (item) => onDrop(item.id, status),\n        collect: (monitor) => ({\n            isOver: monitor.isOver()\n        })\n    }));\n\n    return (\n        <Box\n            ref={drop}\n            sx={{\n                width: 300,\n                minWidth: 300,\n                bgcolor: isOver ? 'action.hover' : 'background.paper',\n                borderRadius: 1,\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                transition: 'background-color 0.2s ease'\n            }}\n        >\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                {title} ({epics?.length || 0})\n            </Typography>\n            <Box sx={{ \n                minHeight: 100,\n                display: 'flex',\n                flexDirection: 'column',\n                gap: 2\n            }}>\n                {epics?.map((epic, index) => (\n                    <EpicCard \n                        key={epic._id} \n                        epic={epic} \n                        index={index}\n                    />\n                ))}\n            </Box>\n        </Box>\n    );\n};\n\nconst ProjectDetails = () => {\n    const navigate = useNavigate();\n    const { id } = useParams();\n    const [project, setProject] = useState(null);\n    const [sprints, setSprints] = useState([]);\n    const [epics, setEpics] = useState([]);\n    const [backlogs, setBacklogs] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedItem, setSelectedItem] = useState(null);\n    const [selectedType, setSelectedType] = useState(null);\n    const [showTable, setShowTable] = useState(false);\n    const [projectType, setProjectType] = useState(localStorage.getItem('projectType'));\n    const [projectKey, setProjectKey] = useState('');\n    const [openAddEpicDialog, setOpenAddEpicDialog] = useState(false);\n    const [epicViewMode, setEpicViewMode] = useState('table');\n    const [epicsByStatus, setEpicsByStatus] = useState({\n        'to do': [],\n        'in progress': [],\n        'done': []\n    });\n    const [activeId, setActiveId] = useState(null);\n    const [activeEpic, setActiveEpic] = useState(null);\n\n    // Constants for status values\n    const STATUS = {\n        TODO: 'to do',\n        IN_PROGRESS: 'in progress',\n        DONE: 'done'\n    };\n\n    const DISPLAY_STATUS = {\n        'to do': 'To Do',\n        'in progress': 'In Progress',\n        'done': 'Completed'\n    };\n\n    useEffect(() => {\n        const fetchProjectData = async () => {\n            setLoading(true);\n            try {\n                const projectResponse = await ProjectService.getProjectById(id);\n                setProject(projectResponse.data);\n                setProjectKey(projectResponse.data.key);\n\n                const epicResponse = await EpicService.getByProject(id);\n                console.log('Epic data from server:', epicResponse.data); // Debug log\n                setEpics(epicResponse.data);\n\n                const sprintResponse = await SprintService.getByProject(id);\n                setSprints(sprintResponse.data);\n\n                const backlogResponse = await BacklogService.getByProject(id);\n                setBacklogs(backlogResponse.data);\n\n            } catch (err) {\n                console.error('Error fetching project data:', err);\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (id) {\n            fetchProjectData();\n        }\n    }, [id]);\n\n    useEffect(() => {\n        const handleStorageChange = () => {\n            const newProjectType = localStorage.getItem('projectType');\n            setProjectType(newProjectType);\n        };\n\n        window.addEventListener('storage', handleStorageChange);\n        return () => window.removeEventListener('storage', handleStorageChange);\n    }, []);\n\n    useEffect(() => {\n        const animation = requestAnimationFrame(() => {\n            // setEnabled(true);\n        });\n\n        return () => {\n            cancelAnimationFrame(animation);\n            // setEnabled(false);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (epics.length > 0) {\n            console.log('Current epics:', epics);\n            \n            // Initialize all status arrays\n            const grouped = {\n                [STATUS.TODO]: [],\n                [STATUS.IN_PROGRESS]: [],\n                [STATUS.DONE]: []\n            };\n            \n            // Group epics by status\n            epics.forEach(epic => {\n                const status = epic.status || STATUS.TODO;\n                if (grouped[status]) {\n                    grouped[status].push(epic);\n                } else {\n                    grouped[STATUS.TODO].push(epic);\n                }\n            });\n            \n            console.log('Grouped epics:', grouped);\n            setEpicsByStatus(grouped);\n        }\n    }, [epics]);\n\n    const handleStatusChange = async (epicId, newStatus) => {\n        console.log('Changing status:', { epicId, newStatus });\n        const epic = epics.find(e => e._id === epicId);\n        if (!epic) {\n            console.error('Epic not found:', epicId);\n            return;\n        }\n\n        try {\n            const updateData = {\n                name: epic.name,\n                description: epic.description,\n                priority: epic.priority,\n                startDate: epic.startDate,\n                dueDate: epic.dueDate,\n                project: id,\n                status: newStatus.toLowerCase()\n            };\n            \n            console.log('Sending update for epic:', updateData);\n            await EpicService.update(epicId, updateData);\n            \n            // Refresh epics\n            const response = await EpicService.getByProject(id);\n            setEpics(response.data);\n        } catch (error) {\n            console.error('Error updating epic status:', error.response?.data || error.message);\n            setError('Failed to update epic status. Please try again.');\n        }\n    };\n\n    const getStatusDisplay = (backendStatus) => {\n        const statusMap = {\n            'todo': 'to do',\n            'progress': 'in progress',\n            'done': 'completed'\n        };\n        return statusMap[backendStatus] || 'to do';\n    };\n\n    const handleItemClick = (item, type) => {\n        setSelectedItem(item);\n        setSelectedType(type);\n        setShowTable(false);\n    };\n\n    const handleSectionClick = (type) => {\n        setSelectedType(type);\n        setSelectedItem(null);\n        setShowTable(true);\n    };\n\n    const handleEpicViewChange = (event, newView) => {\n        if (newView !== null) {\n            setEpicViewMode(newView);\n        }\n    };\n\n    const handleDrop = async (epicId, newStatus) => {\n        try {\n            const epic = epics.find(e => e._id === epicId);\n            if (!epic) {\n                console.error('Epic not found:', epicId);\n                return;\n            }\n\n            // Optimistically update the UI\n            const newEpicsByStatus = { ...epicsByStatus };\n            const oldStatus = epic.status;\n            \n            // Remove from old status\n            newEpicsByStatus[oldStatus] = newEpicsByStatus[oldStatus]\n                .filter(e => e._id !== epicId);\n            \n            // Add to new status\n            const updatedEpic = { ...epic, status: newStatus };\n            newEpicsByStatus[newStatus] = [...(newEpicsByStatus[newStatus] || []), updatedEpic];\n            \n            setEpicsByStatus(newEpicsByStatus);\n\n            // Update in backend\n            const updateData = {\n                ...epic,\n                status: newStatus,\n                project: id\n            };\n            delete updateData._id;\n            \n            console.log('Updating epic status via drag:', updateData);\n            await EpicService.update(epicId, updateData);\n            \n            // Refresh epics to ensure sync\n            const response = await EpicService.getByProject(id);\n            setEpics(response.data);\n        } catch (error) {\n            console.error('Error updating epic status:', error.response?.data || error.message);\n            setError('Failed to update epic status. Please try again.');\n            \n            // Revert optimistic update on error\n            const response = await EpicService.getByProject(id);\n            setEpics(response.data);\n        }\n    };\n\n    const renderTable = () => {\n        let data = [];\n        let columns = [];\n\n        switch (selectedType) {\n            case 'epic':\n                data = epics;\n                columns = [\n                    { field: 'name', headerName: 'Name', flex: 1 },\n                    { field: 'status', headerName: 'Status', width: 120 },\n                    { field: 'description', headerName: 'Description', flex: 1.5 }\n                ];\n                break;\n            case 'backlog':\n                data = backlogs;\n                columns = [\n                    { field: 'name', headerName: 'Name', flex: 1 },\n                    { field: 'status', headerName: 'Status', width: 120 },\n                    { \n                        field: 'items', \n                        headerName: 'Items', \n                        width: 100,\n                        renderCell: (params) => params.value ? params.value.length : 0\n                    }\n                ];\n                break;\n            case 'sprint':\n                data = sprints;\n                columns = [\n                    { field: 'name', headerName: 'Name', flex: 1 },\n                    { field: 'status', headerName: 'Status', width: 120 },\n                    { \n                        field: 'startDate', \n                        headerName: 'Start Date', \n                        width: 120,\n                        renderCell: (params) => new Date(params.value).toLocaleDateString()\n                    },\n                    { \n                        field: 'endDate', \n                        headerName: 'End Date', \n                        width: 120,\n                        renderCell: (params) => new Date(params.value).toLocaleDateString()\n                    }\n                ];\n                break;\n            default:\n                return null;\n        }\n\n        return (\n            <Box sx={{ maxWidth: 800, margin: '0 auto' }}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.field}\n                                    sx={{\n                                        fontWeight: 600,\n                                        backgroundColor: '#f5f5f5',\n                                        color: '#546e7a'\n                                    }}\n                                    width={column.width}\n                                >\n                                    {column.headerName}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data.map((row) => (\n                            <TableRow\n                                key={row._id}\n                                hover\n                                onClick={() => handleItemClick(row, selectedType)}\n                                sx={{ \n                                    cursor: 'pointer',\n                                    '&:hover': { backgroundColor: '#f5f5f5' }\n                                }}\n                            >\n                                {columns.map((column) => (\n                                    <TableCell key={column.field}>\n                                        {column.renderCell ? \n                                            column.renderCell({ value: row[column.field] }) : \n                                            row[column.field] || '-'}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        );\n    };\n\n    const renderEpicTable = () => {\n        return (\n            <TableContainer component={Paper} sx={{ mt: 2 }}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Description</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>Priority</TableCell>\n                            <TableCell>Start Date</TableCell>\n                            <TableCell>Due Date</TableCell>\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {epics.map((epic) => (\n                            <TableRow key={epic._id}>\n                                <TableCell>{epic.name}</TableCell>\n                                <TableCell>{epic.description}</TableCell>\n                                <TableCell>\n                                    <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                                        <Select\n                                            value={epic.status || STATUS.TODO}\n                                            onChange={(e) => handleStatusChange(epic._id, e.target.value)}\n                                            sx={{ height: 32 }}\n                                        >\n                                            <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                            <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                            <MenuItem value={STATUS.DONE}>Completed</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                    <Chip \n                                        label={epic.priority}\n                                        size=\"small\"\n                                        color={\n                                            epic.priority === 'high' ? 'error' :\n                                            epic.priority === 'medium' ? 'warning' : 'info'\n                                        }\n                                        variant=\"outlined\"\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {epic.startDate ? new Date(epic.startDate).toLocaleDateString() : '-'}\n                                </TableCell>\n                                <TableCell>\n                                    {epic.dueDate ? new Date(epic.dueDate).toLocaleDateString() : '-'}\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={() => handleItemClick(epic, 'epic')}\n                                        title=\"View Details\"\n                                    >\n                                        <VisibilityIcon fontSize=\"small\" />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    };\n\n    const renderEpicCard = (epic, index) => {\n        console.log('Rendering epic card:', epic); // Debug log\n        return (\n            <Card\n                key={epic._id}\n                sx={{ \n                    '&:hover': {\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n                        transform: 'translateY(-2px)',\n                        transition: 'all 0.2s ease'\n                    }\n                }}\n            >\n                <CardContent sx={{ flex: 1 }}>\n                    <Typography variant=\"h6\" component=\"div\" gutterBottom>\n                        {epic.name}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                        {epic.description}\n                    </Typography>\n                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\n                        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                            <Select\n                                value={epic.status || STATUS.TODO}\n                                onChange={(e) => handleStatusChange(epic._id, e.target.value)}\n                                sx={{ height: 32 }}\n                            >\n                                <MenuItem value={STATUS.TODO}>To Do</MenuItem>\n                                <MenuItem value={STATUS.IN_PROGRESS}>In Progress</MenuItem>\n                                <MenuItem value={STATUS.DONE}>Completed</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <Chip \n                            label={epic.priority}\n                            size=\"small\"\n                            color={\n                                epic.priority === 'high' ? 'error' :\n                                epic.priority === 'medium' ? 'warning' : 'info'\n                            }\n                            variant=\"outlined\"\n                        />\n                    </Box>\n                    {epic.startDate && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                            Start: {new Date(epic.startDate).toLocaleDateString()}\n                        </Typography>\n                    )}\n                    {epic.dueDate && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                            Due: {new Date(epic.dueDate).toLocaleDateString()}\n                        </Typography>\n                    )}\n                </CardContent>\n                <CardActions>\n                    <Button size=\"small\" onClick={() => handleItemClick(epic, 'epic')}>\n                        View Details\n                    </Button>\n                </CardActions>\n            </Card>\n        );\n    };\n\n    const renderEpicCards = () => {\n        const statusColumns = [\n            { id: STATUS.TODO, title: 'To Do' },\n            { id: STATUS.IN_PROGRESS, title: 'In Progress' },\n            { id: STATUS.DONE, title: 'Completed' }\n        ];\n\n        return (\n            <DndProvider backend={HTML5Backend}>\n                <Box sx={{ display: 'flex', gap: 2, p: 2, overflowX: 'auto' }}>\n                    {statusColumns.map(column => (\n                        <StatusColumn\n                            key={column.id}\n                            status={column.id}\n                            title={column.title}\n                            epics={epicsByStatus[column.id]}\n                            onDrop={handleDrop}\n                        />\n                    ))}\n                </Box>\n            </DndProvider>\n        );\n    };\n\n    const renderMainContent = () => {\n        if (!selectedItem) {\n            return (\n                <>\n                    <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 2 }}>\n                        <Typography variant=\"h5\">{project.projectName}</Typography>\n                        <Box \n                            sx={{ \n                                backgroundColor: '#e3f2fd',\n                                color: '#1976d2',\n                                fontSize: '0.75rem',\n                                fontWeight: 500,\n                                padding: '2px 8px',\n                                borderRadius: '4px'\n                            }}\n                        >\n                            Planned\n                        </Box>\n                    </Box>\n\n                    <Box sx={{ p: 3, mb: 3 }}>\n                        <Typography variant=\"h6\" gutterBottom>Description</Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            {project.description || 'No description available'}\n                        </Typography>\n                    </Box>\n\n                    <Box sx={{ p: 3 }}>\n                        <Typography variant=\"h6\" gutterBottom>Project Details</Typography>\n                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                            <Typography variant=\"body1\">\n                                <strong>Project Type:</strong> {project.projectType}\n                            </Typography>\n                            <Typography variant=\"body1\">\n                                <strong>Start Date:</strong> {new Date(project.startDate).toLocaleDateString()}\n                            </Typography>\n                            <Typography variant=\"body1\">\n                                <strong>End Date:</strong> {new Date(project.endDate).toLocaleDateString()}\n                            </Typography>\n                        </Box>\n                    </Box>\n                </>\n            );\n        }\n\n        return (\n            <Box sx={{ maxWidth: 800, margin: '0 auto' }}>\n                <Box sx={{ \n                    backgroundColor: '#fff',\n                    borderRadius: 2,\n                    mb: 3\n                }}>\n                    <Box sx={{ mb: 3 }}>\n                        <Typography variant=\"h5\" gutterBottom sx={{ \n                            color: '#1976d2',\n                            fontWeight: 500 \n                        }}>\n                            {selectedType === 'epic' ? 'Epic Details' : selectedType === 'backlog' ? 'Backlog Details' : 'Sprint Details'}\n                        </Typography>\n                        <Box \n                            sx={{ \n                                backgroundColor: '#e3f2fd',\n                                color: '#1976d2',\n                                fontSize: '0.75rem',\n                                fontWeight: 500,\n                                padding: '2px 8px',\n                                borderRadius: '4px'\n                            }}\n                        >\n                            {selectedItem.status || 'to do'}\n                        </Box>\n                    </Box>\n\n                    <Box sx={{ mb: 4 }}>\n                        <Typography variant=\"subtitle1\" gutterBottom sx={{ \n                            color: '#546e7a',\n                            fontWeight: 500,\n                            fontSize: '0.875rem'\n                        }}>\n                            Name\n                        </Typography>\n                        <Typography variant=\"body1\" sx={{ color: '#263238' }}>\n                            {selectedItem.name}\n                        </Typography>\n                    </Box>\n\n                    <Box sx={{ mb: 4 }}>\n                        <Typography variant=\"subtitle1\" gutterBottom sx={{ \n                            color: '#546e7a',\n                            fontWeight: 500,\n                            fontSize: '0.875rem'\n                        }}>\n                            Description\n                        </Typography>\n                        <Typography variant=\"body1\" sx={{ color: '#263238' }}>\n                            {selectedItem.description || 'No description available'}\n                        </Typography>\n                    </Box>\n\n                    {selectedType === 'sprint' && (\n                        <Box>\n                            <Typography variant=\"subtitle1\" gutterBottom sx={{ \n                                color: '#546e7a',\n                                fontWeight: 500,\n                                fontSize: '0.875rem'\n                            }}>\n                                Sprint Details\n                            </Typography>\n                            <Box sx={{ \n                                display: 'grid',\n                                gridTemplateColumns: 'repeat(2, 1fr)',\n                                gap: 3,\n                                mt: 2\n                            }}>\n                                <Box>\n                                    <Typography variant=\"caption\" sx={{ color: '#546e7a' }}>\n                                        Start Date\n                                    </Typography>\n                                    <Typography variant=\"body1\" sx={{ color: '#263238', fontWeight: 500 }}>\n                                        {new Date(selectedItem.startDate).toLocaleDateString()}\n                                    </Typography>\n                                </Box>\n                                <Box>\n                                    <Typography variant=\"caption\" sx={{ color: '#546e7a' }}>\n                                        End Date\n                                    </Typography>\n                                    <Typography variant=\"body1\" sx={{ color: '#263238', fontWeight: 500 }}>\n                                        {new Date(selectedItem.endDate).toLocaleDateString()}\n                                    </Typography>\n                                </Box>\n                            </Box>\n                            {selectedItem.goal && (\n                                <Box sx={{ mt: 3 }}>\n                                    <Typography variant=\"caption\" sx={{ color: '#546e7a' }}>\n                                        Goal\n                                    </Typography>\n                                    <Typography variant=\"body1\" sx={{ color: '#263238', mt: 0.5 }}>\n                                        {selectedItem.goal}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Box>\n                    )}\n                </Box>\n            </Box>\n        );\n    };\n\n    const renderBreadcrumbs = () => {\n        const paths = [\n            { name: 'Home', path: '/' },\n            { name: 'Projects', path: '/projects' },\n            { name: project?.projectName || 'Project Details', path: `/projects/${id}` }\n        ];\n\n        if (selectedType && !showTable) {\n            paths.push({ \n                name: `${selectedType.charAt(0).toUpperCase() + selectedType.slice(1)}s`, \n                path: '#',\n                onClick: () => handleSectionClick(selectedType)\n            });\n        }\n\n        if (selectedItem) {\n            paths.push({ \n                name: selectedItem.name, \n                path: '#' \n            });\n        }\n\n        return paths;\n    };\n\n    const topNavBar = (\n        <AppBar \n            position=\"fixed\" \n            sx={{ \n                zIndex: 1100,\n                backgroundColor: '#1976d2',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.12)'\n            }}\n        >\n            <Toolbar sx={{ minHeight: '64px !important' }}>\n                <IconButton\n                    size=\"large\"\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    sx={{ mr: 2 }}\n                >\n                    <MenuIcon />\n                </IconButton>\n                <Breadcrumbs \n                    separator={<NavigateNextIcon fontSize=\"small\" sx={{ color: 'rgba(255,255,255,0.7)' }} />}\n                    aria-label=\"breadcrumb\"\n                    sx={{ flex: 1, '& .MuiBreadcrumbs-li': { display: 'flex', alignItems: 'center' } }}\n                >\n                    <Link\n                        color=\"inherit\"\n                        href=\"/\"\n                        sx={{ \n                            display: 'flex', \n                            alignItems: 'center',\n                            color: 'white',\n                            textDecoration: 'none',\n                            '&:hover': { textDecoration: 'underline' }\n                        }}\n                    >\n                        <HomeIcon sx={{ mr: 0.5 }} fontSize=\"small\" />\n                        Home\n                    </Link>\n                    <Link\n                        color=\"inherit\"\n                        href=\"/projects\"\n                        sx={{ \n                            color: 'white',\n                            textDecoration: 'none',\n                            '&:hover': { textDecoration: 'underline' }\n                        }}\n                    >\n                        Projects\n                    </Link>\n                    <Typography color=\"rgba(255,255,255,0.7)\">\n                        {project?.name || 'Project Details'}\n                    </Typography>\n                </Breadcrumbs>\n                <IconButton color=\"inherit\">\n                    <AccountCircleIcon />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n\n    const handleNavigation = (path) => {\n        navigate(path);\n    };\n\n    // Add Epic dialog handlers\n    const handleOpenAddEpicDialog = () => {\n        setOpenAddEpicDialog(true);\n    };\n\n    const handleCloseAddEpicDialog = () => {\n        setOpenAddEpicDialog(false);\n    };\n\n    const handleEpicAdded = async () => {\n        try {\n            const response = await EpicService.getByProject(id);\n            setEpics(response.data);\n            handleCloseAddEpicDialog();\n        } catch (error) {\n            console.error('Error fetching epics:', error);\n        }\n    };\n\n    if (loading) {\n        return <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>Loading...</Box>;\n    }\n\n    if (error) {\n        return <Box sx={{ color: 'error.main', p: 2 }}>{error}</Box>;\n    }\n\n    if (!project) {\n        return <Box sx={{ p: 2 }}>Project not found</Box>;\n    }\n\n    return (\n        <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh', backgroundColor: '#f5f5f5' }}>\n            {/* Navbar */}\n            <AppBar \n                position=\"fixed\" \n                sx={{ \n                    zIndex: 1100,\n                    backgroundColor: '#1976d2',\n                    boxShadow: '0 1px 3px rgba(0,0,0,0.12)'\n                }}\n            >\n                <Toolbar sx={{ minHeight: '64px !important' }}>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Breadcrumbs \n                        separator={<NavigateNextIcon fontSize=\"small\" sx={{ color: 'rgba(255,255,255,0.7)' }} />}\n                        aria-label=\"breadcrumb\"\n                        sx={{ flex: 1, '& .MuiBreadcrumbs-li': { display: 'flex', alignItems: 'center' } }}\n                    >\n                        <Link\n                            color=\"inherit\"\n                            href=\"/\"\n                            sx={{ \n                                display: 'flex', \n                                alignItems: 'center',\n                                color: 'white',\n                                textDecoration: 'none',\n                                '&:hover': { textDecoration: 'underline' }\n                            }}\n                        >\n                            <HomeIcon sx={{ mr: 0.5 }} fontSize=\"small\" />\n                            Home\n                        </Link>\n                        <Link\n                            color=\"inherit\"\n                            href=\"/projects\"\n                            sx={{ \n                                color: 'white',\n                                textDecoration: 'none',\n                                '&:hover': { textDecoration: 'underline' }\n                            }}\n                        >\n                            Projects\n                        </Link>\n                        <Typography color=\"rgba(255,255,255,0.7)\">\n                            {project?.name || 'Project Details'}\n                        </Typography>\n                    </Breadcrumbs>\n                    <IconButton color=\"inherit\">\n                        <AccountCircleIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n\n            <Box sx={{ display: 'flex', flex: 1 }}>\n                {/* Left side - Vertical Sections */}\n                <Box sx={{ \n                    width: '240px',\n                    backgroundColor: '#fff',\n                    borderRight: '1px solid rgba(0, 0, 0, 0.12)',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100vh',\n                    position: 'fixed',\n                    left: 0,\n                    top: 64,\n                    color: '#1976d2',\n                    zIndex: 100\n                }}>\n                    {/* Project Key Avatar */}\n                    <Box sx={{ \n                        display: 'flex', \n                        alignItems: 'center',\n                        px: 3,\n                        py: 3,\n                        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n                        mb: 1\n                    }}>\n                        <Avatar \n                            sx={{ \n                                bgcolor: '#1976d2',\n                                width: 40,\n                                height: 40,\n                                fontSize: '1.2rem',\n                                fontWeight: 600,\n                                mr: 2\n                            }}\n                        >\n                            {projectKey?.charAt(0)}\n                        </Avatar>\n                        <Box>\n                            <Typography\n                                variant=\"subtitle1\"\n                                sx={{\n                                    color: '#1976d2',\n                                    fontWeight: 600,\n                                    fontSize: '1rem',\n                                    lineHeight: 1.2\n                                }}\n                            >\n                                {projectKey}\n                            </Typography>\n                            <Typography\n                                variant=\"caption\"\n                                sx={{\n                                    color: 'rgba(25, 118, 210, 0.7)',\n                                    fontSize: '0.75rem'\n                                }}\n                            >\n                                {project?.name || 'Project'}\n                            </Typography>\n                        </Box>\n                    </Box>\n\n                    {/* Menu Items */}\n                    <Box sx={{ flex: 1, overflow: 'auto' }}>\n                        {/* Epics Section */}\n                        <Box sx={{ mt: 2 }}>\n                            <Typography\n                                variant=\"subtitle2\"\n                                onClick={() => handleSectionClick('epic')}\n                                sx={{\n                                    px: 3,\n                                    py: 2.5,\n                                    backgroundColor: selectedType === 'epic' && showTable ? 'rgba(25, 118, 210, 0.08)' : 'transparent',\n                                    color: selectedType === 'epic' && showTable ? '#1976d2' : 'rgba(25, 118, 210, 0.7)',\n                                    fontWeight: 500,\n                                    fontSize: '0.875rem',\n                                    letterSpacing: '0.3px',\n                                    cursor: 'pointer',\n                                    transition: 'all 0.2s ease',\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    gap: 2,\n                                    '&:hover': {\n                                        backgroundColor: 'rgba(25, 118, 210, 0.08)',\n                                        color: '#1976d2'\n                                    }\n                                }}\n                            >\n                                <AssignmentIcon \n                                    fontSize=\"small\" \n                                    sx={{ \n                                        color: 'inherit',\n                                        fontSize: '1.25rem'\n                                    }} \n                                />\n                                EPICS\n                            </Typography>\n                        </Box>\n\n                        {/* Backlogs Section - Only show for Scrum projects */}\n                        {projectType !== 'Kanban' && (\n                            <Box>\n                                <Typography\n                                    variant=\"subtitle2\"\n                                    onClick={() => handleSectionClick('backlog')}\n                                    sx={{\n                                        px: 3,\n                                        py: 2.5,\n                                        backgroundColor: selectedType === 'backlog' && showTable ? 'rgba(25, 118, 210, 0.08)' : 'transparent',\n                                        color: selectedType === 'backlog' && showTable ? '#1976d2' : 'rgba(25, 118, 210, 0.7)',\n                                        fontWeight: 500,\n                                        fontSize: '0.875rem',\n                                        letterSpacing: '0.3px',\n                                        cursor: 'pointer',\n                                        transition: 'all 0.2s ease',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        gap: 2,\n                                        '&:hover': {\n                                            backgroundColor: 'rgba(25, 118, 210, 0.08)',\n                                            color: '#1976d2'\n                                        }\n                                    }}\n                                >\n                                    <ViewListIcon \n                                        fontSize=\"small\" \n                                        sx={{ \n                                            color: 'inherit',\n                                            fontSize: '1.25rem'\n                                        }} \n                                    />\n                                    BACKLOGS\n                                </Typography>\n                            </Box>\n                        )}\n\n                        {/* Sprints Section - Only show for Scrum projects */}\n                        {projectType !== 'Kanban' && (\n                            <Box>\n                                <Typography\n                                    variant=\"subtitle2\"\n                                    onClick={() => handleSectionClick('sprint')}\n                                    sx={{\n                                        px: 3,\n                                        py: 2.5,\n                                        backgroundColor: selectedType === 'sprint' && showTable ? 'rgba(25, 118, 210, 0.08)' : 'transparent',\n                                        color: selectedType === 'sprint' && showTable ? '#1976d2' : 'rgba(25, 118, 210, 0.7)',\n                                        fontWeight: 500,\n                                        fontSize: '0.875rem',\n                                        letterSpacing: '0.3px',\n                                        cursor: 'pointer',\n                                        transition: 'all 0.2s ease',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        gap: 2,\n                                        '&:hover': {\n                                            backgroundColor: 'rgba(25, 118, 210, 0.08)',\n                                            color: '#1976d2'\n                                        }\n                                    }}\n                                >\n                                    <BugReportIcon \n                                        fontSize=\"small\" \n                                        sx={{ \n                                            color: 'inherit',\n                                            fontSize: '1.25rem'\n                                        }} \n                                    />\n                                    SPRINTS\n                                </Typography>\n                            </Box>\n                        )}\n                    </Box>\n                </Box>\n\n                {/* Right side - Content Area */}\n                <Box \n                    component=\"main\"\n                    sx={{ \n                        flex: 1,\n                        ml: '240px',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        minHeight: '100vh',\n                        position: 'relative'\n                    }}\n                >\n                    <Box\n                        sx={{\n                            position: 'fixed',\n                            top: 128,\n                            left: '240px',\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: '#fff',\n                            borderTop: '1px solid rgba(0, 0, 0, 0.12)',\n                            borderLeft: '1px solid rgba(0, 0, 0, 0.12)',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            zIndex: 1\n                        }}\n                    >\n                        <Box\n                            sx={{\n                                flex: 1,\n                                overflow: 'auto',\n                                padding: '24px',\n                                boxShadow: 'inset 0 4px 8px rgba(0,0,0,0.05)',\n                            }}\n                        >\n                            {selectedType === 'epic' && !selectedItem && (\n                                <Box sx={{ \n                                    mb: 3, \n                                    display: 'flex', \n                                    justifyContent: 'space-between',\n                                    alignItems: 'center'\n                                }}>\n                                    <ToggleButtonGroup\n                                        value={epicViewMode}\n                                        exclusive\n                                        onChange={handleEpicViewChange}\n                                        size=\"small\"\n                                        sx={{ \n                                            '& .MuiToggleButton-root.Mui-selected': {\n                                                backgroundColor: '#1976d2',\n                                                color: 'white',\n                                                '&:hover': {\n                                                    backgroundColor: '#1565c0'\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <ToggleButton value=\"table\" aria-label=\"table view\">\n                                            <TableViewIcon />\n                                        </ToggleButton>\n                                        <ToggleButton value=\"card\" aria-label=\"card view\">\n                                            <ViewModuleIcon />\n                                        </ToggleButton>\n                                    </ToggleButtonGroup>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleOpenAddEpicDialog}\n                                        startIcon={<AddIcon />}\n                                        sx={{\n                                            borderRadius: '8px',\n                                            textTransform: 'none',\n                                            fontWeight: 600\n                                        }}\n                                    >\n                                        Create Epic\n                                    </Button>\n                                </Box>\n                            )}\n                            {selectedType === 'epic' ? (\n                                selectedItem ? (\n                                    renderMainContent()\n                                ) : (\n                                    epicViewMode === 'table' ? renderEpicTable() : renderEpicCards()\n                                )\n                            ) : (\n                                showTable ? renderTable() : renderMainContent()\n                            )}\n                            \n                            {/* Add Epic Dialog */}\n                            <AddEpic\n                                open={openAddEpicDialog}\n                                onClose={handleCloseAddEpicDialog}\n                                projectId={id}\n                                onEpicAdded={handleEpicAdded}\n                            />\n                        </Box>\n                    </Box>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default ProjectDetails;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/Backlogs');\n};\n\nconst getById = id => {\n    return httpClient.get(`/Backlogs/id/${id}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/Backlogs/projectId/${projectId}`);\n};\nconst create = data => {\n    return httpClient.post('/Backlogs', data);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/Backlogs/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/Backlogs/${id}`);\n};\n\nexport default {\n    getAll,\n    getById,\n    getByProject,\n    create,\n    update,\n    remove\n};\n","import httpClient from '../http-common';\n\nconst getAll = (filters = {}) => {\n    return httpClient.get(\"/epics\", { params: filters });\n};\n\nconst getById = (epicId) => {\n    return httpClient.get(`/epics/${epicId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/epics/project/${projectId}`);\n};\n\nconst transformEpicData = (data) => {\n    const transformed = {\n        name: data.name?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original epic data:', data);\n    console.log('Transformed epic data:', transformed);\n    return transformed;\n};\n\nconst create = (epicData) => {\n    const transformedData = transformEpicData(epicData);\n    return httpClient.post(\"/epics\", transformedData);\n};\n\nconst update = (epicId, epicData) => {\n    const transformedData = transformEpicData(epicData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst remove = (epicId) => {\n    return httpClient.delete(`/epics/${epicId}`);\n};\n\nconst updateProgress = (epicId) => {\n    return httpClient.post(`/epics/${epicId}/progress`);\n};\n\nconst addWatcher = (epicId, userId) => {\n    return httpClient.post(`/epics/${epicId}/watchers`, { userId });\n};\n\nconst removeWatcher = (epicId, userId) => {\n    return httpClient.delete(`/epics/${epicId}/watchers`, { \n        data: { userId } \n    });\n};\n\nconst EpicService = {\n    getAll,\n    getById,\n    getByProject,\n    create,\n    update,\n    remove,\n    updateProgress,\n    addWatcher,\n    removeWatcher\n};\n\nexport default EpicService;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get(\"/projects\");\n};\n\nconst create = data => {\n    return httpClient.post(\"/projects\", data);\n};\n\nconst get = id => {\n    return httpClient.get(`/projects/${id}`);\n};\n\nconst getProjectById = id => {\n    return httpClient.get(`/projects/id/${id}`);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/projects/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/projects/${id}`);\n};\n\nconst removeAll = () => {\n    return httpClient.delete(`/projects`);\n};\n\nconst findByTitle = title => {\n    return httpClient.get(`/projects?title=${title}`);\n};\n\nconst getProjectProgress = projectId => {\n    return httpClient.get(`/projects/${projectId}/progress`);\n};\n\nconst getBudgetAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/budget-analytics`);\n};\n\nconst getTeamPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/team-performance`);\n};\n\nconst searchProjects = searchParams => {\n    return httpClient.post(`/projects/search`, searchParams);\n};\n\nconst getProjectMessages = projectId => {\n    return httpClient.get(`/projects/${projectId}/messages`);\n};\n\nconst sendProjectMessage = (projectId, message) => {\n    return httpClient.post(`/projects/${projectId}/messages`, message);\n};\n\nconst exportProjectReport = (projectId, format) => {\n    return httpClient.get(`/projects/${projectId}/export/${format}`);\n};\n\nconst scheduleReport = (projectId, scheduleData) => {\n    return httpClient.post(`/projects/${projectId}/schedule-report`, scheduleData);\n};\n\nconst getProjectAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/analytics`);\n};\n\nconst getProjectPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/performance`);\n};\n\nexport default {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByTitle,\n    getProjectProgress,\n    getBudgetAnalytics,\n    getTeamPerformance,\n    searchProjects,\n    getProjectMessages,\n    sendProjectMessage,\n    exportProjectReport,\n    scheduleReport,\n    getProjectAnalytics,\n    getProjectById\n};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/sprints');\n};\n\nconst getSprint = (sprintId) => {\n    return httpClient.get(`/sprints/id/${sprintId}`);\n};\n\nconst create = (sprintData) => {\n    return httpClient.post('/sprints', sprintData);\n};\n\nconst update = (sprintId, sprintData) => {\n    return httpClient.put(`/sprints/${sprintId}`, sprintData);\n};\n\nconst deleteSprint = (sprintId) => {\n    return httpClient.delete(`/sprints/${sprintId}`);\n};\n\nconst updateBacklogItems = (sprintId, backlogItemId) => {\n    console.log('Sending backlogItemId:', backlogItemId);\n    return httpClient.put(`/sprints/${sprintId}/backlogItems`, { backlogItemId });\n};\n\nconst getByProject = (projectId) => {\n    console.log('Fetching sprints for project:', projectId);\n    return httpClient.get(`/sprints/project/${projectId}`);\n};\n\nexport default { \n    getAll, \n    getSprint, \n    create, \n    update, \n    deleteSprint, \n    updateBacklogItems, \n    getByProject \n};\n"],"names":["_ref","open","onClose","projectId","initialProjectId","userId","loading","setLoading","useState","error","setError","success","setSuccess","projects","setProjects","epicData","setEpicData","name","description","project","status","priority","startDate","dueDate","labels","useEffect","loadProjects","prev","_objectSpread","async","response","projectService","getAll","data","err","console","handleChange","e","value","target","newValue","undefined","log","concat","handleClose","_jsxs","Dialog","maxWidth","fullWidth","children","_jsx","DialogTitle","onSubmit","preventDefault","owner","epicService","create","_err$response","_err$response$data","errorMessage","message","DialogContent","Alert","severity","sx","mb","Box","display","flexDirection","gap","TextField","label","onChange","required","multiline","rows","FormControl","InputLabel","Select","MenuItem","map","_id","projectName","type","InputLabelProps","shrink","DialogActions","Button","onClick","variant","disabled","backgroundColor","CircularProgress","size","ItemTypes","EpicCard","epic","onDrop","isDragging","drag","useDrag","item","id","collect","monitor","ref","style","opacity","cursor","Card","boxShadow","transform","transition","CardContent","Typography","gutterBottom","color","alignItems","minWidth","handleStatusChange","height","Chip","Date","toLocaleDateString","CardActions","handleItemClick","StatusColumn","_ref2","title","epics","isOver","drop","useDrop","accept","width","bgcolor","borderRadius","p","length","minHeight","index","ProjectDetails","useNavigate","useParams","setProject","sprints","setSprints","setEpics","backlogs","setBacklogs","selectedItem","setSelectedItem","selectedType","setSelectedType","showTable","setShowTable","projectType","setProjectType","localStorage","getItem","projectKey","setProjectKey","openAddEpicDialog","setOpenAddEpicDialog","epicViewMode","setEpicViewMode","epicsByStatus","setEpicsByStatus","activeId","setActiveId","activeEpic","setActiveEpic","STATUS","projectResponse","ProjectService","getProjectById","key","epicResponse","EpicService","getByProject","sprintResponse","SprintService","backlogResponse","BacklogService","fetchProjectData","handleStorageChange","newProjectType","window","addEventListener","removeEventListener","animation","requestAnimationFrame","cancelAnimationFrame","grouped","forEach","push","epicId","newStatus","find","updateData","toLowerCase","update","_error$response","handleSectionClick","handleDrop","newEpicsByStatus","oldStatus","filter","updatedEpic","_error$response2","renderMainContent","margin","fontWeight","fontSize","padding","gridTemplateColumns","mt","endDate","goal","_Fragment","paragraph","handleCloseAddEpicDialog","AppBar","Toolbar","IconButton","MenuIcon","Breadcrumbs","NavigateNextIcon","Link","HomeIcon","AccountCircleIcon","justifyContent","position","zIndex","edge","mr","separator","flex","href","textDecoration","borderRight","left","top","px","py","borderBottom","Avatar","charAt","lineHeight","overflow","letterSpacing","AssignmentIcon","ViewListIcon","BugReportIcon","component","ml","right","bottom","borderTop","borderLeft","ToggleButtonGroup","exclusive","handleEpicViewChange","event","newView","ToggleButton","TableViewIcon","ViewModuleIcon","handleOpenAddEpicDialog","startIcon","AddIcon","textTransform","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","VisibilityIcon","renderEpicCards","statusColumns","DndProvider","backend","HTML5Backend","overflowX","column","renderTable","columns","field","headerName","renderCell","params","row","hover","AddEpic","onEpicAdded","httpClient","get","getById","post","put","remove","delete","transformEpicData","_data$name","_data$description","_data$status","transformed","trim","watchers","Object","keys","filters","arguments","transformedData","updateProgress","addWatcher","removeWatcher","removeAll","findByTitle","getProjectProgress","getBudgetAnalytics","getTeamPerformance","searchProjects","searchParams","getProjectMessages","sendProjectMessage","exportProjectReport","format","scheduleReport","scheduleData","getProjectAnalytics","getSprint","sprintId","sprintData","deleteSprint","updateBacklogItems","backlogItemId"],"sourceRoot":""}