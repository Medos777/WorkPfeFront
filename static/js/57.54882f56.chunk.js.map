{"version":3,"file":"static/js/57.54882f56.chunk.js","mappings":"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","sources":["Issue/IssueList.jsx","service/IssueService.js","service/ProjectService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    IconButton,\n    Typography,\n    Button,\n    TextField,\n    MenuItem,\n    Menu,\n    FormControl,\n    InputLabel,\n    Select,\n    Chip,\n    Avatar,\n    Tooltip,\n    TablePagination,\n    Grid,\n    CircularProgress,\n    ListItemIcon\n} from '@mui/material';\nimport {\n    Add as AddIcon,\n    Assignment,\n    Delete as DeleteIcon,\n    Edit as EditIcon,\n    FilterList as FilterIcon,\n    MoreVert,\n    Search as SearchIcon\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport IssueService from '../service/IssueService';\nimport ProjectService from '../service/ProjectService';\nimport UserService from '../service/UserService';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { alpha } from '@mui/material/styles';\n\nconst priorityConfig = {\n    highest: { color: 'error', icon: '⚡', label: 'Highest' },\n    high: { color: 'warning', icon: '↑', label: 'High' },\n    medium: { color: 'info', icon: '→', label: 'Medium' },\n    low: { color: 'success', icon: '↓', label: 'Low' },\n    lowest: { color: 'default', icon: '↓↓', label: 'Lowest' }\n};\n\nconst typeConfig = {\n    story: { color: 'primary', icon: <Assignment />, label: 'Story' },\n    task: { color: 'info', icon: <Assignment />, label: 'Task' },\n    bug: { color: 'error', icon: <Assignment />, label: 'Bug' },\n    epic: { color: 'secondary', icon: <Assignment />, label: 'Epic' }\n};\n\nconst ITEMS_PER_PAGE = 10;\n\nconst STATUS_TYPES = {\n    TODO: 'todo',\n    IN_PROGRESS: 'inprogress',\n    DONE: 'done'\n};\n\nconst DISPLAY_STATUS = {\n    [STATUS_TYPES.TODO]: 'To Do',\n    [STATUS_TYPES.IN_PROGRESS]: 'In Progress',\n    [STATUS_TYPES.DONE]: 'Done'\n};\n\nconst statusColors = {\n    [STATUS_TYPES.TODO]: '#e5e7eb',\n    [STATUS_TYPES.IN_PROGRESS]: '#fef3c7',\n    [STATUS_TYPES.DONE]: '#d1fae5'\n};\n\nconst statusIcons = {\n    [STATUS_TYPES.TODO]: '📋',\n    [STATUS_TYPES.IN_PROGRESS]: '🔄',\n    [STATUS_TYPES.DONE]: '✅'\n};\n\nconst avatarColors = ['#1976d2', '#dc004e', '#388e3c', '#f57c00', '#6d1b7b'];\n\nconst getAvatarColor = (username) => {\n    const index = username.charCodeAt(0) % avatarColors.length;\n    return avatarColors[index];\n};\n\n// Function to generate consistent colors from strings\nconst stringToColor = (string) => {\n    let hash = 0;\n    for (let i = 0; i < string.length; i++) {\n        hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = '#';\n    for (let i = 0; i < 3; i++) {\n        const value = (hash >> (i * 8)) & 0xFF;\n        color += ('00' + value.toString(16)).substr(-2);\n    }\n    return color;\n};\n\nconst IssueList = () => {\n    const { projectId } = useParams();\n    const [allIssues, setAllIssues] = useState([]);\n    const [filteredIssues, setFilteredIssues] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [statusFilter, setStatusFilter] = useState('all');\n    const [typeFilter, setTypeFilter] = useState('all');\n    const [projectFilter, setProjectFilter] = useState(projectId || 'all');\n    const [epicFilter, setEpicFilter] = useState('all');\n    const [projects, setProjects] = useState([]);\n    const [epics, setEpics] = useState([]);\n    const [users, setUsers] = useState([]);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [selectedIssue, setSelectedIssue] = useState(null);\n    const navigate = useNavigate();\n    const [viewMode, setViewMode] = useState('table');\n\n    // Get user role and ID from localStorage\n    const userRole = localStorage.getItem('role');\n    const userId = localStorage.getItem('userId');\n    const isDeveloper = userRole === 'developer';\n\n    // Function to get user by ID\n    const getUserById = (userId) => {\n        return users.find(user => user._id === userId);\n    };\n\n    // Function to apply filters\n    const applyFilters = (issues) => {\n        // Si l'utilisateur est un développeur, filtrer uniquement ses issues\n        let filteredByRole = issues;\n        if (isDeveloper) {\n            filteredByRole = issues.filter(issue => issue.assignee === userId);\n        }\n\n        const filtered = filteredByRole.filter(issue => {\n            const matchesProject = projectFilter === 'all' || issue.projectId === projectFilter;\n            const matchesEpic = epicFilter === 'all' || issue.epicId === epicFilter;\n            const matchesType = typeFilter === 'all' || issue.type === typeFilter;\n            const matchesStatus = statusFilter === 'all' || issue.status === statusFilter;\n            const matchesSearch = !searchTerm || \n                issue.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                issue.description.toLowerCase().includes(searchTerm.toLowerCase());\n\n            return matchesProject && matchesEpic && matchesType && matchesStatus && matchesSearch;\n        });\n\n        return filtered;\n    };\n\n    const handleStatusChange = async (issueId, newStatus) => {\n        try {\n            const currentIssue = allIssues.find(issue => issue._id === issueId);\n            if (!currentIssue) return;\n\n            // Store in cookies\n            document.cookie = `issue_status_${issueId}=${newStatus}; max-age=604800; path=/`; // 7 days expiry\n\n            // Update UI\n            setAllIssues(prevIssues => \n                prevIssues.map(issue => \n                    issue._id === issueId \n                        ? { ...issue, status: newStatus }\n                        : issue\n                )\n            );\n\n            // Update backend\n            const updateData = {\n                title: currentIssue.title,\n                description: currentIssue.description,\n                status: newStatus,\n                priority: currentIssue.priority,\n                projectId: currentIssue.projectId,\n                epicId: currentIssue.epicId,\n                assignee: currentIssue.assignee,\n                reporter: currentIssue.reporter,\n                owner: localStorage.getItem('userId'),\n                storyPoints: currentIssue.storyPoints,\n                dueDate: currentIssue.dueDate\n            };\n\n            await IssueService.update(issueId, updateData);\n            console.log('Status updated successfully in backend and stored in cookies');\n        } catch (error) {\n            console.error('Error updating status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n            try {\n                const [projectsRes, allIssuesRes, usersRes] = await Promise.all([\n                    ProjectService.getAll(),\n                    IssueService.getAll(),\n                    UserService.getAll()\n                ]);\n                \n                console.log('Fetched Issues:', allIssuesRes.data);\n                console.log('Fetched Users:', usersRes.data);\n                \n                setUsers(usersRes.data);\n                setProjects(projectsRes.data);\n                setAllIssues(allIssuesRes.data);\n                \n                // Set epics from all issues\n                const epicsFromIssues = allIssuesRes.data.filter(issue => issue.type === 'epic');\n                setEpics(epicsFromIssues);\n                \n                // Apply initial filters\n                const filtered = applyFilters(allIssuesRes.data);\n                setFilteredIssues(filtered);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        // Toujours charger les données fraîches au montage du composant\n        fetchData();\n    }, []); // Dépendances vides pour ne s'exécuter qu'au montage\n\n    // Mettre à jour les filtres quand ils changent\n    useEffect(() => {\n        if (allIssues.length > 0) {  // Seulement si nous avons des issues\n            const filtered = applyFilters(allIssues);\n            setFilteredIssues(filtered);\n        }\n    }, [projectFilter, epicFilter, typeFilter, statusFilter, searchTerm, allIssues]);\n\n    const handleProjectChange = (event) => {\n        setProjectFilter(event.target.value);\n        setEpicFilter('all');\n    };\n\n    const handleEpicChange = (event) => {\n        setEpicFilter(event.target.value);\n        setProjectFilter('all');\n    };\n\n    const toggleViewMode = () => {\n        setViewMode(prevMode => (prevMode === 'table' ? 'card' : 'table'));\n    };\n\n    const CardView = ({ issue }) => {\n        const [{ isDragging }, drag] = useDrag({\n            type: 'issue',\n            item: { \n                id: issue._id,\n                currentStatus: issue.status \n            },\n            collect: (monitor) => ({\n                isDragging: monitor.isDragging(),\n            }),\n        });\n\n        const assignee = users.find(user => user._id === issue.assignee);\n\n        return (\n            <Box\n                ref={drag}\n                sx={{\n                    opacity: isDragging ? 0.4 : 1,\n                    cursor: 'move',\n                    bgcolor: 'background.paper',\n                    p: 2,\n                    m: 1,\n                    borderRadius: 2,\n                    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                    transition: 'all 0.2s ease',\n                    '&:hover': {\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n                        transform: 'translateY(-2px)'\n                    },\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: 1\n                }}\n            >\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                        {issue.key}\n                    </Typography>\n                    <Chip\n                        size=\"small\"\n                        label={issue.priority}\n                        color={priorityConfig[issue.priority.toLowerCase()]?.color || 'default'}\n                        sx={{ height: 24 }}\n                    />\n                </Box>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium', mb: 1 }}>\n                    {issue.title}\n                </Typography>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 'auto' }}>\n                    {assignee ? (\n                        <Tooltip title={assignee.username}>\n                            <Avatar\n                                sx={{ \n                                    width: 24, \n                                    height: 24,\n                                    bgcolor: getAvatarColor(assignee.username),\n                                    fontSize: '0.875rem'\n                                }}\n                            >\n                                {assignee.username.charAt(0).toUpperCase()}\n                            </Avatar>\n                        </Tooltip>\n                    ) : (\n                        <Avatar sx={{ width: 24, height: 24, bgcolor: 'grey.300' }}>-</Avatar>\n                    )}\n                    {issue.storyPoints && (\n                        <Chip\n                            size=\"small\"\n                            label={`${issue.storyPoints} pts`}\n                            variant=\"outlined\"\n                            sx={{ height: 24 }}\n                        />\n                    )}\n                </Box>\n            </Box>\n        );\n    };\n\n    const StatusColumn = ({ status, issues }) => {\n        const [{ isOver }, drop] = useDrop({\n            accept: 'issue',\n            drop: (item) => {\n                if (item.currentStatus !== status) {\n                    handleStatusChange(item.id, status);\n                }\n            },\n            collect: (monitor) => ({\n                isOver: monitor.isOver()\n            })\n        });\n\n        return (\n            <Box\n                ref={drop}\n                sx={{\n                    width: '33%',\n                    minHeight: 500,\n                    p: 2,\n                    bgcolor: isOver ? alpha(statusColors[status], 0.7) : statusColors[status],\n                    borderRadius: 2,\n                    transition: 'all 0.2s',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: 1\n                }}\n            >\n                <Box sx={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    gap: 1,\n                    mb: 2,\n                    px: 2,\n                    py: 1,\n                    bgcolor: 'background.paper',\n                    borderRadius: 1,\n                    boxShadow: '0 1px 2px rgba(0,0,0,0.05)'\n                }}>\n                    <Typography variant=\"h6\" sx={{ \n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: 1,\n                        color: 'text.primary',\n                        fontWeight: 'medium'\n                    }}>\n                        {statusIcons[status]} {DISPLAY_STATUS[status]}\n                    </Typography>\n                    <Chip\n                        size=\"small\"\n                        label={issues.length}\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        sx={{ ml: 'auto' }}\n                    />\n                </Box>\n                <Box sx={{ \n                    bgcolor: 'background.paper',\n                    borderRadius: 2,\n                    minHeight: 400,\n                    p: 1,\n                    overflowY: 'auto'\n                }}>\n                    {issues.map((issue) => (\n                        <CardView key={issue._id} issue={issue} />\n                    ))}\n                </Box>\n            </Box>\n        );\n    };\n\n    return (\n        <Box sx={{ width: '100%', p: 3 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n                <Typography variant=\"h4\" component=\"h1\">\n                    Issues\n                </Typography>\n                {!isDeveloper && (\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<AddIcon />}\n                        onClick={() => navigate(projectId ? `/projects/${projectId}/issues/add` : '/issues/add')}\n                    >\n                        Add Issue\n                    </Button>\n                )}\n            </Box>\n\n            <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid item xs={12} sm={6} md={3}>\n                    <TextField\n                        fullWidth\n                        label=\"Search\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        InputProps={{\n                            startAdornment: <SearchIcon sx={{ mr: 1 }} />\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <FormControl fullWidth>\n                        <InputLabel>Project</InputLabel>\n                        <Select\n                            value={projectFilter}\n                            onChange={handleProjectChange}\n                            label=\"Project\"\n                        >\n                            <MenuItem value=\"all\">All Projects</MenuItem>\n                            {projects.map((project) => (\n                                <MenuItem key={project._id} value={project._id}>\n                                    {project.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} md={2}>\n                    <FormControl fullWidth>\n                        <InputLabel>Epic</InputLabel>\n                        <Select\n                            value={epicFilter}\n                            onChange={handleEpicChange}\n                            label=\"Epic\"\n                            disabled={projectFilter === 'all'}\n                        >\n                            <MenuItem value=\"all\">All Epics</MenuItem>\n                            {epics.map((epic) => (\n                                <MenuItem key={epic._id} value={epic._id}>\n                                    {epic.title}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} md={2}>\n                    <FormControl fullWidth>\n                        <InputLabel>Type</InputLabel>\n                        <Select\n                            value={typeFilter}\n                            onChange={(e) => setTypeFilter(e.target.value)}\n                            label=\"Type\"\n                        >\n                            <MenuItem value=\"all\">All Types</MenuItem>\n                            {Object.entries(typeConfig).map(([type, config]) => (\n                                <MenuItem key={type} value={type}>\n                                    {config.label}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6} md={2}>\n                    <FormControl fullWidth>\n                        <InputLabel>Status</InputLabel>\n                        <Select\n                            value={statusFilter}\n                            onChange={(e) => setStatusFilter(e.target.value)}\n                            label=\"Status\"\n                        >\n                            <MenuItem value=\"all\">All Statuses</MenuItem>\n                            <MenuItem value={STATUS_TYPES.TODO}>{DISPLAY_STATUS[STATUS_TYPES.TODO]}</MenuItem>\n                            <MenuItem value={STATUS_TYPES.IN_PROGRESS}>{DISPLAY_STATUS[STATUS_TYPES.IN_PROGRESS]}</MenuItem>\n                            <MenuItem value={STATUS_TYPES.DONE}>{DISPLAY_STATUS[STATUS_TYPES.DONE]}</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </Grid>\n\n            <Button variant=\"contained\" onClick={toggleViewMode}>\n                Toggle to {viewMode === 'table' ? 'Card' : 'Table'} View\n            </Button>\n\n            {viewMode === 'table' ? (\n                <TableContainer>\n                    <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Key</TableCell>\n                                <TableCell>Type</TableCell>\n                                <TableCell>Title</TableCell>\n                                <TableCell>Priority</TableCell>\n                                <TableCell>Status</TableCell>\n                                <TableCell>Assignee</TableCell>\n                                <TableCell>Reporter</TableCell>\n                                <TableCell>Story Points</TableCell>\n                                <TableCell>Due Date</TableCell>\n                                <TableCell>Created</TableCell>\n                                <TableCell>Actions</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {loading ? (\n                                <TableRow>\n                                    <TableCell colSpan={12} align=\"center\">\n                                        <CircularProgress />\n                                    </TableCell>\n                                </TableRow>\n                            ) : filteredIssues.length === 0 ? (\n                                <TableRow>\n                                    <TableCell colSpan={12} align=\"center\">\n                                        <Typography variant=\"body1\" color=\"textSecondary\">\n                                            No issues found\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            ) : (\n                                filteredIssues\n                                    .slice(page * ITEMS_PER_PAGE, (page + 1) * ITEMS_PER_PAGE)\n                                    .map((issue) => (\n                                        <TableRow\n                                            hover\n                                            key={issue._id}\n                                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                                        >\n                                            <TableCell>{issue.key || 'N/A'}</TableCell>\n                                            <TableCell>\n                                                {issue.type && typeConfig[issue.type] ? (\n                                                    <Tooltip title={typeConfig[issue.type].label}>\n                                                        <IconButton size=\"small\" color={typeConfig[issue.type].color}>\n                                                            {typeConfig[issue.type].icon}\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                ) : (\n                                                    <IconButton size=\"small\" disabled>\n                                                        <Assignment />\n                                                    </IconButton>\n                                                )}\n                                            </TableCell>\n                                            <TableCell>{issue.title || 'Untitled'}</TableCell>\n                                            <TableCell>\n                                                {issue.priority && priorityConfig[issue.priority] ? (\n                                                    <Chip\n                                                        size=\"small\"\n                                                        label={priorityConfig[issue.priority].label}\n                                                        color={priorityConfig[issue.priority].color}\n                                                        icon={<span>{priorityConfig[issue.priority].icon}</span>}\n                                                    />\n                                                ) : (\n                                                    <Chip\n                                                        size=\"small\"\n                                                        label=\"None\"\n                                                        color=\"default\"\n                                                    />\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select\n                                                    value={issue.status}\n                                                    onChange={(e) => handleStatusChange(issue._id, e.target.value)}\n                                                >\n                                                    <MenuItem value={STATUS_TYPES.TODO}>{DISPLAY_STATUS[STATUS_TYPES.TODO]}</MenuItem>\n                                                    <MenuItem value={STATUS_TYPES.IN_PROGRESS}>{DISPLAY_STATUS[STATUS_TYPES.IN_PROGRESS]}</MenuItem>\n                                                    <MenuItem value={STATUS_TYPES.DONE}>{DISPLAY_STATUS[STATUS_TYPES.DONE]}</MenuItem>\n                                                </Select>\n                                            </TableCell>\n                                            <TableCell>\n                                                {issue.assignee ? (\n                                                    <Tooltip title={(getUserById(issue.assignee)?.email) || 'Unknown'}>\n                                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                                            {console.log('Assignee ID:', issue.assignee)}\n                                                            {console.log('Assignee User:', getUserById(issue.assignee))}\n                                                            <Avatar\n                                                                sx={{ width: 24, height: 24, mr: 1 }}\n                                                                alt={(getUserById(issue.assignee)?.email) || 'Unknown'}\n                                                            >\n                                                                {(getUserById(issue.assignee)?.email?.charAt(0)) || '?'}\n                                                            </Avatar>\n                                                            <Typography variant=\"body2\">\n                                                                {(getUserById(issue.assignee)?.email) || 'Unknown'}\n                                                            </Typography>\n                                                        </Box>\n                                                    </Tooltip>\n                                                ) : (\n                                                    <Tooltip title=\"Unassigned\">\n                                                        <Avatar sx={{ width: 24, height: 24 }}>?</Avatar>\n                                                    </Tooltip>\n                                                )}\n                                            </TableCell>\n                                            <TableCell>\n                                                {issue.reporter ? (\n                                                    <Tooltip title={(getUserById(issue.reporter)?.email) || 'Unknown'}>\n                                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                                            {console.log('Reporter ID:', issue.reporter)}\n                                                            {console.log('Reporter User:', getUserById(issue.reporter))}\n                                                            <Avatar\n                                                                sx={{ width: 24, height: 24, mr: 1 }}\n                                                                alt={(getUserById(issue.reporter)?.email) || 'Unknown'}\n                                                            >\n                                                                {(getUserById(issue.reporter)?.email?.charAt(0)) || '?'}\n                                                            </Avatar>\n                                                            <Typography variant=\"body2\">\n                                                                {(getUserById(issue.reporter)?.email) || 'Unknown'}\n                                                            </Typography>\n                                                        </Box>\n                                                    </Tooltip>\n                                                ) : (\n                                                    <Tooltip title=\"No Reporter\">\n                                                        <Avatar sx={{ width: 24, height: 24 }}>?</Avatar>\n                                                    </Tooltip>\n                                                )}\n                                            </TableCell>\n                                            <TableCell>{issue.storyPoints || '-'}</TableCell>\n                                            <TableCell>\n                                                {issue.dueDate ? format(new Date(issue.dueDate), 'MMM d, yyyy') : '-'}\n                                            </TableCell>\n                                            <TableCell>\n                                                {issue.createdAt ? format(new Date(issue.createdAt), 'MMM d, yyyy') : 'N/A'}\n                                            </TableCell>\n                                            <TableCell>\n                                                {!isDeveloper && (\n                                                    <IconButton\n                                                        onClick={(event) => {\n                                                            setAnchorEl(event.currentTarget);\n                                                            setSelectedIssue(issue);\n                                                        }}\n                                                        size=\"small\"\n                                                    >\n                                                        <MoreVert />\n                                                    </IconButton>\n                                                )}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            ) : (\n                <DndProvider backend={HTML5Backend}>\n                    <Box sx={{ \n                        display: 'flex', \n                        gap: 3,\n                        mt: 3,\n                        px: 2,\n                        minHeight: 'calc(100vh - 200px)',\n                        bgcolor: '#f3f4f6',\n                        borderRadius: 2,\n                        p: 3\n                    }}>\n                        <StatusColumn\n                            status={STATUS_TYPES.TODO}\n                            issues={filteredIssues.filter(issue => issue.status === STATUS_TYPES.TODO)}\n                        />\n                        <StatusColumn\n                            status={STATUS_TYPES.IN_PROGRESS}\n                            issues={filteredIssues.filter(issue => issue.status === STATUS_TYPES.IN_PROGRESS)}\n                        />\n                        <StatusColumn\n                            status={STATUS_TYPES.DONE}\n                            issues={filteredIssues.filter(issue => issue.status === STATUS_TYPES.DONE)}\n                        />\n                    </Box>\n                </DndProvider>\n            )}\n\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={filteredIssues.length}\n                rowsPerPage={ITEMS_PER_PAGE}\n                page={page}\n                onPageChange={(event, newPage) => setPage(newPage)}\n                onRowsPerPageChange={(event) => {\n                    setRowsPerPage(parseInt(event.target.value, 10));\n                    setPage(0);\n                }}\n            />\n\n            <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={() => {\n                    setAnchorEl(null);\n                    setSelectedIssue(null);\n                }}\n            >\n                <MenuItem onClick={() => {\n                    navigate(`/issues/edit/${selectedIssue?._id}`);\n                    setAnchorEl(null);\n                    setSelectedIssue(null);\n                }}>\n                    <ListItemIcon>\n                        <EditIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    Edit\n                </MenuItem>\n                <MenuItem onClick={async () => {\n                    if (window.confirm('Are you sure you want to delete this issue?')) {\n                        try {\n                            await IssueService.remove(selectedIssue?._id);\n                            const fetchData = async () => {\n                                setLoading(true);\n                                try {\n                                    const [projectsRes, allIssuesRes, usersRes] = await Promise.all([\n                                        ProjectService.getAll(),\n                                        IssueService.getAll(),\n                                        UserService.getAll()\n                                    ]);\n                                    \n                                    setUsers(usersRes.data);\n                                    setProjects(projectsRes.data);\n                                    setAllIssues(allIssuesRes.data);\n                                    \n                                    // Set epics from all issues\n                                    const epicsFromIssues = allIssuesRes.data.filter(issue => issue.type === 'epic');\n                                    setEpics(epicsFromIssues);\n                                    \n                                    // Apply initial filters\n                                    const filtered = applyFilters(allIssuesRes.data);\n                                    setFilteredIssues(filtered);\n                                } catch (error) {\n                                    console.error('Error fetching data:', error);\n                                } finally {\n                                    setLoading(false);\n                                }\n                            };\n                            fetchData();\n                        } catch (error) {\n                            console.error('Error deleting issue:', error);\n                        }\n                    }\n                    setAnchorEl(null);\n                    setSelectedIssue(null);\n                }}>\n                    <ListItemIcon>\n                        <DeleteIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    Delete\n                </MenuItem>\n            </Menu>\n        </Box>\n    );\n};\n\nexport default IssueList;\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/issues');\n};\n\nconst getById = (issueId) => {\n    return httpClient.get(`/issues/${issueId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/issues/project/${projectId}`);\n};\n\nconst getByEpic = (epicId) => {\n    return httpClient.get(`/issues/epic/${epicId}`);\n};\n\nconst getBySprint = (sprintId) => {\n    return httpClient.get(`/issues/sprint/${sprintId}`);\n};\n\nconst create = (issueData) => {\n    return httpClient.post('/issues', issueData);\n};\n\nconst transformIssueData = (data) => {\n    const transformed = {\n        title: data.title?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        assignee: data.assignee || null,\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original issue data:', data);\n    console.log('Transformed issue data:', transformed);\n    return transformed;\n};\n\nconst update = (issueId, issueData) => {\n    const transformedData = transformIssueData(issueData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/issues/${issueId}`, transformedData);\n};\n\nconst remove = (issueId) => {\n    return httpClient.delete(`/issues/${issueId}`);\n};\n\nconst addComment = (issueId, commentData) => {\n    return httpClient.post(`/issues/${issueId}/comments`, commentData);\n};\n\nconst addAttachment = (issueId, file) => {\n    const formData = new FormData();\n    formData.append('attachment', file);\n    return httpClient.post(`/issues/${issueId}/attachments`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n};\n\nconst updateTimeTracking = (issueId, timeData) => {\n    return httpClient.post(`/issues/${issueId}/timetracking`, timeData);\n};\n\nexport default {\n    getAll,\n    getById,\n    getByProject,\n    getByEpic,\n    getBySprint,\n    create,\n    update,\n    remove,\n    addComment,\n    addAttachment,\n    updateTimeTracking\n};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get(\"/projects\");\n};\n\nconst create = data => {\n    return httpClient.post(\"/projects\", data);\n};\n\nconst get = id => {\n    return httpClient.get(`/projects/${id}`);\n};\n\nconst getProjectById = id => {\n    return httpClient.get(`/projects/id/${id}`);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/projects/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/projects/${id}`);\n};\n\nconst removeAll = () => {\n    return httpClient.delete(`/projects`);\n};\n\nconst findByTitle = title => {\n    return httpClient.get(`/projects?title=${title}`);\n};\n\nconst getProjectProgress = projectId => {\n    return httpClient.get(`/projects/${projectId}/progress`);\n};\n\nconst getBudgetAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/budget-analytics`);\n};\n\nconst getTeamPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/team-performance`);\n};\n\nconst searchProjects = searchParams => {\n    return httpClient.post(`/projects/search`, searchParams);\n};\n\nconst getProjectMessages = projectId => {\n    return httpClient.get(`/projects/${projectId}/messages`);\n};\n\nconst sendProjectMessage = (projectId, message) => {\n    return httpClient.post(`/projects/${projectId}/messages`, message);\n};\n\nconst exportProjectReport = (projectId, format) => {\n    return httpClient.get(`/projects/${projectId}/export/${format}`);\n};\n\nconst scheduleReport = (projectId, scheduleData) => {\n    return httpClient.post(`/projects/${projectId}/schedule-report`, scheduleData);\n};\n\nconst getProjectAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/analytics`);\n};\n\nconst getProjectPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/performance`);\n};\nconst findByTeams = teamId => {\n    return httpClient.get(`/projects/teams/${teamId}`);\n    \n    \n};\n\n\nexport default {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByTitle,\n    getProjectProgress,\n    getBudgetAnalytics,\n    getTeamPerformance,\n    searchProjects,\n    getProjectMessages,\n    sendProjectMessage,\n    exportProjectReport,\n    scheduleReport,\n    getProjectAnalytics,\n    getProjectById,\n    findByTeams\n};\n"],"names":["priorityConfig","highest","color","icon","label","high","medium","low","lowest","typeConfig","story","_jsx","Assignment","task","bug","epic","STATUS_TYPES","DISPLAY_STATUS","statusColors","statusIcons","avatarColors","getAvatarColor","username","index","charCodeAt","length","IssueList","projectId","useParams","allIssues","setAllIssues","useState","filteredIssues","setFilteredIssues","loading","setLoading","page","setPage","searchTerm","setSearchTerm","statusFilter","setStatusFilter","typeFilter","setTypeFilter","projectFilter","setProjectFilter","epicFilter","setEpicFilter","projects","setProjects","epics","setEpics","users","setUsers","anchorEl","setAnchorEl","selectedIssue","setSelectedIssue","navigate","useNavigate","viewMode","setViewMode","userRole","localStorage","getItem","userId","isDeveloper","getUserById","find","user","_id","applyFilters","issues","filteredByRole","filter","issue","assignee","matchesProject","matchesEpic","epicId","matchesType","type","matchesStatus","status","matchesSearch","title","toLowerCase","includes","description","handleStatusChange","async","issueId","newStatus","currentIssue","document","cookie","concat","prevIssues","map","_objectSpread","updateData","priority","reporter","owner","storyPoints","dueDate","IssueService","update","console","log","error","useEffect","projectsRes","allIssuesRes","usersRes","Promise","all","ProjectService","getAll","UserService","data","epicsFromIssues","filtered","fetchData","CardView","_ref","_priorityConfig$issue","isDragging","drag","useDrag","item","id","currentStatus","collect","monitor","_jsxs","Box","ref","sx","opacity","cursor","bgcolor","p","m","borderRadius","boxShadow","transition","transform","display","flexDirection","gap","children","justifyContent","alignItems","mb","Typography","variant","key","Chip","size","height","fontWeight","mt","Tooltip","Avatar","width","fontSize","charAt","toUpperCase","StatusColumn","_ref2","isOver","drop","useDrop","accept","minHeight","alpha","px","py","ml","overflowY","component","Button","startIcon","AddIcon","onClick","Grid","container","spacing","xs","sm","md","TextField","fullWidth","value","onChange","e","target","InputProps","startAdornment","SearchIcon","mr","FormControl","InputLabel","Select","event","MenuItem","project","name","disabled","Object","entries","_ref3","config","toggleViewMode","prevMode","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","TableBody","colSpan","align","CircularProgress","slice","_getUserById","_getUserById2","_getUserById3","_getUserById3$email","_getUserById4","_getUserById5","_getUserById6","_getUserById7","_getUserById7$email","_getUserById8","hover","border","IconButton","email","alt","format","Date","createdAt","currentTarget","MoreVert","DndProvider","backend","HTML5Backend","TablePagination","rowsPerPageOptions","count","rowsPerPage","onPageChange","newPage","onRowsPerPageChange","setRowsPerPage","parseInt","Menu","open","Boolean","onClose","ListItemIcon","EditIcon","window","confirm","remove","DeleteIcon","httpClient","get","getById","getByProject","getByEpic","getBySprint","sprintId","create","issueData","post","transformedData","_data$title","_data$description","_data$status","transformed","trim","startDate","undefined","watchers","keys","forEach","transformIssueData","put","delete","addComment","commentData","addAttachment","file","formData","FormData","append","headers","updateTimeTracking","timeData","removeAll","findByTitle","getProjectProgress","getBudgetAnalytics","getTeamPerformance","searchProjects","searchParams","getProjectMessages","sendProjectMessage","message","exportProjectReport","scheduleReport","scheduleData","getProjectAnalytics","getProjectById","findByTeams","teamId"],"sourceRoot":""}