{"version":3,"file":"static/js/863.fc72e7fc.chunk.js","mappings":"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","sources":["components/Analytics/TeamAnalytics.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Typography,\n    Paper,\n    Grid,\n    CircularProgress,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n} from '@mui/material';\nimport {\n    LineChart,\n    Line,\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n    PieChart,\n    Pie,\n    Cell,\n} from 'recharts';\n\nconst TeamAnalytics = () => {\n    const [loading, setLoading] = useState(true);\n    const [teamData, setTeamData] = useState({\n        performanceData: [],\n        productivityData: [],\n        taskDistribution: [],\n    });\n\n    useEffect(() => {\n        // Simulated data - replace with actual API calls\n        const fetchData = async () => {\n            try {\n                // Simulate API call delay\n                await new Promise(resolve => setTimeout(resolve, 1000));\n\n                setTeamData({\n                    performanceData: [\n                        { month: 'Jan', completed: 65, planned: 80 },\n                        { month: 'Feb', completed: 75, planned: 70 },\n                        { month: 'Mar', completed: 85, planned: 80 },\n                        { month: 'Apr', completed: 80, planned: 85 },\n                    ],\n                    productivityData: [\n                        { team: 'Team A', productivity: 85 },\n                        { team: 'Team B', productivity: 75 },\n                        { team: 'Team C', productivity: 90 },\n                        { team: 'Team D', productivity: 70 },\n                    ],\n                    taskDistribution: [\n                        { name: 'Completed', value: 400 },\n                        { name: 'In Progress', value: 300 },\n                        { name: 'Pending', value: 200 },\n                        { name: 'Blocked', value: 100 },\n                    ],\n                });\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching team analytics:', error);\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\n    if (loading) {\n        return (\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ p: 3 }}>\n            <Typography variant=\"h4\" gutterBottom>\n                Team Analytics\n            </Typography>\n\n            <Grid container spacing={3}>\n                {/* Team Performance Chart */}\n                <Grid item xs={12} md={6}>\n                    <Paper sx={{ p: 2, height: '100%' }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Team Performance\n                        </Typography>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <LineChart data={teamData.performanceData}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"month\" />\n                                <YAxis />\n                                <Tooltip />\n                                <Legend />\n                                <Line type=\"monotone\" dataKey=\"completed\" stroke=\"#8884d8\" name=\"Completed Tasks\" />\n                                <Line type=\"monotone\" dataKey=\"planned\" stroke=\"#82ca9d\" name=\"Planned Tasks\" />\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </Paper>\n                </Grid>\n\n                {/* Team Productivity Chart */}\n                <Grid item xs={12} md={6}>\n                    <Paper sx={{ p: 2, height: '100%' }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Team Productivity\n                        </Typography>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <BarChart data={teamData.productivityData}>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis dataKey=\"team\" />\n                                <YAxis />\n                                <Tooltip />\n                                <Legend />\n                                <Bar dataKey=\"productivity\" fill=\"#8884d8\" name=\"Productivity Score\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Paper>\n                </Grid>\n\n                {/* Task Distribution */}\n                <Grid item xs={12} md={6}>\n                    <Paper sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Task Distribution\n                        </Typography>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <PieChart>\n                                <Pie\n                                    data={teamData.taskDistribution}\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    labelLine={false}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                                >\n                                    {teamData.taskDistribution.map((entry, index) => (\n                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                                    ))}\n                                </Pie>\n                                <Tooltip />\n                                <Legend />\n                            </PieChart>\n                        </ResponsiveContainer>\n                    </Paper>\n                </Grid>\n\n                {/* Team Statistics */}\n                <Grid item xs={12} md={6}>\n                    <Paper sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Team Statistics\n                        </Typography>\n                        <Grid container spacing={2}>\n                            {[\n                                { title: 'Average Completion Rate', value: '85%' },\n                                { title: 'On-time Delivery', value: '92%' },\n                                { title: 'Team Efficiency', value: '88%' },\n                                { title: 'Sprint Success Rate', value: '90%' },\n                            ].map((stat, index) => (\n                                <Grid item xs={6} key={index}>\n                                    <Card>\n                                        <CardContent>\n                                            <Typography color=\"textSecondary\" gutterBottom>\n                                                {stat.title}\n                                            </Typography>\n                                            <Typography variant=\"h4\">\n                                                {stat.value}\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default TeamAnalytics;\n"],"names":["TeamAnalytics","loading","setLoading","useState","teamData","setTeamData","performanceData","productivityData","taskDistribution","useEffect","async","Promise","resolve","setTimeout","month","completed","planned","team","productivity","name","value","error","console","fetchData","COLORS","_jsx","Box","display","justifyContent","alignItems","minHeight","children","CircularProgress","_jsxs","sx","p","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Paper","height","ResponsiveContainer","width","LineChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","BarChart","Bar","fill","PieChart","Pie","cx","cy","labelLine","outerRadius","label","_ref","percent","concat","toFixed","map","entry","index","Cell","length","title","stat","Card","CardContent","color"],"sourceRoot":""}