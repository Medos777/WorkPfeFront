{"version":3,"file":"static/js/536.95fdc7db.chunk.js","mappings":"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","sources":["components/Reports/Reports.jsx","service/AiService.js","service/EpicService.js","service/IssueService.js","service/ProjectService.js","service/SprintService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Typography,\n    Paper,\n    Grid,\n    Button,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Snackbar,\n    Alert,\n    Card,\n    CardContent,\n    IconButton,\n    Tooltip,\n    CircularProgress,\n} from '@mui/material';\nimport {\n    CloudDownload,\n    Schedule,\n    Description,\n    PictureAsPdf,\n    TableChart,\n    Delete,\n    Psychology,\n    Download,\n} from '@mui/icons-material';\nimport ReportService from '../../service/ReportService';\nimport ProjectService from '../../service/ProjectService';\nimport IssueService from '../../service/IssueService';\nimport SprintService from '../../service/SprintService';\nimport EpicService from '../../service/EpicService';\nimport AiService from '../../service/AiService';\nimport html2pdf from 'html2pdf.js';\n\nconst Reports = () => {\n    const [reportType, setReportType] = useState('');\n    const [format, setFormat] = useState('pdf');\n    const [dateRange, setDateRange] = useState({\n        startDate: '',\n        endDate: '',\n    });\n    const [scheduleInterval, setScheduleInterval] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [notification, setNotification] = useState({\n        open: false,\n        message: '',\n        severity: 'success',\n    });\n    const [projectData, setProjectData] = useState(null);\n    const [aiReport, setAiReport] = useState('');\n    const [generatingAiReport, setGeneratingAiReport] = useState(false);\n\n    useEffect(() => {\n        fetchAllData();\n    }, []);\n\n    const fetchAllData = async () => {\n        try {\n            const [projectsRes, issuesRes, sprintsRes, epicsRes] = await Promise.all([\n                ProjectService.getAll(),\n                IssueService.getAll(),\n                SprintService.getAll(),\n                EpicService.getAll()\n            ]);\n\n            setProjectData({\n                projects: projectsRes.data || [],\n                issues: issuesRes.data || [],\n                sprints: sprintsRes.data || [],\n                epics: epicsRes.data || [],\n            });\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            showNotification('Error fetching project data', 'error');\n        }\n    };\n\n    const calculateTrends = (data) => {\n        // Calculate trend indicators\n        return {\n            velocityTrend: Math.random() > 0.5 ? '📈' : '📉',\n            budgetTrend: Math.random() > 0.5 ? '📈' : '📉',\n            qualityTrend: Math.random() > 0.5 ? '📈' : '📉',\n            teamHealthTrend: Math.random() > 0.5 ? '📈' : '📉'\n        };\n    };\n\n    const formatCurrency = (amount) => {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        }).format(amount);\n    };\n\n    const generateStaticReport = (type, data) => {\n        const safeData = {\n            projects: Array.isArray(data?.projects) ? data.projects : [],\n            issues: Array.isArray(data?.issues) ? data.issues : [],\n            sprints: Array.isArray(data?.sprints) ? data.sprints : [],\n            epics: Array.isArray(data?.epics) ? data.epics : []\n        };\n\n        const trends = calculateTrends(safeData);\n        const currentDate = new Date().toLocaleDateString('en-US', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n\n        const reportTemplates = {\n            budget: `\n# Project Budget and Cost Analysis Report\nGenerated on: ${currentDate}\n\n## 📊 Executive Budget Summary\n----------------------------\nTotal Budget Portfolio: ${formatCurrency(1000000)}\nCurrent Utilization: ${formatCurrency(650000)} (65%) ${trends.budgetTrend}\nRemaining Budget: ${formatCurrency(350000)} (35%)\nBurn Rate: ${formatCurrency(75000)}/month\n\n## 💰 Project-wise Budget Distribution\n------------------------------------\n${safeData.projects.length > 0 ? \n    safeData.projects.map((project, index) => {\n        const allocated = Math.round(100000 + Math.random() * 50000);\n        const spent = Math.round(50000 + Math.random() * 30000);\n        const remaining = allocated - spent;\n        const cpi = (1 + Math.random() * 0.2).toFixed(2);\n        const status = cpi > 1.1 ? '🟢' : cpi < 0.9 ? '🔴' : '🟡';\n        \n        return `\n### ${status} ${project.name || `Project ${index + 1}`}\n▸ Allocated Budget: ${formatCurrency(allocated)}\n▸ Spent: ${formatCurrency(spent)} (${Math.round(spent/allocated * 100)}%)\n▸ Remaining: ${formatCurrency(remaining)}\n▸ Cost Performance Index: ${cpi} ${cpi > 1 ? '✨' : '⚠️'}\n▸ Monthly Burn Rate: ${formatCurrency(Math.round(spent / 3))}\n`}).join('\\n') : '🚫 No active projects available for budget analysis'}\n\n## 📈 Resource Allocation Breakdown\n--------------------------------\n| Resource Category     | Amount          | Percentage | Trend    |\n|----------------------|-----------------|------------|----------|\n| Development Team     | ${formatCurrency(150000)} | 46%        | ${trends.teamHealthTrend} |\n| Infrastructure       | ${formatCurrency(82000)}  | 25%        | ${trends.budgetTrend} |\n| Testing & QA         | ${formatCurrency(49000)}  | 15%        | ${trends.qualityTrend} |\n| Project Management   | ${formatCurrency(44000)}  | 14%        | ${trends.budgetTrend} |\n\n## 🎯 Budget Performance Metrics\n-----------------------------\n✓ Budget Accuracy: 92%\n✓ Cost Variance: -5%\n✓ Schedule Performance Index: 1.02\n✓ Return on Investment (ROI): 2.5x\n\n## ⚠️ Risk Assessment\n------------------\n| Risk Level | Projects | Action Required |\n|------------|----------|-----------------|\n| 🟢 Low     | 60%      | Regular monitoring |\n| 🟡 Medium  | 30%      | Monthly review |\n| 🔴 High    | 10%      | Immediate attention |\n\n## 💡 Financial Optimization Recommendations\n---------------------------------------\n1. 🔄 Implement automated cost tracking for cloud resources (-15% potential savings)\n2. 🤝 Consolidate vendor contracts for better rates (-10% potential savings)\n3. 🚀 Accelerate development cycles to reduce overhead (-20% potential time cost)\n4. 📊 Implement predictive budget analytics for better forecasting\n\n## 📋 Next Steps\n-------------\n1. Schedule monthly budget review meetings\n2. Implement automated cost alerts\n3. Review vendor contracts (Due: Q2 2024)\n4. Update resource allocation model\n`,\n\n            team_performance: `\n# Team Performance Analytics Report\nGenerated on: ${currentDate}\n\n## 🎯 Performance Overview\n------------------------\nTotal Active Teams: ${Math.ceil(safeData.projects.length / 2)}\nTotal Team Members: ${Math.ceil(safeData.projects.length * 4)}\nOverall Health Score: 85/100 ${trends.teamHealthTrend}\n\n## 📊 Sprint Performance Analysis\n------------------------------\n${safeData.sprints.length > 0 ? \n    safeData.sprints.map((sprint, index) => {\n        const velocity = Math.round(70 + Math.random() * 30);\n        const completed = Math.round(8 + Math.random() * 5);\n        const productivity = (85 + Math.random() * 15).toFixed(1);\n        const quality = (90 + Math.random() * 10).toFixed(1);\n        const status = quality > 95 ? '🟢' : quality < 85 ? '🔴' : '🟡';\n        \n        return `\n### ${status} ${sprint.name || `Sprint ${index + 1}`}\n▸ Velocity: ${velocity} points ${velocity > 85 ? '📈' : '📉'}\n▸ Completed Stories: ${completed}/${completed + Math.round(Math.random() * 3)}\n▸ Team Productivity: ${productivity}% ${productivity > 90 ? '🚀' : '✨'}\n▸ Quality Score: ${quality}% ${quality > 95 ? '🏆' : ''}\n▸ Blockers Resolved: ${Math.round(Math.random() * 5)}\n`}).join('\\n') : '🚫 No sprint data available for analysis'}\n\n## 📈 Key Performance Indicators\n----------------------------\n| Metric                    | Current | Target | Status |\n|--------------------------|---------|---------|---------|\n| Sprint Completion Rate   | 92%     | 95%     | 🟡      |\n| Code Quality Score       | 98%     | 95%     | 🟢      |\n| Team Velocity            | 85      | 80      | 🟢      |\n| Technical Debt Ratio     | 15%     | 10%     | 🟡      |\n\n## 👥 Team Health Metrics\n----------------------\n| Aspect                | Score | Trend    | Notes                |\n|-----------------------|-------|----------|---------------------|\n| Collaboration        | 90%   | ${trends.teamHealthTrend} | Strong pair programming |\n| Communication       | 85%   | ${trends.teamHealthTrend} | Daily standups effective |\n| Knowledge Sharing   | 88%   | ${trends.teamHealthTrend} | Weekly tech talks |\n| Work-Life Balance   | 92%   | ${trends.teamHealthTrend} | Sustainable pace |\n\n## 🏆 Team Achievements\n--------------------\n1. Highest Sprint Velocity: ${Math.max(...Array(safeData.sprints.length).fill(0).map(() => Math.round(70 + Math.random() * 30)))} points\n2. Best Quality Score: 98%\n3. Most Improved Area: Code Review Process\n4. Innovation Award: Automated Testing Framework\n\n## 🎓 Learning & Development\n-------------------------\n| Training Program        | Completion | Impact    |\n|------------------------|------------|-----------|\n| Technical Skills       | 85%        | 🟢 High    |\n| Soft Skills           | 78%        | 🟡 Medium  |\n| Leadership            | 92%        | 🟢 High    |\n| Agile Practices       | 95%        | 🟢 High    |\n\n## 🎯 Focus Areas for Improvement\n-----------------------------\n1. 📚 Enhance documentation practices (+15% needed)\n2. 🤝 Increase cross-team collaboration opportunities\n3. 🚀 Implement automated code review processes\n4. 📊 Establish mentorship program\n`,\n\n            project_duration: `\n# Project Timeline and Duration Analysis\nGenerated on: ${currentDate}\n\n## ⏱️ Timeline Overview\n---------------------\nActive Projects: ${safeData.projects.length}\nTotal Timeline: Q1 2024 - Q4 2024\nPortfolio Health: ${safeData.projects.length > 0 ? '🟢 Healthy' : '⚪ No Projects'}\n\n## 📊 Project Timeline Analysis\n---------------------------\n${safeData.projects.length > 0 ? \n    safeData.projects.map((project, index) => {\n        const planned = Math.round(3 + Math.random() * 3);\n        const actual = Math.round(4 + Math.random() * 3);\n        const spi = (0.9 + Math.random() * 0.2).toFixed(2);\n        const phase = ['Planning 📋', 'Development 👨‍💻', 'Testing 🧪', 'Deployment 🚀'][Math.floor(Math.random() * 4)];\n        const progress = Math.round(Math.random() * 100);\n        const status = progress > 75 ? '🟢' : progress > 25 ? '🟡' : '🔴';\n        \n        return `\n### ${status} ${project.name || `Project ${index + 1}`}\n▸ Timeline: ${planned} months planned / ${actual} months forecast\n▸ Schedule Performance: ${spi} ${spi >= 1 ? '✨' : '⚠️'}\n▸ Current Phase: ${phase}\n▸ Progress: [${'▓'.repeat(Math.floor(progress/10))}${'░'.repeat(10-Math.floor(progress/10))}] ${progress}%\n▸ Next Milestone: ${['Design Review', 'Beta Launch', 'Performance Testing', 'Final Release'][Math.floor(Math.random() * 4)]}\n`}).join('\\n') : '🚫 No active projects available for timeline analysis'}\n\n## 📅 Portfolio Timeline View\n--------------------------\nQ1 2024: Planning & Design Phase\n├── Requirements Gathering ✓\n├── Architecture Design ✓\n└── Team Formation ✓\n\nQ2 2024: Development Phase\n├── Core Features 🟡\n├── Integration Points 🟡\n└── MVP Release 📅\n\nQ3 2024: Testing & Optimization\n├── Quality Assurance\n├── Performance Testing\n└── User Acceptance\n\nQ4 2024: Deployment & Scale\n├── Production Release\n├── Monitoring Setup\n└── Handover & Documentation\n\n## ⚡ Velocity Trends\n-----------------\n| Sprint Period | Velocity | Trend    | Delivery Confidence |\n|--------------|----------|----------|-------------------|\n| Last Month   | 85       | ${trends.velocityTrend} | 🟢 High            |\n| This Month   | 92       | ${trends.velocityTrend} | 🟢 High            |\n| Next Month   | 95       | ${trends.velocityTrend} | 🟡 Medium          |\n\n## 🎯 Timeline Optimization Opportunities\n------------------------------------\n1. 🚀 Parallel Development Tracks\n   ▸ Potential time saving: 25%\n   ▸ Implementation complexity: Medium\n   ▸ Risk level: 🟡 Medium\n\n2. 🤖 Automated Testing Pipeline\n   ▸ Potential time saving: 15%\n   ▸ Implementation complexity: Low\n   ▸ Risk level: 🟢 Low\n\n3. 📊 Resource Optimization\n   ▸ Potential time saving: 20%\n   ▸ Implementation complexity: High\n   ▸ Risk level: 🔴 High\n\n## 📋 Action Items\n---------------\n1. Review and optimize critical path dependencies\n2. Implement automated progress tracking\n3. Establish bi-weekly timeline review meetings\n4. Update resource allocation based on timeline analysis\n\n## 📈 Success Metrics\n-----------------\n✓ On-time Delivery Rate: 85%\n✓ Milestone Achievement Rate: 92%\n✓ Resource Utilization: 88%\n✓ Timeline Accuracy: 90%\n`,\n        };\n\n        return reportTemplates[type] || reportTemplates.summary;\n    };\n\n    const downloadReportAsPdf = async () => {\n        if (!aiReport) {\n            showNotification('No report to download', 'error');\n            return;\n        }\n\n        const element = document.createElement('div');\n        element.innerHTML = aiReport.replace(/\\n/g, '<br>');\n        element.style.padding = '20px';\n        element.style.fontFamily = 'Arial, sans-serif';\n\n        const opt = {\n            margin: 1,\n            filename: `${reportType}_report.pdf`,\n            image: { type: 'jpeg', quality: 0.98 },\n            html2canvas: { scale: 2 },\n            jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }\n        };\n\n        try {\n            const pdf = await html2pdf().set(opt).from(element).save();\n            showNotification('Report downloaded successfully', 'success');\n        } catch (error) {\n            console.error('Error downloading PDF:', error);\n            showNotification('Error downloading PDF', 'error');\n        }\n    };\n\n    const generateAiReport = async () => {\n        if (!projectData) {\n            showNotification('No data available for report generation', 'error');\n            return;\n        }\n\n        setGeneratingAiReport(true);\n        try {\n            const reportContent = generateStaticReport(reportType, projectData);\n            setAiReport(reportContent);\n            showNotification('Report generated successfully', 'success');\n        } catch (error) {\n            console.error('Error generating report:', error);\n            showNotification('Error generating report', 'error');\n        } finally {\n            setGeneratingAiReport(false);\n        }\n    };\n\n    const showNotification = (message, severity = 'success') => {\n        setNotification({\n            open: true,\n            message,\n            severity,\n        });\n    };\n\n    const handleCloseNotification = () => {\n        setNotification({\n            ...notification,\n            open: false,\n        });\n    };\n\n    return (\n        <Box p={3}>\n            <Typography variant=\"h4\" gutterBottom>\n                Reports & Analytics\n            </Typography>\n\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                    <Paper elevation={3} sx={{ p: 3 }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Generate Report\n                        </Typography>\n                        <FormControl fullWidth sx={{ mb: 2 }}>\n                            <InputLabel>Report Type</InputLabel>\n                            <Select\n                                value={reportType}\n                                onChange={(e) => setReportType(e.target.value)}\n                                label=\"Report Type\"\n                            >\n                                <MenuItem value=\"progress\">Progress Report</MenuItem>\n                                <MenuItem value=\"performance\">Performance Analysis</MenuItem>\n                                <MenuItem value=\"summary\">Executive Summary</MenuItem>\n                                <MenuItem value=\"budget\">Budget & Cost Analysis</MenuItem>\n                                <MenuItem value=\"team_performance\">Team Performance by Sprint</MenuItem>\n                                <MenuItem value=\"project_duration\">Project Duration Analysis</MenuItem>\n                            </Select>\n                        </FormControl>\n\n                        <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Start Date\"\n                                    type=\"date\"\n                                    value={dateRange.startDate}\n                                    onChange={(e) =>\n                                        setDateRange({ ...dateRange, startDate: e.target.value })\n                                    }\n                                    InputLabelProps={{ shrink: true }}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    fullWidth\n                                    label=\"End Date\"\n                                    type=\"date\"\n                                    value={dateRange.endDate}\n                                    onChange={(e) =>\n                                        setDateRange({ ...dateRange, endDate: e.target.value })\n                                    }\n                                    InputLabelProps={{ shrink: true }}\n                                />\n                            </Grid>\n                        </Grid>\n\n                        <Box sx={{ mt: 2, display: 'flex', gap: 2 }}>\n                            <Button\n                                variant=\"contained\"\n                                startIcon={<Description />}\n                                onClick={generateAiReport}\n                                disabled={!reportType || generatingAiReport}\n                            >\n                                {generatingAiReport ? (\n                                    <CircularProgress size={24} color=\"inherit\" />\n                                ) : (\n                                    'Generate Report'\n                                )}\n                            </Button>\n                            <Button\n                                variant=\"outlined\"\n                                startIcon={<Download />}\n                                onClick={downloadReportAsPdf}\n                                disabled={!aiReport}\n                            >\n                                Download PDF\n                            </Button>\n                        </Box>\n                    </Paper>\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <Paper elevation={3} sx={{ p: 3, minHeight: '400px' }}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Report Preview\n                            <Tooltip title=\"Generated report preview\">\n                                <IconButton size=\"small\" sx={{ ml: 1 }}>\n                                    <Description />\n                                </IconButton>\n                            </Tooltip>\n                        </Typography>\n                        {aiReport ? (\n                            <Typography\n                                component=\"pre\"\n                                sx={{\n                                    whiteSpace: 'pre-wrap',\n                                    fontFamily: 'inherit',\n                                    mt: 2,\n                                    overflowY: 'auto',\n                                    maxHeight: 'calc(100vh - 300px)'\n                                }}\n                            >\n                                {aiReport}\n                            </Typography>\n                        ) : (\n                            <Typography color=\"text.secondary\" sx={{ mt: 2 }}>\n                                Select a report type and click 'Generate Report' to see the preview\n                            </Typography>\n                        )}\n                    </Paper>\n                </Grid>\n            </Grid>\n\n            <Snackbar\n                open={notification.open}\n                autoHideDuration={6000}\n                onClose={handleCloseNotification}\n            >\n                <Alert\n                    onClose={handleCloseNotification}\n                    severity={notification.severity}\n                    sx={{ width: '100%' }}\n                >\n                    {notification.message}\n                </Alert>\n            </Snackbar>\n        </Box>\n    );\n};\n\nexport default Reports;\n","import httpClient from '../http-common';\nimport TeamService from './TeamService';\n\nconst API_KEY = 'AIzaSyDGiyo_nl9XPZ1FQbBZDEI4c6zRdXhJVrA';\n\nconst generateAiResponse = async (prompt, context = {}) => {\n    try {\n        const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-goog-api-key': API_KEY\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [{ text: prompt }]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.7,\n                    topK: 40,\n                    topP: 0.95,\n                }\n            })\n        });\n\n        const data = await response.json();\n        \n        // Check if there's an error in the response\n        if (data.error) {\n            throw new Error(data.error.message || 'Error from Gemini API');\n        }\n\n        // The correct path to the generated text in Gemini's response\n        if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n            return data.candidates[0].content.parts[0].text;\n        } else if (data.promptFeedback) {\n            throw new Error(data.promptFeedback.blockReason || 'Content blocked by Gemini API');\n        } else {\n            throw new Error('Unexpected response structure from Gemini API');\n        }\n    } catch (error) {\n        console.error('Error generating AI response:', error);\n        throw error;\n    }\n};\n\nconst calculateProjectMetrics = (description) => {\n    const complexityIndicators = {\n        high: ['complex', 'innovative', 'large-scale', 'enterprise', 'integration', 'AI', 'machine learning', 'blockchain'],\n        medium: ['database', 'api', 'authentication', 'dashboard', 'reporting', 'mobile'],\n        low: ['simple', 'basic', 'landing page', 'static', 'form']\n    };\n\n    let complexityScore = 1;\n    const descLower = description.toLowerCase();\n    \n    complexityIndicators.high.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.5;\n    });\n    complexityIndicators.medium.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.3;\n    });\n    complexityIndicators.low.forEach(indicator => {\n        if (descLower.includes(indicator)) complexityScore += 0.1;\n    });\n\n    const baseMetrics = {\n        baseDuration: 3, // months\n        baseCost: 10000, // dollars per month\n        baseTeamSize: 3\n    };\n\n    return {\n        duration: Math.ceil(baseMetrics.baseDuration * complexityScore),\n        budget: Math.ceil(baseMetrics.baseCost * complexityScore * 1000) / 1000,\n        teamSize: Math.ceil(baseMetrics.baseTeamSize * complexityScore)\n    };\n};\n\nconst generateProjectStructure = async (requirements) => {\n    try {\n        const teamsResponse = await TeamService.getAll();\n        const availableTeams = teamsResponse.data;\n\n        const metrics = calculateProjectMetrics(requirements.description);\n\n        const prompt = `Generate a detailed project structure with the following requirements and constraints:\n\nProject Details:\n- Name: \"${requirements.name}\"\n- Description: \"${requirements.description}\"\n- Type: \"${requirements.type}\"\n- Industry: \"${requirements.industry}\"\n- Calculated Duration: ${metrics.duration} months\n- Estimated Budget: $${metrics.budget}\n- Recommended Team Size: ${metrics.teamSize} members\n\nAvailable Teams:\n${JSON.stringify(availableTeams.map(team => ({\n    id: team._id,\n    name: team.teamName,\n    skills: team.skills || []\n})))}\n\nGenerate a project structure in the following JSON format:\n{\n    \"name\": \"${requirements.name}\",\n    \"description\": \"Detailed project description\",\n    \"startDate\": \"YYYY-MM-DD\",\n    \"endDate\": \"YYYY-MM-DD\",\n    \"budget\": \"Estimated budget in numbers\",\n    \"costEstimate\": \"Estimated cost in numbers\",\n    \"keyFeatures\": [\"feature1\", \"feature2\", \"feature3\"],\n    \"teamStructure\": [\"role1\", \"role2\", \"role3\"],\n    \"recommendedTeams\": [\n        {\n            \"teamId\": \"id from available teams\",\n            \"teamName\": \"name from available teams\",\n            \"reason\": \"Why this team is recommended\"\n        }\n    ],\n    \"initialSprints\": [\n        {\n            \"name\": \"Sprint name\",\n            \"duration\": \"2 weeks\",\n            \"goals\": [\"goal1\", \"goal2\"]\n        }\n    ],\n    \"keyMilestones\": [\n        {\n            \"name\": \"Milestone name\",\n            \"date\": \"YYYY-MM-DD\",\n            \"deliverables\": [\"deliverable1\", \"deliverable2\"]\n        }\n    ],\n    \"riskAssessment\": [\n        {\n            \"risk\": \"Potential risk\",\n            \"impact\": \"High/Medium/Low\",\n            \"mitigation\": \"Mitigation strategy\"\n        }\n    ]\n}\n\nEnsure:\n1. Dates are in YYYY-MM-DD format\n2. Budget and cost estimates are realistic based on scope\n3. Team recommendations match project needs\n4. Features and milestones align with description\n5. Sprints cover the entire project duration\n6. Risk assessment is comprehensive`;\n\n        const response = await generateAiResponse(prompt, { type: 'project_creation' });\n        \n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n            throw new Error('No JSON object found in response');\n        }\n\n        const jsonStr = jsonMatch[0];\n        const cleanJson = jsonStr\n            .replace(/[\\u201C\\u201D]/g, '\"')\n            .replace(/[\\n\\r\\t]/g, ' ')\n            .replace(/,\\s*}/g, '}')\n            .replace(/,\\s*]/g, ']')\n            .replace(/([{,])\\s*([a-zA-Z0-9_]+)\\s*:/g, '$1\"$2\":')\n            .replace(/:\\s*'([^']*)'/g, ':\"$1\"')\n            .replace(/\\\\/g, '');\n\n        const parsedProject = JSON.parse(cleanJson);\n\n        const requiredFields = [\n            'name', 'description', 'startDate', 'endDate', \n            'budget', 'costEstimate', 'keyFeatures', 'teamStructure', \n            'recommendedTeams', 'initialSprints', 'keyMilestones', 'riskAssessment'\n        ];\n        \n        for (const field of requiredFields) {\n            if (!parsedProject[field]) {\n                throw new Error(`Missing required field: ${field}`);\n            }\n        }\n\n        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n        if (!dateRegex.test(parsedProject.startDate) || !dateRegex.test(parsedProject.endDate)) {\n            throw new Error('Invalid date format');\n        }\n\n        return parsedProject;\n    } catch (error) {\n        console.error('Error parsing AI response:', error);\n        \n        const metrics = calculateProjectMetrics(requirements.description);\n        \n        const today = new Date();\n        const endDate = new Date();\n        endDate.setMonth(endDate.getMonth() + metrics.duration);\n\n        return {\n            name: requirements.name,\n            description: requirements.description,\n            startDate: today.toISOString().split('T')[0],\n            endDate: endDate.toISOString().split('T')[0],\n            budget: metrics.budget.toString(),\n            costEstimate: (metrics.budget * 0.8).toString(), // 80% of budget as cost estimate\n            keyFeatures: ['Feature 1', 'Feature 2', 'Feature 3'],\n            teamStructure: ['Project Manager', 'Developer', 'Designer'],\n            recommendedTeams: [],\n            initialSprints: [\n                {\n                    name: 'Sprint 1: Planning',\n                    duration: '2 weeks',\n                    goals: ['Project Setup', 'Requirements Analysis']\n                }\n            ],\n            keyMilestones: [\n                {\n                    name: 'Project Kickoff',\n                    date: today.toISOString().split('T')[0],\n                    deliverables: ['Project Charter', 'Initial Timeline']\n                }\n            ],\n            riskAssessment: [\n                {\n                    risk: 'Timeline Risk',\n                    impact: 'Medium',\n                    mitigation: 'Regular progress monitoring'\n                }\n            ]\n        };\n    }\n};\n\nconst analyzeProject = async (projectData) => {\n    const prompt = `Provide a brief analysis of this project in bullet points:\n    - Project: ${projectData.name}\n    - Status: ${projectData.status}\n    - Timeline: ${projectData.startDate} to ${projectData.endDate}\n    \n    Focus on key insights and risks only.`;\n    return generateAiResponse(prompt, { type: 'project_analysis' });\n};\n\nconst suggestImprovements = async (projectData) => {\n    const prompt = `List 3 key improvements for this project:\n    - Project: ${projectData.name}\n    - Status: ${projectData.status}\n    - Challenges: ${projectData.challenges || 'None specified'}\n    \n    Provide specific, actionable suggestions.`;\n    return generateAiResponse(prompt, { type: 'improvement_suggestions' });\n};\n\nconst generateProjectTemplate = async (requirements) => {\n    const prompt = `Create a brief project template outline for:\n    - Industry: ${requirements.industry}\n    - Type: ${requirements.type}\n    - Team: ${requirements.teamSize}\n    - Duration: ${requirements.duration}\n    \n    List only essential components.`;\n    return generateAiResponse(prompt, { type: 'template_generation' });\n};\n\nconst estimateProjectTimeline = async (projectData) => {\n    const prompt = `Provide a quick timeline estimate for:\n    - Scope: ${projectData.description}\n    - Team: ${projectData.teamSize}\n    \n    List only major milestones and durations.`;\n    return generateAiResponse(prompt, { type: 'timeline_estimation' });\n};\n\nexport default {\n    generateAiResponse,\n    analyzeProject,\n    suggestImprovements,\n    generateProjectTemplate,\n    estimateProjectTimeline,\n    generateProjectStructure,\n};\n","import httpClient from '../http-common';\n\nconst getAll = (filters = {}) => {\n    return httpClient.get(\"/epics\", { params: filters });\n};\n\nconst getById = (epicId) => {\n    return httpClient.get(`/epics/${epicId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/epics/project/${projectId}`);\n};\n\nconst transformEpicData = (data) => {\n    const transformed = {\n        name: data.name?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original epic data:', data);\n    console.log('Transformed epic data:', transformed);\n    return transformed;\n};\n\nconst create = (epicData) => {\n    const transformedData = transformEpicData(epicData);\n    return httpClient.post(\"/epics\", transformedData);\n};\n\nconst update = (epicId, epicData) => {\n    const transformedData = transformEpicData(epicData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst remove = (epicId) => {\n    return httpClient.delete(`/epics/${epicId}`);\n};\n\nconst updateProgress = (epicId) => {\n    return httpClient.post(`/epics/${epicId}/progress`);\n};\n\nconst addWatcher = (epicId, userId) => {\n    return httpClient.post(`/epics/${epicId}/watchers`, { userId });\n};\n\nconst removeWatcher = (epicId, userId) => {\n    return httpClient.delete(`/epics/${epicId}/watchers`, { \n        data: { userId } \n    });\n};\n\nconst updateEpicStatus = (epicId, statusData) => {\n    const transformedData = transformEpicData(statusData);\n    return httpClient.put(`/epics/${epicId}`, transformedData);\n};\n\nconst EpicService = {\n    getAll,\n    getById,\n    getByProject,\n    create,\n    update,\n    remove,\n    updateProgress,\n    addWatcher,\n    removeWatcher,\n    updateEpicStatus\n};\n\nexport default EpicService;","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/issues');\n};\n\nconst getById = (issueId) => {\n    return httpClient.get(`/issues/${issueId}`);\n};\n\nconst getByProject = (projectId) => {\n    return httpClient.get(`/issues/project/${projectId}`);\n};\n\nconst getByEpic = (epicId) => {\n    return httpClient.get(`/issues/epic/${epicId}`);\n};\n\nconst getBySprint = (sprintId) => {\n    return httpClient.get(`/issues/sprint/${sprintId}`);\n};\n\nconst create = (issueData) => {\n    return httpClient.post('/issues', issueData);\n};\n\nconst transformIssueData = (data) => {\n    const transformed = {\n        title: data.title?.trim(),\n        description: data.description?.trim(),\n        status: data.status?.toLowerCase() || 'to do',\n        priority: (data.priority || 'medium').toLowerCase(),\n        startDate: data.startDate || undefined,\n        dueDate: data.dueDate || undefined,\n        owner: data.owner || localStorage.getItem('userId'),\n        assignee: data.assignee || null,\n        watchers: data.watchers || []\n    };\n\n    // Handle project field separately to preserve null values\n    if (data.project !== undefined) {\n        transformed.project = data.project || null;\n    }\n\n    // Remove undefined values, but keep null values\n    Object.keys(transformed).forEach(key => {\n        if (transformed[key] === undefined) {\n            delete transformed[key];\n        }\n    });\n\n    console.log('Original issue data:', data);\n    console.log('Transformed issue data:', transformed);\n    return transformed;\n};\n\nconst update = (issueId, issueData) => {\n    const transformedData = transformIssueData(issueData);\n    console.log('Transformed update data:', transformedData); // Debug log\n    return httpClient.put(`/issues/${issueId}`, transformedData);\n};\n\nconst remove = (issueId) => {\n    return httpClient.delete(`/issues/${issueId}`);\n};\n\nconst addComment = (issueId, commentData) => {\n    return httpClient.post(`/issues/${issueId}/comments`, commentData);\n};\n\nconst addAttachment = (issueId, file) => {\n    const formData = new FormData();\n    formData.append('attachment', file);\n    return httpClient.post(`/issues/${issueId}/attachments`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n};\n\nconst updateTimeTracking = (issueId, timeData) => {\n    return httpClient.post(`/issues/${issueId}/timetracking`, timeData);\n};\n\nexport default {\n    getAll,\n    getById,\n    getByProject,\n    getByEpic,\n    getBySprint,\n    create,\n    update,\n    remove,\n    addComment,\n    addAttachment,\n    updateTimeTracking\n};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get(\"/projects\");\n};\n\nconst create = data => {\n    return httpClient.post(\"/projects\", data);\n};\n\nconst get = id => {\n    return httpClient.get(`/projects/${id}`);\n};\n\nconst getProjectById = id => {\n    return httpClient.get(`/projects/id/${id}`);\n};\n\nconst update = (id, data) => {\n    return httpClient.put(`/projects/${id}`, data);\n};\n\nconst remove = id => {\n    return httpClient.delete(`/projects/${id}`);\n};\n\nconst removeAll = () => {\n    return httpClient.delete(`/projects`);\n};\n\nconst findByTitle = title => {\n    return httpClient.get(`/projects?title=${title}`);\n};\n\nconst getProjectProgress = projectId => {\n    return httpClient.get(`/projects/${projectId}/progress`);\n};\n\nconst getBudgetAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/budget-analytics`);\n};\n\nconst getTeamPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/team-performance`);\n};\n\nconst searchProjects = searchParams => {\n    return httpClient.post(`/projects/search`, searchParams);\n};\n\nconst getProjectMessages = projectId => {\n    return httpClient.get(`/projects/${projectId}/messages`);\n};\n\nconst sendProjectMessage = (projectId, message) => {\n    return httpClient.post(`/projects/${projectId}/messages`, message);\n};\n\nconst exportProjectReport = (projectId, format) => {\n    return httpClient.get(`/projects/${projectId}/export/${format}`);\n};\n\nconst scheduleReport = (projectId, scheduleData) => {\n    return httpClient.post(`/projects/${projectId}/schedule-report`, scheduleData);\n};\n\nconst getProjectAnalytics = projectId => {\n    return httpClient.get(`/projects/${projectId}/analytics`);\n};\n\nconst getProjectPerformance = projectId => {\n    return httpClient.get(`/projects/${projectId}/performance`);\n};\nconst findByTeams = teamId => {\n    return httpClient.get(`/projects/teams/${teamId}`);\n    \n    \n};\n\n\nexport default {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByTitle,\n    getProjectProgress,\n    getBudgetAnalytics,\n    getTeamPerformance,\n    searchProjects,\n    getProjectMessages,\n    sendProjectMessage,\n    exportProjectReport,\n    scheduleReport,\n    getProjectAnalytics,\n    getProjectById,\n    findByTeams\n};\n","import httpClient from '../http-common';\n\nconst getAll = () => {\n    return httpClient.get('/sprints');\n};\n\nconst getSprint = (sprintId) => {\n    return httpClient.get(`/sprints/id/${sprintId}`);\n};\n\nconst create = (sprintData) => {\n    return httpClient.post('/sprints', sprintData);\n};\n\nconst update = (sprintId, sprintData) => {\n    return httpClient.put(`/sprints/${sprintId}`, sprintData);\n};\n\nconst deleteSprint = (sprintId) => {\n    return httpClient.delete(`/sprints/${sprintId}`);\n};\n\nconst updateBacklogItems = (sprintId, backlogItemId) => {\n    console.log('Sending backlogItemId:', backlogItemId);\n    return httpClient.put(`/sprints/${sprintId}/backlogItems`, { backlogItemId });\n};\n\nconst getByProject = (projectId) => {\n    console.log('Fetching sprints for project:', projectId);\n    return httpClient.get(`/sprints/project/${projectId}`);\n};\n\nexport default { \n    getAll, \n    getSprint, \n    create, \n    update, \n    deleteSprint, \n    updateBacklogItems, \n    getByProject \n};\n"],"names":["Reports","reportType","setReportType","useState","format","setFormat","dateRange","setDateRange","startDate","endDate","scheduleInterval","setScheduleInterval","loading","setLoading","notification","setNotification","open","message","severity","projectData","setProjectData","aiReport","setAiReport","generatingAiReport","setGeneratingAiReport","useEffect","fetchAllData","async","projectsRes","issuesRes","sprintsRes","epicsRes","Promise","all","ProjectService","getAll","IssueService","SprintService","EpicService","projects","data","issues","sprints","epics","error","console","showNotification","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","generateStaticReport","type","safeData","Array","isArray","trends","velocityTrend","Math","random","budgetTrend","qualityTrend","teamHealthTrend","currentDate","Date","toLocaleDateString","year","month","day","reportTemplates","budget","concat","length","map","project","index","allocated","round","spent","remaining","cpi","toFixed","name","join","team_performance","ceil","sprint","velocity","completed","productivity","quality","max","fill","project_duration","planned","actual","spi","phase","floor","progress","repeat","summary","arguments","undefined","handleCloseNotification","_objectSpread","_jsxs","Box","p","children","_jsx","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Paper","elevation","sx","FormControl","fullWidth","mb","InputLabel","Select","value","onChange","e","target","label","MenuItem","TextField","InputLabelProps","shrink","mt","display","gap","Button","startIcon","Description","onClick","reportContent","disabled","CircularProgress","size","color","Download","element","document","createElement","innerHTML","replace","padding","fontFamily","opt","margin","filename","image","html2canvas","scale","jsPDF","unit","orientation","html2pdf","set","from","save","minHeight","Tooltip","title","IconButton","ml","component","whiteSpace","overflowY","maxHeight","Snackbar","autoHideDuration","onClose","Alert","width","generateAiResponse","prompt","response","fetch","method","headers","body","JSON","stringify","contents","role","parts","text","generationConfig","temperature","topK","topP","json","Error","candidates","content","promptFeedback","blockReason","calculateProjectMetrics","description","complexityIndicators","high","medium","low","complexityScore","descLower","toLowerCase","forEach","indicator","includes","baseMetrics","duration","teamSize","analyzeProject","status","suggestImprovements","challenges","generateProjectTemplate","requirements","industry","estimateProjectTimeline","generateProjectStructure","availableTeams","TeamService","metrics","team","id","_id","teamName","skills","jsonMatch","match","cleanJson","parsedProject","parse","requiredFields","field","dateRegex","test","today","setMonth","getMonth","toISOString","split","toString","costEstimate","keyFeatures","teamStructure","recommendedTeams","initialSprints","goals","keyMilestones","date","deliverables","riskAssessment","risk","impact","mitigation","transformEpicData","_data$name","_data$description","_data$status","transformed","trim","priority","dueDate","owner","localStorage","getItem","watchers","Object","keys","key","log","filters","httpClient","get","params","getById","epicId","getByProject","projectId","create","epicData","transformedData","post","update","put","remove","delete","updateProgress","addWatcher","userId","removeWatcher","updateEpicStatus","statusData","issueId","getByEpic","getBySprint","sprintId","issueData","_data$title","assignee","transformIssueData","addComment","commentData","addAttachment","file","formData","FormData","append","updateTimeTracking","timeData","removeAll","findByTitle","getProjectProgress","getBudgetAnalytics","getTeamPerformance","searchProjects","searchParams","getProjectMessages","sendProjectMessage","exportProjectReport","scheduleReport","scheduleData","getProjectAnalytics","getProjectById","findByTeams","teamId","getSprint","sprintData","deleteSprint","updateBacklogItems","backlogItemId"],"sourceRoot":""}