{"version":3,"file":"static/js/793.a781dd26.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js","../node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js","../node_modules/@mui/icons-material/esm/AttachFile.js","../node_modules/@mui/icons-material/esm/Send.js","../node_modules/date-fns/constructNow.js","../node_modules/date-fns/compareAsc.js","../node_modules/date-fns/differenceInCalendarMonths.js","../node_modules/date-fns/endOfDay.js","../node_modules/date-fns/endOfMonth.js","../node_modules/date-fns/isLastDayOfMonth.js","../node_modules/date-fns/differenceInMonths.js","../node_modules/date-fns/differenceInMilliseconds.js","../node_modules/date-fns/differenceInSeconds.js","../node_modules/date-fns/_lib/getRoundingMethod.js","../node_modules/date-fns/formatDistance.js","../node_modules/date-fns/formatDistanceToNow.js","components/Collaboration/ProjectChat.jsx"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport ListContext from \"../List/ListContext.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getListItemAvatarUtilityClass } from \"./listItemAvatarClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})({\n  minWidth: 56,\n  flexShrink: 0,\n  variants: [{\n    props: {\n      alignItems: 'flex-start'\n    },\n    style: {\n      marginTop: 8\n    }\n  }]\n});\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n  const {\n    className,\n    ...other\n  } = props;\n  const context = React.useContext(ListContext);\n  const ownerState = {\n    ...props,\n    alignItems: context.alignItems\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemAvatar;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6z\"\n}), 'AttachFile');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\n\n  if (diff < 0) return -1;\n  else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMonth} function options.\n */\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.js\";\nimport { endOfMonth } from \"./endOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\n\n/**\n * The {@link differenceInMonths} function options.\n */\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(laterDate, earlierDate, options) {\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareAsc(workingLaterDate, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarMonths(workingLaterDate, earlierDate_),\n  );\n\n  if (difference < 1) return 0;\n\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)\n    workingLaterDate.setDate(30);\n\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\n\n  if (\n    isLastDayOfMonth(laterDate_) &&\n    difference === 1 &&\n    compareAsc(laterDate_, earlierDate_) === 1\n  ) {\n    isLastMonthNotFull = false;\n  }\n\n  const result = sign * (difference - +isLastMonthNotFull);\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { minutesInDay, minutesInMonth } from \"./constants.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistance(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const seconds = differenceInSeconds(earlierDate_, laterDate_);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(earlierDate_) -\n      getTimezoneOffsetInMilliseconds(laterDate_)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(earlierDate_, laterDate_);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { constructNow } from \"./constructNow.js\";\n\nimport { formatDistance } from \"./formatDistance.js\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n    Box,\n    Paper,\n    TextField,\n    Button,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n    Typography,\n    Divider,\n    IconButton,\n} from '@mui/material';\nimport { Send, AttachFile } from '@mui/icons-material';\nimport { formatDistanceToNow } from 'date-fns';\nimport io from 'socket.io-client';\n\nconst ProjectChat = ({ projectId, currentUser }) => {\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [socket, setSocket] = useState(null);\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        // Initialize WebSocket connection\n        const newSocket = io('http://localhost:3000', {\n            query: { projectId }\n        });\n\n        setSocket(newSocket);\n\n        // Load existing messages\n        fetchMessages();\n\n        // Listen for new messages\n        newSocket.on('new-message', (message) => {\n            setMessages(prev => [...prev, message]);\n        });\n\n        return () => newSocket.disconnect();\n    }, [projectId]);\n\n    const fetchMessages = async () => {\n        try {\n            const response = await fetch(`/api/projects/${projectId}/messages`);\n            const data = await response.json();\n            setMessages(data);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n        }\n    };\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages]);\n\n    const handleSendMessage = async (e) => {\n        e.preventDefault();\n        if (!newMessage.trim()) return;\n\n        const messageData = {\n            content: newMessage,\n            projectId,\n            userId: currentUser.id,\n            timestamp: new Date().toISOString(),\n        };\n\n        try {\n            // Send to backend\n            await fetch('/api/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(messageData),\n            });\n\n            // Emit through WebSocket\n            socket.emit('send-message', messageData);\n\n            setNewMessage('');\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    return (\n        <Paper sx={{ height: '600px', display: 'flex', flexDirection: 'column' }}>\n            <Box sx={{ p: 2, backgroundColor: 'primary.main', color: 'white' }}>\n                <Typography variant=\"h6\">Project Chat</Typography>\n            </Box>\n            \n            <List sx={{ flexGrow: 1, overflow: 'auto', p: 2 }}>\n                {messages.map((message, index) => (\n                    <React.Fragment key={message.id}>\n                        <ListItem alignItems=\"flex-start\">\n                            <ListItemAvatar>\n                                <Avatar alt={message.user.name} src={message.user.avatar} />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={\n                                    <Typography\n                                        component=\"span\"\n                                        variant=\"body1\"\n                                        color=\"text.primary\"\n                                    >\n                                        {message.user.name}\n                                    </Typography>\n                                }\n                                secondary={\n                                    <>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            color=\"text.primary\"\n                                        >\n                                            {message.content}\n                                        </Typography>\n                                        {' — '}\n                                        {formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}\n                                    </>\n                                }\n                            />\n                        </ListItem>\n                        {index < messages.length - 1 && <Divider variant=\"inset\" component=\"li\" />}\n                    </React.Fragment>\n                ))}\n                <div ref={messagesEndRef} />\n            </List>\n\n            <Box\n                component=\"form\"\n                onSubmit={handleSendMessage}\n                sx={{\n                    p: 2,\n                    backgroundColor: 'background.paper',\n                    borderTop: 1,\n                    borderColor: 'divider',\n                    display: 'flex',\n                    gap: 1,\n                }}\n            >\n                <IconButton size=\"small\">\n                    <AttachFile />\n                </IconButton>\n                <TextField\n                    fullWidth\n                    size=\"small\"\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    placeholder=\"Type a message...\"\n                    variant=\"outlined\"\n                />\n                <Button\n                    variant=\"contained\"\n                    endIcon={<Send />}\n                    type=\"submit\"\n                >\n                    Send\n                </Button>\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ProjectChat;\n"],"names":["getListItemAvatarUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListItemAvatarRoot","styled","name","overridesResolver","props","styles","ownerState","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","variants","style","marginTop","React","inProps","ref","useDefaultProps","className","other","_objectWithoutProperties","context","ListContext","_objectSpread","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","createSvgIcon","d","constructNow","date","constructFrom","Date","now","compareAsc","dateLeft","dateRight","diff","toDate","differenceInCalendarMonths","laterDate","earlierDate","options","laterDate_","earlierDate_","normalizeDates","in","getFullYear","getMonth","endOfDay","_date","setHours","endOfMonth","month","setFullYear","isLastDayOfMonth","differenceInMonths","workingLaterDate","sign","difference","Math","abs","getDate","setDate","setMonth","isLastMonthNotFull","result","differenceInMilliseconds","differenceInSeconds","method","roundingMethod","number","trunc","formatDistance","_ref","_options$locale","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","round","months","includeSeconds","minutesInDay","hours","minutesInMonth","days","nearestMonth","monthsSinceStartOfYear","years","formatDistanceToNow","projectId","currentUser","messages","setMessages","useState","newMessage","setNewMessage","socket","setSocket","messagesEndRef","useRef","useEffect","newSocket","io","query","fetchMessages","on","message","prev","disconnect","async","response","fetch","concat","data","json","error","console","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","_jsxs","Paper","sx","height","display","flexDirection","children","Box","p","backgroundColor","color","Typography","variant","List","flexGrow","overflow","map","index","ListItem","ListItemAvatar","Avatar","alt","user","src","avatar","ListItemText","primary","component","secondary","_Fragment","content","timestamp","length","Divider","id","onSubmit","e","preventDefault","trim","messageData","userId","toISOString","headers","body","JSON","stringify","emit","borderTop","borderColor","gap","IconButton","size","AttachFile","TextField","fullWidth","value","onChange","target","placeholder","Button","endIcon","Send","type"],"sourceRoot":""}